<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518"
     xmlns="http://www.w3.org/2000/svg">
    <style type="text/css">
        text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
        #search { opacity:0.1; cursor:pointer; }
        #search:hover, #search.show { opacity:1; }
        #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
        #title { text-anchor:middle; font-size:17px}
        #unzoom { cursor:pointer; }
        #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
        .hide { display:none; }
        .parent { opacity:0.5; }
    </style>
    <script type="text/ecmascript">
        <![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
    </script>
    <rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
    <text id="title" x="600" y="24">Flame Graph</text>
    <text id="details" x="10" y="501"></text>
    <text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
    <text id="search" x="1090" y="24">Search</text>
    <text id="matched" x="1090" y="501"></text>
    <g id="frames">
        <g>
            <title>all (4,164 samples, 100.00%)</title>
            <rect x="10.0" y="467.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="13.0" y="478.0">all</text>
        </g>
        <g>
            <title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.19%)</title>
            <rect x="10.0" y="451.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="13.0" y="462.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title>
            <rect x="10.0" y="435.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="13.0" y="446.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.02%)</title>
            <rect x="10.6" y="435.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="13.6" y="446.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.02%)</title>
            <rect x="10.6" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="13.6" y="430.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (1 samples, 0.02%)</title>
            <rect x="10.6" y="403.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="13.6" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)</title>
            <rect x="10.6" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="13.6" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.02%)
            </title>
            <rect x="10.6" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="13.6" y="382.0"></text>
        </g>
        <g>
            <title>G1ContiguousSpace::free() const (1 samples, 0.02%)</title>
            <rect x="10.6" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="13.6" y="366.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.12%)</title>
            <rect x="10.9" y="435.0" width="1.4" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="13.9" y="446.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.10%)</title>
            <rect x="11.1" y="419.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="14.1" y="430.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (4 samples, 0.10%)</title>
            <rect x="11.1" y="403.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="14.1" y="414.0"></text>
        </g>
        <g>
            <title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1
                samples, 0.02%)
            </title>
            <rect x="11.1" y="387.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="14.1" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation() (1 samples, 0.02%)</title>
            <rect x="11.4" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="14.4" y="398.0"></text>
        </g>
        <g>
            <title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1
                samples, 0.02%)
            </title>
            <rect x="11.4" y="371.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="14.4" y="382.0"></text>
        </g>
        <g>
            <title>LeakProfiler::is_running() (1 samples, 0.02%)</title>
            <rect x="11.4" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="14.4" y="366.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title>
            <rect x="11.7" y="387.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="14.7" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)
            </title>
            <rect x="11.7" y="371.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="14.7" y="382.0"></text>
        </g>
        <g>
            <title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title>
            <rect x="11.7" y="355.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="14.7" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.02%)
            </title>
            <rect x="12.0" y="355.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="15.0" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.02%)</title>
            <rect x="12.0" y="339.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="15.0" y="350.0"></text>
        </g>
        <g>
            <title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.02%)</title>
            <rect x="12.0" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="15.0" y="334.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.02%)</title>
            <rect x="12.0" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="15.0" y="318.0"></text>
        </g>
        <g>
            <title>G1FromCardCache::clear(unsigned int) (1 samples, 0.02%)</title>
            <rect x="12.0" y="291.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="15.0" y="302.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.07%)</title>
            <rect x="12.3" y="451.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="15.3" y="462.0"></text>
        </g>
        <g>
            <title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.02%)</title>
            <rect x="12.3" y="435.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="15.3" y="446.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title>
            <rect x="12.3" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="15.3" y="430.0"></text>
        </g>
        <g>
            <title>os::is_MP() (1 samples, 0.02%)</title>
            <rect x="12.3" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="15.3" y="414.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title>
            <rect x="12.6" y="435.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="15.6" y="446.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.05%)</title>
            <rect x="12.6" y="419.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="15.6" y="430.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (2 samples, 0.05%)</title>
            <rect x="12.6" y="403.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="15.6" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)</title>
            <rect x="12.6" y="387.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="15.6" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.05%)
            </title>
            <rect x="12.6" y="371.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="15.6" y="382.0"></text>
        </g>
        <g>
            <title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.02%)</title>
            <rect x="12.6" y="355.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="15.6" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::max_tlab_size() const (1 samples, 0.02%)</title>
            <rect x="12.6" y="339.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="15.6" y="350.0"></text>
        </g>
        <g>
            <title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (1 samples, 0.02%)</title>
            <rect x="12.8" y="355.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="15.8" y="366.0"></text>
        </g>
        <g>
            <title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (1 samples, 0.02%)</title>
            <rect x="12.8" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="15.8" y="350.0"></text>
        </g>
        <g>
            <title>HandleMark::~HandleMark() (1 samples, 0.02%)</title>
            <rect x="12.8" y="323.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="15.8" y="334.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (6 samples, 0.14%)</title>
            <rect x="13.1" y="451.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="16.1" y="462.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.12%)</title>
            <rect x="13.4" y="435.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="16.4" y="446.0"></text>
        </g>
        <g>
            <title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.10%)</title>
            <rect x="13.7" y="419.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="16.7" y="430.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (3 samples, 0.07%)</title>
            <rect x="13.7" y="403.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="16.7" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.02%)</title>
            <rect x="13.7" y="387.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="16.7" y="398.0"></text>
        </g>
        <g>
            <title>ObjAllocator::initialize(HeapWord*) const (1 samples, 0.02%)</title>
            <rect x="14.0" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="17.0" y="398.0"></text>
        </g>
        <g>
            <title>_platform_bzero$VARIANT$Haswell (1 samples, 0.02%)</title>
            <rect x="14.3" y="387.0" width="0.2" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="17.3" y="398.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (1 samples, 0.02%)</title>
            <rect x="14.5" y="403.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
            <text x="17.5" y="414.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (47 samples, 1.13%)
            </title>
            <rect x="14.8" y="451.0" width="13.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="17.8" y="462.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::enter(Thread*) (46 samples, 1.10%)</title>
            <rect x="15.1" y="435.0" width="13.0" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="18.1" y="446.0"></text>
        </g>
        <g>
            <title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*,
                ObjectMonitor*) (1 samples, 0.02%)
            </title>
            <rect x="15.4" y="419.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="18.4" y="430.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::save_old_state(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="15.4" y="403.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="18.4" y="414.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title>
            <rect x="15.4" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="18.4" y="398.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::EnterI(Thread*) (12 samples, 0.29%)</title>
            <rect x="15.7" y="419.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="18.7" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (1 samples, 0.02%)</title>
            <rect x="15.7" y="403.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="18.7" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (5 samples, 0.12%)</title>
            <rect x="16.0" y="403.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="19.0" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.05%)</title>
            <rect x="16.8" y="387.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="19.8" y="398.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (6 samples, 0.14%)</title>
            <rect x="17.4" y="403.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="20.4" y="414.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (6 samples, 0.14%)</title>
            <rect x="17.4" y="387.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="20.4" y="398.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (5 samples, 0.12%)</title>
            <rect x="19.1" y="419.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="22.1" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (26 samples, 0.62%)</title>
            <rect x="20.5" y="419.0" width="7.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="23.5" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (11 samples, 0.26%)</title>
            <rect x="24.7" y="403.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="27.7" y="414.0"></text>
        </g>
        <g>
            <title>SpinPause (1 samples, 0.02%)</title>
            <rect x="27.9" y="419.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="30.9" y="430.0"></text>
        </g>
        <g>
            <title>ThreadInVMfromJava::~ThreadInVMfromJava() (1 samples, 0.02%)</title>
            <rect x="28.1" y="451.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="31.1" y="462.0"></text>
        </g>
        <g>
            <title>[not_walkable] (4 samples, 0.10%)</title>
            <rect x="28.4" y="451.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="31.4" y="462.0"></text>
        </g>
        <g>
            <title>[not_walkable_Java] (5 samples, 0.12%)</title>
            <rect x="29.6" y="451.0" width="1.4" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="32.6" y="462.0"></text>
        </g>
        <g>
            <title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.02%)</title>
            <rect x="29.6" y="435.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="32.6" y="446.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.05%)</title>
            <rect x="29.8" y="435.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="32.8" y="446.0"></text>
        </g>
        <g>
            <title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.02%)</title>
            <rect x="29.8" y="419.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="32.8" y="430.0"></text>
        </g>
        <g>
            <title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="30.1" y="419.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="33.1" y="430.0"></text>
        </g>
        <g>
            <title>CodeBlob::is_compiled() const (1 samples, 0.02%)</title>
            <rect x="30.1" y="403.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="33.1" y="414.0"></text>
        </g>
        <g>
            <title>Runtime1::monitorexit(JavaThread*, BasicObjectLock*) (1 samples, 0.02%)</title>
            <rect x="30.4" y="435.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="33.4" y="446.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.02%)</title>
            <rect x="30.4" y="419.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="33.4" y="430.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (1 samples, 0.02%)</title>
            <rect x="30.4" y="403.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="33.4" y="414.0"></text>
        </g>
        <g>
            <title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="30.7" y="435.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="33.7" y="446.0"></text>
        </g>
        <g>
            <title>[unknown_Java] (14 samples, 0.34%)</title>
            <rect x="31.0" y="451.0" width="3.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="34.0" y="462.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (4 samples, 0.10%)</title>
            <rect x="33.8" y="435.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="36.8" y="446.0"></text>
        </g>
        <g>
            <title>h_errno (4 samples, 0.10%)</title>
            <rect x="33.8" y="419.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="36.8" y="430.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.run (1,867 samples, 44.84%)</title>
            <rect x="34.9" y="451.0" width="529.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="37.9" y="462.0">java/lang/Thread.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.run (1,867 samples, 44.84%)</title>
            <rect x="34.9" y="435.0" width="529.1" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="37.9" y="446.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.runWorker (1,867 samples, 44.84%)</title>
            <rect x="34.9" y="419.0" width="529.1" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="37.9" y="430.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
        </g>
        <g>
            <title>java/lang/Thread.interrupted (3 samples, 0.07%)</title>
            <rect x="35.2" y="403.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="38.2" y="414.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.isInterrupted (3 samples, 0.07%)</title>
            <rect x="35.2" y="387.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="38.2" y="398.0"></text>
        </g>
        <g>
            <title>JVM_IsInterrupted (2 samples, 0.05%)</title>
            <rect x="35.2" y="371.0" width="0.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="38.2" y="382.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::release_stable_list() (1 samples, 0.02%)</title>
            <rect x="35.5" y="355.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="38.5" y="366.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::ThreadsListHandle(Thread*) (1 samples, 0.02%)</title>
            <rect x="35.8" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="38.8" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (2 samples, 0.05%)</title>
            <rect x="36.1" y="403.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="39.1" y="414.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title>
            <rect x="36.1" y="387.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="39.1" y="398.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title>
            <rect x="36.1" y="371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="39.1" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (1 samples, 0.02%)</title>
            <rect x="36.1" y="355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="39.1" y="366.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$74/1821403972.run (1 samples, 0.02%)</title>
            <rect x="36.4" y="387.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="39.4" y="398.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.getTask (704 samples, 16.91%)</title>
            <rect x="36.6" y="403.0" width="199.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="39.6" y="414.0">java/util/concurrent/Threa..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.take (693 samples, 16.64%)</title>
            <rect x="38.1" y="387.0" width="196.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="41.1" y="398.0">java/util/concurrent/Linke..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.dequeue (1 samples, 0.02%)</title>
            <rect x="38.1" y="371.0" width="0.2" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="41.1" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (639 samples, 15.35%)
            </title>
            <rect x="38.3" y="371.0" width="181.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="41.3" y="382.0">java/util/concurrent/lo..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (1 samples, 0.02%)</title>
            <rect x="40.0" y="355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="43.0" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (7 samples, 0.17%)</title>
            <rect x="40.3" y="355.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="43.3" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (7 samples, 0.17%)</title>
            <rect x="40.3" y="339.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="43.3" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (1 samples, 0.02%)</title>
            <rect x="41.5" y="323.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="44.5" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.02%)</title>
            <rect x="41.5" y="307.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="44.5" y="318.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.02%)</title>
            <rect x="41.5" y="291.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="44.5" y="302.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (1 samples, 0.02%)</title>
            <rect x="41.5" y="275.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="44.5" y="286.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (1 samples, 0.02%)</title>
            <rect x="41.5" y="259.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
            <text x="44.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.05%)</title>
            <rect x="41.7" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="44.7" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (625 samples, 15.01%)</title>
            <rect x="42.3" y="355.0" width="177.1" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="45.3" y="366.0">java/util/concurrent/lo..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (625 samples, 15.01%)</title>
            <rect x="42.3" y="339.0" width="177.1" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="45.3" y="350.0">jdk/internal/misc/Unsaf..</text>
        </g>
        <g>
            <title>EventThreadPark::EventThreadPark(EventStartTime) (1 samples, 0.02%)</title>
            <rect x="52.2" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="55.2" y="334.0"></text>
        </g>
        <g>
            <title>JavaThread::parker() (3 samples, 0.07%)</title>
            <rect x="52.5" y="323.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="55.5" y="334.0"></text>
        </g>
        <g>
            <title>JavaThreadParkedState::~JavaThreadParkedState() (3 samples, 0.07%)</title>
            <rect x="53.4" y="323.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="56.4" y="334.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (2 samples, 0.05%)</title>
            <rect x="54.2" y="323.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="57.2" y="334.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (1 samples, 0.02%)</title>
            <rect x="54.8" y="323.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="57.8" y="334.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (579 samples, 13.90%)</title>
            <rect x="55.1" y="323.0" width="164.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="58.1" y="334.0">Unsafe_Park(JNIEnv_*,..</text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (3 samples, 0.07%)</title>
            <rect x="55.9" y="307.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="58.9" y="318.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (1 samples, 0.02%)</title>
            <rect x="56.5" y="291.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="59.5" y="302.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.05%)</title>
            <rect x="56.8" y="307.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="59.8" y="318.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.10%)</title>
            <rect x="57.3" y="307.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="60.3" y="318.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (4 samples, 0.10%)</title>
            <rect x="57.3" y="291.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="60.3" y="302.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.07%)</title>
            <rect x="57.6" y="275.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="60.6" y="286.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (3 samples, 0.07%)
            </title>
            <rect x="57.6" y="259.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="60.6" y="270.0"></text>
        </g>
        <g>
            <title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.02%)</title>
            <rect x="57.6" y="243.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="60.6" y="254.0"></text>
        </g>
        <g>
            <title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title>
            <rect x="57.9" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="60.9" y="254.0"></text>
        </g>
        <g>
            <title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (1 samples,
                0.02%)
            </title>
            <rect x="58.2" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="61.2" y="254.0"></text>
        </g>
        <g>
            <title>int Atomic::load&lt;int&gt;(int const volatile*) (1 samples, 0.02%)</title>
            <rect x="58.2" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="61.2" y="238.0"></text>
        </g>
        <g>
            <title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.07%)</title>
            <rect x="58.5" y="307.0" width="0.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="61.5" y="318.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (2
                samples, 0.05%)
            </title>
            <rect x="58.5" y="291.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="61.5" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::save_old_state(JavaThread*) (2 samples, 0.05%)</title>
            <rect x="58.5" y="275.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="61.5" y="286.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::get_thread_status(oopDesc*) (1 samples, 0.02%)</title>
            <rect x="58.7" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="61.7" y="270.0"></text>
        </g>
        <g>
            <title>ThreadService::is_thread_monitoring_contention() (1 samples, 0.02%)</title>
            <rect x="59.0" y="291.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="62.0" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (1 samples,
                0.02%)
            </title>
            <rect x="59.3" y="307.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="62.3" y="318.0"></text>
        </g>
        <g>
            <title>JavaThread::threadObj() const (1 samples, 0.02%)</title>
            <rect x="59.3" y="291.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="62.3" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (1 samples, 0.02%)</title>
            <rect x="59.6" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="62.6" y="318.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (5 samples, 0.12%)</title>
            <rect x="59.9" y="307.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="62.9" y="318.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::is_enabled(JfrEventId) (4 samples, 0.10%)</title>
            <rect x="59.9" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="62.9" y="302.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.02%)</title>
            <rect x="60.7" y="275.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="63.7" y="286.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::setting(JfrEventId) (1 samples, 0.02%)</title>
            <rect x="61.0" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="64.0" y="302.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (527 samples, 12.66%)</title>
            <rect x="61.3" y="307.0" width="149.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="64.3" y="318.0">Parker::park(bool, ..</text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title>
            <rect x="63.8" y="291.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="66.8" y="302.0"></text>
        </g>
        <g>
            <title>os::is_MP() (1 samples, 0.02%)</title>
            <rect x="63.8" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="66.8" y="286.0"></text>
        </g>
        <g>
            <title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="64.1" y="291.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="67.1" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.12%)</title>
            <rect x="64.4" y="291.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="67.4" y="302.0"></text>
        </g>
        <g>
            <title>Monitor::IUnlock(bool) (2 samples, 0.05%)</title>
            <rect x="64.7" y="275.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="67.7" y="286.0"></text>
        </g>
        <g>
            <title>Monitor::lock_without_safepoint_check() (1 samples, 0.02%)</title>
            <rect x="65.3" y="275.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="68.3" y="286.0"></text>
        </g>
        <g>
            <title>Monitor::ILock(Thread*) (1 samples, 0.02%)</title>
            <rect x="65.3" y="259.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="68.3" y="270.0"></text>
        </g>
        <g>
            <title>Monitor::TryFast() (1 samples, 0.02%)</title>
            <rect x="65.3" y="243.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="68.3" y="254.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (1 samples, 0.02%)</title>
            <rect x="65.5" y="275.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
            <text x="68.5" y="286.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (1 samples, 0.02%)</title>
            <rect x="65.8" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="68.8" y="302.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (488 samples, 11.72%)</title>
            <rect x="66.1" y="291.0" width="138.3" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="69.1" y="302.0">__psynch_cvwait</text>
        </g>
        <g>
            <title>_pthread_cond_wait (13 samples, 0.31%)</title>
            <rect x="204.4" y="291.0" width="3.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="207.4" y="302.0"></text>
        </g>
        <g>
            <title>_pthread_mutex_droplock (1 samples, 0.02%)</title>
            <rect x="207.8" y="275.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
            <text x="210.8" y="286.0"></text>
        </g>
        <g>
            <title>_pthread_testcancel (7 samples, 0.17%)</title>
            <rect x="208.1" y="291.0" width="2.0" height="15" fill="#f17070" rx="2" ry="2"/>
            <text x="211.1" y="302.0"></text>
        </g>
        <g>
            <title>pthread_dependency_wait_np.cold.3 (2 samples, 0.05%)</title>
            <rect x="210.1" y="291.0" width="0.5" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="213.1" y="302.0"></text>
        </g>
        <g>
            <title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (4 samples, 0.10%)</title>
            <rect x="210.6" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="213.6" y="318.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4
                samples, 0.10%)
            </title>
            <rect x="211.8" y="307.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="214.8" y="318.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (1 samples, 0.02%)</title>
            <rect x="211.8" y="291.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="214.8" y="302.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.07%)</title>
            <rect x="212.1" y="291.0" width="0.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="215.1" y="302.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title>
            <rect x="212.1" y="275.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="215.1" y="286.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="212.1" y="259.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="215.1" y="270.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (2
                samples, 0.05%)
            </title>
            <rect x="212.3" y="259.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="215.3" y="270.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)
            </title>
            <rect x="212.3" y="243.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="215.3" y="254.0"></text>
        </g>
        <g>
            <title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title>
            <rect x="212.3" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="215.3" y="238.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (1 samples, 0.02%)
            </title>
            <rect x="212.6" y="227.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="215.6" y="238.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples,
                0.02%)
            </title>
            <rect x="212.6" y="211.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="215.6" y="222.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void
                volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="212.6" y="195.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="215.6" y="206.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.17%)
            </title>
            <rect x="212.9" y="307.0" width="2.0" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="215.9" y="318.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.07%)</title>
            <rect x="212.9" y="291.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="215.9" y="302.0"></text>
        </g>
        <g>
            <title>os::is_MP() (3 samples, 0.07%)</title>
            <rect x="212.9" y="275.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="215.9" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (3 samples, 0.07%)</title>
            <rect x="213.8" y="291.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="216.8" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::is_Java_thread() const (1 samples, 0.02%)</title>
            <rect x="214.0" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="217.0" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title>
            <rect x="214.3" y="275.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="217.3" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title>
            <rect x="214.6" y="291.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="217.6" y="302.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (2 samples, 0.05%)</title>
            <rect x="214.9" y="307.0" width="0.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="217.9" y="318.0"></text>
        </g>
        <g>
            <title>compiler_barrier() (1 samples, 0.02%)</title>
            <rect x="215.5" y="307.0" width="0.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="218.5" y="318.0"></text>
        </g>
        <g>
            <title>in_ByteSize(int) (1 samples, 0.02%)</title>
            <rect x="215.7" y="307.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="218.7" y="318.0"></text>
        </g>
        <g>
            <title>os::is_interrupted(Thread*, bool) (2 samples, 0.05%)</title>
            <rect x="216.0" y="307.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="219.0" y="318.0"></text>
        </g>
        <g>
            <title>pthread_cond_wait (3 samples, 0.07%)</title>
            <rect x="216.6" y="307.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="219.6" y="318.0"></text>
        </g>
        <g>
            <title>pthread_mutex_trylock (3 samples, 0.07%)</title>
            <rect x="217.4" y="307.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="220.4" y="318.0"></text>
        </g>
        <g>
            <title>pthread_mutex_unlock (3 samples, 0.07%)</title>
            <rect x="218.3" y="307.0" width="0.8" height="15" fill="#e35c5c" rx="2" ry="2"/>
            <text x="221.3" y="318.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (1 samples, 0.02%)
            </title>
            <rect x="219.1" y="323.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="222.1" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.31%)</title>
            <rect x="219.4" y="371.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="222.4" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (13 samples, 0.31%)
            </title>
            <rect x="219.4" y="355.0" width="3.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="222.4" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.19%)
            </title>
            <rect x="220.3" y="339.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="223.3" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.05%)
            </title>
            <rect x="221.1" y="323.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="224.1" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.05%)</title>
            <rect x="221.1" y="307.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="224.1" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.setBlocker (1 samples, 0.02%)</title>
            <rect x="221.1" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="224.1" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (1 samples, 0.02%)</title>
            <rect x="221.4" y="291.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="224.4" y="302.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1 samples, 0.02%)</title>
            <rect x="221.4" y="275.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
            <text x="224.4" y="286.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (1 samples, 0.02%)</title>
            <rect x="221.4" y="259.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="224.4" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (1 samples, 0.02%)</title>
            <rect x="221.4" y="243.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="224.4" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (3 samples, 0.07%)</title>
            <rect x="221.7" y="323.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="224.7" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1 samples, 0.02%)
            </title>
            <rect x="222.3" y="307.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="225.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.05%)</title>
            <rect x="222.5" y="339.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="225.5" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.05%)</title>
            <rect x="222.5" y="323.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="225.5" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (1 samples, 0.02%)</title>
            <rect x="222.8" y="307.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="225.8" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleGuards.guard_LII_Z (1 samples, 0.02%)</title>
            <rect x="222.8" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="225.8" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (1 samples, 0.02%)</title>
            <rect x="222.8" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="225.8" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (40 samples, 0.96%)</title>
            <rect x="223.1" y="371.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="226.1" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (40 samples, 0.96%)</title>
            <rect x="223.1" y="355.0" width="11.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="226.1" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (40 samples, 0.96%)</title>
            <rect x="223.1" y="339.0" width="11.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="226.1" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (40 samples, 0.96%)</title>
            <rect x="223.1" y="323.0" width="11.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="226.1" y="334.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (40 samples, 0.96%)</title>
            <rect x="223.1" y="307.0" width="11.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="226.1" y="318.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (39 samples, 0.94%)</title>
            <rect x="223.4" y="291.0" width="11.0" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="226.4" y="302.0"></text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (1 samples, 0.02%)</title>
            <rect x="223.7" y="275.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="226.7" y="286.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (1 samples, 0.02%)</title>
            <rect x="224.0" y="275.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="227.0" y="286.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (36 samples, 0.86%)</title>
            <rect x="224.2" y="275.0" width="10.2" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="227.2" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/atomic/AtomicInteger.get (1 samples, 0.02%)</title>
            <rect x="234.4" y="387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="237.4" y="398.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$4 (5 samples, 0.12%)</title>
            <rect x="234.7" y="387.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="237.7" y="398.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$74/1821403972.run (1,157 samples, 27.79%)</title>
            <rect x="236.1" y="403.0" width="327.9" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="239.1" y="414.0">ru/mail/polis/service/rubtsov/MyService$$Lam..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$4 (1,156 samples, 27.76%)</title>
            <rect x="236.4" y="387.0" width="327.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="239.4" y="398.0">ru/mail/polis/service/rubtsov/MyService.lamb..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.sendResponse (494 samples, 11.86%)</title>
            <rect x="236.7" y="371.0" width="140.0" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="239.7" y="382.0">one/nio/http/Http..</text>
        </g>
        <g>
            <title>java/lang/String.equalsIgnoreCase (2 samples, 0.05%)</title>
            <rect x="238.7" y="355.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="241.7" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (2 samples, 0.05%)</title>
            <rect x="238.7" y="339.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="241.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.05%)</title>
            <rect x="238.7" y="323.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="241.7" y="334.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (2 samples, 0.05%)</title>
            <rect x="238.7" y="307.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="241.7" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.writeResponse (469 samples, 11.26%)</title>
            <rect x="239.3" y="355.0" width="132.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="242.3" y="366.0">one/nio/http/Htt..</text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (30 samples, 0.72%)</title>
            <rect x="239.8" y="339.0" width="8.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="242.8" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (15 samples, 0.36%)</title>
            <rect x="244.1" y="323.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="247.1" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (15 samples, 0.36%)</title>
            <rect x="244.1" y="307.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="247.1" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (15 samples, 0.36%)</title>
            <rect x="244.1" y="291.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="247.1" y="302.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (6 samples, 0.14%)</title>
            <rect x="246.6" y="275.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="249.6" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (437 samples, 10.49%)</title>
            <rect x="248.3" y="339.0" width="123.9" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="251.3" y="350.0">one/nio/net/Ses..</text>
        </g>
        <g>
            <title>one/nio/net/Session.write (437 samples, 10.49%)</title>
            <rect x="248.3" y="323.0" width="123.9" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="251.3" y="334.0">one/nio/net/Ses..</text>
        </g>
        <g>
            <title>one/nio/net/Session$ArrayQueueItem.write (435 samples, 10.45%)</title>
            <rect x="248.6" y="307.0" width="123.3" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="251.6" y="318.0">one/nio/net/Ses..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.write (435 samples, 10.45%)</title>
            <rect x="248.6" y="291.0" width="123.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="251.6" y="302.0">one/nio/net/Jav..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (19 samples, 0.46%)</title>
            <rect x="248.9" y="275.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="251.9" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (19 samples, 0.46%)</title>
            <rect x="248.9" y="259.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="251.9" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (19 samples, 0.46%)</title>
            <rect x="248.9" y="243.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="251.9" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (19 samples, 0.46%)</title>
            <rect x="248.9" y="227.0" width="5.4" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="251.9" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (18 samples, 0.43%)</title>
            <rect x="248.9" y="211.0" width="5.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="251.9" y="222.0"></text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (1 samples, 0.02%)</title>
            <rect x="250.9" y="195.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
            <text x="253.9" y="206.0"></text>
        </g>
        <g>
            <title>gettimeofday (3 samples, 0.07%)</title>
            <rect x="251.2" y="195.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="254.2" y="206.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (7 samples, 0.17%)</title>
            <rect x="252.0" y="195.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="255.0" y="206.0"></text>
        </g>
        <g>
            <title>__chk_fail_overlap.cold.1 (2 samples, 0.05%)</title>
            <rect x="252.0" y="179.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="255.0" y="190.0"></text>
        </g>
        <g>
            <title>gettimeofday (4 samples, 0.10%)</title>
            <rect x="252.6" y="179.0" width="1.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="255.6" y="190.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.05%)</title>
            <rect x="252.9" y="163.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="255.9" y="174.0"></text>
        </g>
        <g>
            <title>_res (1 samples, 0.02%)</title>
            <rect x="253.1" y="147.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
            <text x="256.1" y="158.0"></text>
        </g>
        <g>
            <title>svcudp_op (1 samples, 0.02%)</title>
            <rect x="253.4" y="163.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
            <text x="256.4" y="174.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title>
            <rect x="253.7" y="179.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="256.7" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title>
            <rect x="254.0" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="257.0" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (1 samples, 0.02%)</title>
            <rect x="254.0" y="195.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="257.0" y="206.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (2 samples, 0.05%)</title>
            <rect x="254.3" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="257.3" y="286.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (413 samples, 9.92%)</title>
            <rect x="254.8" y="275.0" width="117.1" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="257.8" y="286.0">sun/nio/ch/Soc..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.05%)</title>
            <rect x="256.5" y="259.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="259.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.05%)</title>
            <rect x="256.5" y="243.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="259.5" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.05%)</title>
            <rect x="256.5" y="227.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="259.5" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (403 samples, 9.68%)</title>
            <rect x="257.1" y="259.0" width="114.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="260.1" y="270.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (402 samples, 9.65%)</title>
            <rect x="257.4" y="243.0" width="113.9" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="260.4" y="254.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (399 samples, 9.58%)</title>
            <rect x="257.4" y="227.0" width="113.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="260.4" y="238.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (399 samples, 9.58%)</title>
            <rect x="257.4" y="211.0" width="113.1" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="260.4" y="222.0">sun/nio/ch/Soc..</text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title>
            <rect x="260.2" y="195.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="263.2" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (387 samples, 9.29%)</title>
            <rect x="260.8" y="195.0" width="109.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="263.8" y="206.0">sun/nio/ch/Fi..</text>
        </g>
        <g>
            <title>JNI_OnLoad (1 samples, 0.02%)</title>
            <rect x="264.2" y="179.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
            <text x="267.2" y="190.0"></text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_write0 (10 samples, 0.24%)</title>
            <rect x="264.5" y="179.0" width="2.8" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="267.5" y="190.0"></text>
        </g>
        <g>
            <title>fdval (3 samples, 0.07%)</title>
            <rect x="266.5" y="163.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="269.5" y="174.0"></text>
        </g>
        <g>
            <title>write (364 samples, 8.74%)</title>
            <rect x="267.3" y="179.0" width="103.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="270.3" y="190.0">write</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.07%)</title>
            <rect x="370.5" y="227.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="373.5" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (3 samples, 0.07%)</title>
            <rect x="370.5" y="211.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="373.5" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.07%)</title>
            <rect x="370.5" y="195.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="373.5" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.02%)</title>
            <rect x="371.0" y="179.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="374.0" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (1 samples, 0.02%)</title>
            <rect x="371.3" y="259.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="374.3" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title>
            <rect x="371.3" y="243.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="374.3" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.isInterrupted (1 samples, 0.02%)</title>
            <rect x="371.3" y="227.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="374.3" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endWrite (1 samples, 0.02%)</title>
            <rect x="371.6" y="259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="374.6" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title>
            <rect x="371.6" y="243.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="374.6" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.02%)</title>
            <rect x="371.9" y="307.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="374.9" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (16 samples, 0.38%)</title>
            <rect x="372.2" y="355.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="375.2" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (5 samples, 0.12%)</title>
            <rect x="375.3" y="339.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="378.3" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.12%)</title>
            <rect x="375.3" y="323.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="378.3" y="334.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/993411733.act (532 samples, 12.78%)</title>
            <rect x="376.7" y="371.0" width="150.8" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="379.7" y="382.0">ru/mail/polis/servi..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$entity$0 (532 samples, 12.78%)</title>
            <rect x="376.7" y="355.0" width="150.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="379.7" y="366.0">ru/mail/polis/servi..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.proxy (532 samples, 12.78%)</title>
            <rect x="376.7" y="339.0" width="150.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="379.7" y="350.0">ru/mail/polis/servi..</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (532 samples, 12.78%)</title>
            <rect x="376.7" y="323.0" width="150.8" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="379.7" y="334.0">one/nio/http/HttpCl..</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (532 samples, 12.78%)</title>
            <rect x="376.7" y="307.0" width="150.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="379.7" y="318.0">one/nio/http/HttpCl..</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (287 samples, 6.89%)</title>
            <rect x="376.7" y="291.0" width="81.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="379.7" y="302.0">one/nio/h..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (282 samples, 6.77%)</title>
            <rect x="378.1" y="275.0" width="79.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="381.1" y="286.0">one/nio/n..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title>
            <rect x="378.1" y="259.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="381.1" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title>
            <rect x="378.1" y="243.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="381.1" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title>
            <rect x="378.1" y="227.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="381.1" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (280 samples, 6.72%)</title>
            <rect x="378.7" y="259.0" width="79.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="381.7" y="270.0">sun/nio/c..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title>
            <rect x="378.7" y="243.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="381.7" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title>
            <rect x="378.7" y="227.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="381.7" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title>
            <rect x="378.7" y="211.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="381.7" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title>
            <rect x="378.7" y="195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="381.7" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (271 samples, 6.51%)</title>
            <rect x="379.0" y="243.0" width="76.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="382.0" y="254.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (271 samples, 6.51%)</title>
            <rect x="379.0" y="227.0" width="76.8" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="382.0" y="238.0">sun/nio/..</text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.put (1 samples, 0.02%)</title>
            <rect x="379.0" y="211.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="382.0" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/DirectByteBuffer.get (1 samples, 0.02%)</title>
            <rect x="379.0" y="195.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="382.0" y="206.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.02%)</title>
            <rect x="379.0" y="179.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="382.0" y="190.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemoryChecks (1 samples, 0.02%)</title>
            <rect x="379.0" y="163.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="382.0" y="174.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.checkPrimitivePointer (1 samples, 0.02%)</title>
            <rect x="379.0" y="147.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="382.0" y="158.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.checkPrimitiveArray (1 samples, 0.02%)</title>
            <rect x="379.0" y="131.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="382.0" y="142.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (270 samples, 6.48%)</title>
            <rect x="379.2" y="211.0" width="76.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="382.2" y="222.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (265 samples, 6.36%)</title>
            <rect x="380.7" y="195.0" width="75.1" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="383.7" y="206.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (265 samples, 6.36%)</title>
            <rect x="380.7" y="179.0" width="75.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="383.7" y="190.0">sun/nio/..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (2 samples, 0.05%)</title>
            <rect x="384.9" y="163.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="387.9" y="174.0"></text>
        </g>
        <g>
            <title>read (248 samples, 5.96%)</title>
            <rect x="385.5" y="163.0" width="70.3" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="388.5" y="174.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginRead (6 samples, 0.14%)</title>
            <rect x="455.8" y="243.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="458.8" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.02%)</title>
            <rect x="456.9" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="459.9" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title>
            <rect x="456.9" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="459.9" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title>
            <rect x="456.9" y="195.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="459.9" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title>
            <rect x="456.9" y="179.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="459.9" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (1 samples, 0.02%)</title>
            <rect x="457.2" y="227.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="460.2" y="238.0"></text>
        </g>
        <g>
            <title>Java_sun_nio_ch_NativeThread_current (1 samples, 0.02%)</title>
            <rect x="457.2" y="211.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
            <text x="460.2" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endRead (2 samples, 0.05%)</title>
            <rect x="457.5" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="460.5" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (1 samples, 0.02%)</title>
            <rect x="457.7" y="227.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="460.7" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readResponse (25 samples, 0.60%)</title>
            <rect x="458.0" y="291.0" width="7.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="461.0" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (3 samples, 0.07%)</title>
            <rect x="458.0" y="275.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="461.0" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (3 samples, 0.07%)</title>
            <rect x="458.0" y="259.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="461.0" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/Character.digit (3 samples, 0.07%)</title>
            <rect x="458.0" y="243.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="461.0" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/Character.digit (3 samples, 0.07%)</title>
            <rect x="458.0" y="227.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="461.0" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/CharacterData.of (1 samples, 0.02%)</title>
            <rect x="458.0" y="211.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="461.0" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/CharacterDataLatin1.digit (1 samples, 0.02%)</title>
            <rect x="458.3" y="211.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="461.3" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/Object.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="458.6" y="211.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="461.6" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readLine (15 samples, 0.36%)</title>
            <rect x="458.9" y="275.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="461.9" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (8 samples, 0.19%)</title>
            <rect x="460.9" y="259.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="463.9" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (7 samples, 0.17%)</title>
            <rect x="461.1" y="243.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="464.1" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (7 samples, 0.17%)</title>
            <rect x="463.1" y="275.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="466.1" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (6 samples, 0.14%)</title>
            <rect x="463.1" y="259.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="466.1" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.14%)</title>
            <rect x="463.1" y="243.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="466.1" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/CharacterDataLatin1.digit (2 samples, 0.05%)</title>
            <rect x="464.3" y="227.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="467.3" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (1 samples, 0.02%)</title>
            <rect x="464.8" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="467.8" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (1 samples, 0.02%)</title>
            <rect x="464.8" y="243.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="467.8" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/String.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="464.8" y="227.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="467.8" y="238.0"></text>
        </g>
        <g>
            <title>jlong_disjoint_arraycopy (1 samples, 0.02%)</title>
            <rect x="464.8" y="211.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="467.8" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.toBytes (7 samples, 0.17%)</title>
            <rect x="465.1" y="291.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="468.1" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.sendResponse (2 samples, 0.05%)</title>
            <rect x="465.7" y="275.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="468.7" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.07%)</title>
            <rect x="466.2" y="275.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="469.2" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.write (3 samples, 0.07%)</title>
            <rect x="466.2" y="259.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="469.2" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.write (3 samples, 0.07%)</title>
            <rect x="466.2" y="243.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="469.2" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (2 samples, 0.05%)</title>
            <rect x="466.2" y="227.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="469.2" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/String.length (1 samples, 0.02%)</title>
            <rect x="466.8" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="469.8" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (8 samples, 0.19%)</title>
            <rect x="467.1" y="291.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="470.1" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (8 samples, 0.19%)</title>
            <rect x="467.1" y="275.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="470.1" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.19%)</title>
            <rect x="467.1" y="259.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="470.1" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/Character.toLowerCase (2 samples, 0.05%)</title>
            <rect x="468.2" y="243.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="471.2" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/Character.toLowerCase (2 samples, 0.05%)</title>
            <rect x="468.2" y="227.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="471.2" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.02%)</title>
            <rect x="468.5" y="211.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="471.5" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.02%)</title>
            <rect x="468.5" y="195.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="471.5" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title>
            <rect x="468.8" y="243.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="471.8" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/Character.toUpperCase (2 samples, 0.05%)</title>
            <rect x="468.8" y="227.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="471.8" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/CharacterDataLatin1.toUpperCase (2 samples, 0.05%)</title>
            <rect x="468.8" y="211.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="471.8" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.writeFully (201 samples, 4.83%)</title>
            <rect x="469.4" y="291.0" width="56.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="472.4" y="302.0">one/ni..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels$1.write (137 samples, 3.29%)</title>
            <rect x="469.4" y="275.0" width="38.8" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="472.4" y="286.0">jav..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (7 samples, 0.17%)</title>
            <rect x="469.4" y="259.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="472.4" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (7 samples, 0.17%)</title>
            <rect x="469.4" y="243.0" width="1.9" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="472.4" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.17%)</title>
            <rect x="469.4" y="227.0" width="1.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="472.4" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.14%)</title>
            <rect x="469.6" y="211.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="472.6" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (6 samples, 0.14%)</title>
            <rect x="469.6" y="195.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="472.6" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (2 samples, 0.05%)</title>
            <rect x="469.6" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="472.6" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title>
            <rect x="470.2" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="473.2" y="190.0"></text>
        </g>
        <g>
            <title>vtable stub (3 samples, 0.07%)</title>
            <rect x="470.5" y="179.0" width="0.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="473.5" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFully (130 samples, 3.12%)</title>
            <rect x="471.3" y="259.0" width="36.9" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="474.3" y="270.0">jav..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFullyImpl (127 samples, 3.05%)</title>
            <rect x="472.2" y="243.0" width="36.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="475.2" y="254.0">jav..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (125 samples, 3.00%)</title>
            <rect x="472.8" y="227.0" width="35.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="475.8" y="238.0">sun..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (119 samples, 2.86%)</title>
            <rect x="472.8" y="211.0" width="33.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="475.8" y="222.0">su..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (117 samples, 2.81%)</title>
            <rect x="473.3" y="195.0" width="33.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="476.3" y="206.0">su..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (117 samples, 2.81%)</title>
            <rect x="473.3" y="179.0" width="33.2" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="476.3" y="190.0">su..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (117 samples, 2.81%)</title>
            <rect x="473.3" y="163.0" width="33.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="476.3" y="174.0">su..</text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title>
            <rect x="475.0" y="147.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="478.0" y="158.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (109 samples, 2.62%)</title>
            <rect x="475.6" y="147.0" width="30.9" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="478.6" y="158.0">su..</text>
        </g>
        <g>
            <title>write (107 samples, 2.57%)</title>
            <rect x="476.2" y="131.0" width="30.3" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="479.2" y="142.0">wr..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.07%)</title>
            <rect x="506.5" y="211.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="509.5" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (2 samples, 0.05%)</title>
            <rect x="506.8" y="195.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="509.8" y="206.0"></text>
        </g>
        <g>
            <title>pthread_self (2 samples, 0.05%)</title>
            <rect x="506.8" y="179.0" width="0.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
            <text x="509.8" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endWrite (3 samples, 0.07%)</title>
            <rect x="507.3" y="211.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="510.3" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.07%)</title>
            <rect x="507.3" y="195.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="510.3" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketAdaptor.getOutputStream (64 samples, 1.54%)</title>
            <rect x="508.2" y="275.0" width="18.1" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="511.2" y="286.0"></text>
        </g>
        <g>
            <title>java/security/AccessController.doPrivileged (61 samples, 1.46%)</title>
            <rect x="509.0" y="259.0" width="17.3" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="512.0" y="270.0"></text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (1 samples, 0.02%)
            </title>
            <rect x="509.0" y="243.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="512.0" y="254.0"></text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (2 samples, 0.05%)</title>
            <rect x="509.3" y="243.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="512.3" y="254.0"></text>
        </g>
        <g>
            <title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (2 samples, 0.05%)</title>
            <rect x="509.9" y="243.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="512.9" y="254.0"></text>
        </g>
        <g>
            <title>JVM_DoPrivileged (43 samples, 1.03%)</title>
            <rect x="510.5" y="243.0" width="12.1" height="15" fill="#e86363" rx="2" ry="2"/>
            <text x="513.5" y="254.0"></text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (3 samples, 0.07%)
            </title>
            <rect x="512.4" y="227.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="515.4" y="238.0"></text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (1 samples, 0.02%)</title>
            <rect x="513.3" y="227.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="516.3" y="238.0"></text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (1 samples, 0.02%)</title>
            <rect x="513.6" y="227.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="516.6" y="238.0"></text>
        </g>
        <g>
            <title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode,
                Klass::PrivateLookupMode) const (3 samples, 0.07%)
            </title>
            <rect x="513.9" y="227.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="516.9" y="238.0"></text>
        </g>
        <g>
            <title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*,
                Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (3 samples, 0.07%)
            </title>
            <rect x="513.9" y="211.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="516.9" y="222.0"></text>
        </g>
        <g>
            <title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (3 samples, 0.07%)</title>
            <rect x="513.9" y="195.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="516.9" y="206.0"></text>
        </g>
        <g>
            <title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (5 samples,
                0.12%)
            </title>
            <rect x="514.7" y="227.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="517.7" y="238.0"></text>
        </g>
        <g>
            <title>AbstractInterpreter::size_top_interpreter_activation(Method*) (1 samples, 0.02%)</title>
            <rect x="515.0" y="211.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="518.0" y="222.0"></text>
        </g>
        <g>
            <title>CompilationPolicy::must_be_compiled(methodHandle const&amp;, int) (1 samples, 0.02%)</title>
            <rect x="515.3" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="518.3" y="222.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_block(Thread*) (1 samples, 0.02%)</title>
            <rect x="515.6" y="211.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="518.6" y="222.0"></text>
        </g>
        <g>
            <title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (1 samples,
                0.02%)
            </title>
            <rect x="515.8" y="211.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="518.8" y="222.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (6 samples, 0.14%)</title>
            <rect x="516.1" y="227.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="519.1" y="238.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (6 samples, 0.14%)</title>
            <rect x="516.1" y="211.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="519.1" y="222.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob_unsafe(void*) (3 samples, 0.07%)</title>
            <rect x="516.4" y="195.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="519.4" y="206.0"></text>
        </g>
        <g>
            <title>CodeCache::get_code_heap_containing(void*) (3 samples, 0.07%)</title>
            <rect x="516.4" y="179.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="519.4" y="190.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title>
            <rect x="517.3" y="195.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="520.3" y="206.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title>
            <rect x="517.3" y="179.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="520.3" y="190.0"></text>
        </g>
        <g>
            <title>nmethod::is_zombie() const (1 samples, 0.02%)</title>
            <rect x="517.5" y="195.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="520.5" y="206.0"></text>
        </g>
        <g>
            <title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.02%)</title>
            <rect x="517.8" y="227.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="520.8" y="238.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.07%)
            </title>
            <rect x="518.1" y="227.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="521.1" y="238.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (1 samples, 0.02%)</title>
            <rect x="518.1" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="521.1" y="222.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (2 samples, 0.05%)</title>
            <rect x="518.4" y="211.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="521.4" y="222.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (1 samples, 0.02%)</title>
            <rect x="518.4" y="195.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="521.4" y="206.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="518.4" y="179.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="521.4" y="190.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1
                samples, 0.02%)
            </title>
            <rect x="518.4" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="521.4" y="174.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="518.4" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="521.4" y="158.0"></text>
        </g>
        <g>
            <title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (1 samples, 0.02%)</title>
            <rect x="518.4" y="131.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="521.4" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title>
            <rect x="518.7" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="521.7" y="206.0"></text>
        </g>
        <g>
            <title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (1 samples,
                0.02%)
            </title>
            <rect x="519.0" y="227.0" width="0.2" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="522.0" y="238.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (1 samples, 0.02%)</title>
            <rect x="519.2" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="522.2" y="238.0"></text>
        </g>
        <g>
            <title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title>
            <rect x="519.2" y="211.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="522.2" y="222.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (11 samples, 0.26%)</title>
            <rect x="519.5" y="227.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="522.5" y="238.0"></text>
        </g>
        <g>
            <title>Method::is_ignored_by_security_stack_walk() const (8 samples, 0.19%)</title>
            <rect x="519.5" y="211.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="522.5" y="222.0"></text>
        </g>
        <g>
            <title>Klass::is_subclass_of(Klass const*) const (5 samples, 0.12%)</title>
            <rect x="520.4" y="195.0" width="1.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="523.4" y="206.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_next() (3 samples, 0.07%)</title>
            <rect x="521.8" y="211.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="524.8" y="222.0"></text>
        </g>
        <g>
            <title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (1 samples,
                0.02%)
            </title>
            <rect x="521.8" y="195.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="524.8" y="206.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (2 samples, 0.05%)</title>
            <rect x="522.1" y="195.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="525.1" y="206.0"></text>
        </g>
        <g>
            <title>CompiledMethod::is_compiled() const (1 samples, 0.02%)</title>
            <rect x="522.1" y="179.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="525.1" y="190.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.02%)</title>
            <rect x="522.4" y="179.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="525.4" y="190.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (1 samples, 0.02%)</title>
            <rect x="522.4" y="163.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="525.4" y="174.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.02%)</title>
            <rect x="522.4" y="147.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="525.4" y="158.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (1 samples, 0.02%)</title>
            <rect x="522.4" y="131.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="525.4" y="142.0"></text>
        </g>
        <g>
            <title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (1 samples,
                0.02%)
            </title>
            <rect x="522.6" y="243.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="525.6" y="254.0"></text>
        </g>
        <g>
            <title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="522.9" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="525.9" y="254.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (1 samples, 0.02%)</title>
            <rect x="523.2" y="243.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="526.2" y="254.0"></text>
        </g>
        <g>
            <title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (2
                samples, 0.05%)
            </title>
            <rect x="523.5" y="243.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="526.5" y="254.0"></text>
        </g>
        <g>
            <title>Method::is_method() const volatile (1 samples, 0.02%)</title>
            <rect x="524.1" y="243.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="527.1" y="254.0"></text>
        </g>
        <g>
            <title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (2 samples,
                0.05%)
            </title>
            <rect x="524.3" y="243.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="527.3" y="254.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title>
            <rect x="524.9" y="243.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="527.9" y="254.0"></text>
        </g>
        <g>
            <title>call_stub (2 samples, 0.05%)</title>
            <rect x="525.2" y="243.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="528.2" y="254.0"></text>
        </g>
        <g>
            <title>jsqrt (1 samples, 0.02%)</title>
            <rect x="525.8" y="243.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
            <text x="528.8" y="254.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (1 samples, 0.02%)</title>
            <rect x="526.0" y="243.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="529.0" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.borrowObject (3 samples, 0.07%)</title>
            <rect x="526.3" y="291.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="529.3" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.charAt (2 samples, 0.05%)</title>
            <rect x="526.6" y="275.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="529.6" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.returnObject (1 samples, 0.02%)</title>
            <rect x="527.2" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="530.2" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$73/1808619470.act (129 samples, 3.10%)</title>
            <rect x="527.5" y="371.0" width="36.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="530.5" y="382.0">ru/..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$entity$2 (129 samples, 3.10%)</title>
            <rect x="527.5" y="355.0" width="36.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="530.5" y="366.0">ru/..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.upsert (129 samples, 3.10%)</title>
            <rect x="527.5" y="339.0" width="36.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="530.5" y="350.0">ru/..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (4 samples, 0.10%)</title>
            <rect x="527.5" y="323.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="530.5" y="334.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (4 samples, 0.10%)</title>
            <rect x="527.5" y="307.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="530.5" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title>
            <rect x="527.5" y="291.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="530.5" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title>
            <rect x="527.5" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="530.5" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.10%)</title>
            <rect x="527.5" y="259.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="530.5" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (3 samples, 0.07%)</title>
            <rect x="527.5" y="243.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="530.5" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (3 samples, 0.07%)</title>
            <rect x="527.5" y="227.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="530.5" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title>
            <rect x="528.3" y="243.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="531.3" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (1 samples, 0.02%)</title>
            <rect x="528.3" y="227.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="531.3" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.limit (1 samples, 0.02%)</title>
            <rect x="528.3" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="531.3" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.&lt;init&gt; (6 samples, 0.14%)</title>
            <rect x="528.6" y="323.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="531.6" y="334.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (4 samples, 0.10%)</title>
            <rect x="529.2" y="307.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="532.2" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTablePool.upsert (2 samples, 0.05%)</title>
            <rect x="530.3" y="323.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="533.3" y="334.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.upsert (117 samples, 2.81%)</title>
            <rect x="530.9" y="323.0" width="33.1" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="533.9" y="334.0">ru..</text>
        </g>
        <g>
            <title>java/nio/Buffer.position (1 samples, 0.02%)</title>
            <rect x="531.4" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="534.4" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTablePool.upsert (114 samples, 2.74%)</title>
            <rect x="531.7" y="307.0" width="32.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="534.7" y="318.0">ru..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (1 samples, 0.02%)</title>
            <rect x="531.7" y="291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="534.7" y="302.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.02%)</title>
            <rect x="531.7" y="275.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="534.7" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (1 samples, 0.02%)</title>
            <rect x="531.7" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="534.7" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTable.upsert (113 samples, 2.71%)</title>
            <rect x="532.0" y="291.0" width="32.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="535.0" y="302.0">ru..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.put (113 samples, 2.71%)</title>
            <rect x="532.0" y="275.0" width="32.0" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="535.0" y="286.0">ja..</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (1 samples, 0.02%)</title>
            <rect x="534.5" y="259.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="537.5" y="270.0"></text>
        </g>
        <g>
            <title>gettimeofday (2 samples, 0.05%)</title>
            <rect x="534.8" y="259.0" width="0.6" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="537.8" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.doPut (97 samples, 2.33%)</title>
            <rect x="535.4" y="259.0" width="27.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="538.4" y="270.0">j..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (2 samples, 0.05%)</title>
            <rect x="537.9" y="243.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="540.9" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.cpr (86 samples, 2.07%)</title>
            <rect x="538.5" y="243.0" width="24.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="541.5" y="254.0">j..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (86 samples, 2.07%)</title>
            <rect x="538.5" y="227.0" width="24.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="541.5" y="238.0">j..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (18 samples, 0.43%)</title>
            <rect x="557.8" y="211.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="560.8" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (18 samples, 0.43%)</title>
            <rect x="557.8" y="195.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="560.8" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (7 samples, 0.17%)</title>
            <rect x="560.9" y="179.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="563.9" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (7 samples, 0.17%)</title>
            <rect x="560.9" y="163.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="563.9" y="174.0"></text>
        </g>
        <g>
            <title>vectorizedMismatch (1 samples, 0.02%)</title>
            <rect x="562.6" y="147.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="565.6" y="158.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (4 samples, 0.10%)</title>
            <rect x="562.9" y="259.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="565.9" y="270.0"></text>
        </g>
        <g>
            <title>__chk_fail_overlap.cold.1 (1 samples, 0.02%)</title>
            <rect x="563.4" y="243.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="566.4" y="254.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (1 samples, 0.02%)</title>
            <rect x="563.7" y="243.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="566.7" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/server/AcceptorThread.run (3 samples, 0.07%)</title>
            <rect x="564.0" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="567.0" y="462.0"></text>
        </g>
        <g>
            <title>one/nio/net/Socket.acceptNonBlocking (3 samples, 0.07%)</title>
            <rect x="564.0" y="435.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="567.0" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaServerSocket.accept (3 samples, 0.07%)</title>
            <rect x="564.0" y="419.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="567.0" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaServerSocket.accept (3 samples, 0.07%)</title>
            <rect x="564.0" y="403.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="567.0" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept (3 samples, 0.07%)</title>
            <rect x="564.0" y="387.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="567.0" y="398.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept (3 samples, 0.07%)</title>
            <rect x="564.0" y="371.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="567.0" y="382.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept0 (3 samples, 0.07%)</title>
            <rect x="564.0" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="567.0" y="366.0"></text>
        </g>
        <g>
            <title>accept (3 samples, 0.07%)</title>
            <rect x="564.0" y="339.0" width="0.9" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="567.0" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/server/SelectorThread.run (2,164 samples, 51.97%)</title>
            <rect x="564.9" y="451.0" width="613.2" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="567.9" y="462.0">one/nio/server/SelectorThread.run</text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (1 samples, 0.02%)
            </title>
            <rect x="567.4" y="435.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="570.4" y="446.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (1 samples, 0.02%)</title>
            <rect x="567.4" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="570.4" y="430.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (1 samples, 0.02%)</title>
            <rect x="567.4" y="403.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="570.4" y="414.0"></text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (2 samples, 0.05%)</title>
            <rect x="567.7" y="435.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="570.7" y="446.0"></text>
        </g>
        <g>
            <title>gettimeofday (2 samples, 0.05%)</title>
            <rect x="568.3" y="435.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
            <text x="571.3" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.02%)</title>
            <rect x="568.8" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="571.8" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector$1.hasNext (6 samples, 0.14%)</title>
            <rect x="569.1" y="435.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="572.1" y="446.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (5 samples, 0.12%)
            </title>
            <rect x="569.4" y="419.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="572.4" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (5 samples, 0.12%)</title>
            <rect x="569.4" y="403.0" width="1.4" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="572.4" y="414.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (5 samples, 0.12%)</title>
            <rect x="569.4" y="387.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="572.4" y="398.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector$1.next (5 samples, 0.12%)</title>
            <rect x="570.8" y="435.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="573.8" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector$1.next (5 samples, 0.12%)</title>
            <rect x="570.8" y="419.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="573.8" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.isOpen (1 samples, 0.02%)</title>
            <rect x="572.2" y="435.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="575.2" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.select (1,292 samples, 31.03%)</title>
            <rect x="572.5" y="435.0" width="366.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="575.5" y="446.0">one/nio/net/JavaSelector.select</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (3 samples, 0.07%)</title>
            <rect x="573.6" y="419.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
            <text x="576.6" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.iteratorFor (12 samples, 0.29%)</title>
            <rect x="574.5" y="419.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="577.5" y="430.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$2.iterator (1 samples, 0.02%)</title>
            <rect x="577.6" y="403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="580.6" y="414.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.iterator (1 samples, 0.02%)</title>
            <rect x="577.6" y="387.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="580.6" y="398.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeySet.iterator (1 samples, 0.02%)</title>
            <rect x="577.6" y="371.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="580.6" y="382.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeyIterator.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="577.6" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="580.6" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="577.6" y="339.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="580.6" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.registerPendingSessions (8 samples, 0.19%)</title>
            <rect x="577.9" y="419.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="580.9" y="430.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelectableChannel.register (8 samples, 0.19%)</title>
            <rect x="577.9" y="403.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="580.9" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.register (1 samples, 0.02%)</title>
            <rect x="579.9" y="387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="582.9" y="398.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentHashMap$KeySetView.add (1 samples, 0.02%)</title>
            <rect x="579.9" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="582.9" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentHashMap.putVal (1 samples, 0.02%)</title>
            <rect x="579.9" y="355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="582.9" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/Object.hashCode (1 samples, 0.02%)</title>
            <rect x="579.9" y="339.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="582.9" y="350.0"></text>
        </g>
        <g>
            <title>JVM_IHashCode (1 samples, 0.02%)</title>
            <rect x="579.9" y="323.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
            <text x="582.9" y="334.0"></text>
        </g>
        <g>
            <title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title>
            <rect x="579.9" y="307.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="582.9" y="318.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (6 samples, 0.14%)</title>
            <rect x="580.2" y="419.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="583.2" y="430.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.select (1,255 samples, 30.14%)</title>
            <rect x="581.9" y="419.0" width="355.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="584.9" y="430.0">sun/nio/ch/SelectorImpl.select</text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,255 samples, 30.14%)</title>
            <rect x="581.9" y="403.0" width="355.6" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="584.9" y="414.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.registerPendingSessions (1 samples, 0.02%)</title>
            <rect x="582.7" y="387.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="585.7" y="398.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,251 samples, 30.04%)</title>
            <rect x="583.0" y="387.0" width="354.5" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="586.0" y="398.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueue.poll (1,141 samples, 27.40%)</title>
            <rect x="584.7" y="371.0" width="323.3" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="587.7" y="382.0">sun/nio/ch/KQueue.poll</text>
        </g>
        <g>
            <title>JNI_OnLoad (1 samples, 0.02%)</title>
            <rect x="596.9" y="355.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
            <text x="599.9" y="366.0"></text>
        </g>
        <g>
            <title>Java_sun_nio_ch_KQueue_poll (9 samples, 0.22%)</title>
            <rect x="597.2" y="355.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="600.2" y="366.0"></text>
        </g>
        <g>
            <title>kevent (1,088 samples, 26.13%)</title>
            <rect x="599.7" y="355.0" width="308.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
            <text x="602.7" y="366.0">kevent</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processEvents (68 samples, 1.63%)</title>
            <rect x="908.0" y="371.0" width="19.3" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="911.0" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.valueOf (6 samples, 0.14%)</title>
            <rect x="908.6" y="355.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="911.6" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (6 samples, 0.14%)</title>
            <rect x="910.3" y="355.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="913.3" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (4 samples, 0.10%)</title>
            <rect x="910.6" y="339.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="913.6" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.equals (1 samples, 0.02%)</title>
            <rect x="911.4" y="323.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="914.4" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (1 samples, 0.02%)</title>
            <rect x="911.7" y="339.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="914.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.hashCode (1 samples, 0.02%)</title>
            <rect x="911.7" y="323.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="914.7" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.put (2 samples, 0.05%)</title>
            <rect x="912.0" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="915.0" y="366.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueue.getFilter (5 samples, 0.12%)</title>
            <rect x="912.6" y="355.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="915.6" y="366.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.getShort (5 samples, 0.12%)</title>
            <rect x="912.6" y="339.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="915.6" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processReadyEvents (47 samples, 1.13%)</title>
            <rect x="914.0" y="355.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="917.0" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.add (35 samples, 0.84%)</title>
            <rect x="914.0" y="339.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="917.0" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.put (35 samples, 0.84%)</title>
            <rect x="914.0" y="323.0" width="9.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="917.0" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.putVal (35 samples, 0.84%)</title>
            <rect x="914.0" y="307.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="917.0" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.afterNodeInsertion (4 samples, 0.10%)</title>
            <rect x="915.7" y="291.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="918.7" y="302.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.newNode (16 samples, 0.38%)</title>
            <rect x="916.8" y="291.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="919.8" y="302.0"></text>
        </g>
        <g>
            <title>vtable stub (9 samples, 0.22%)</title>
            <rect x="921.4" y="291.0" width="2.5" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="924.4" y="302.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.contains (5 samples, 0.12%)</title>
            <rect x="923.9" y="339.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="926.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.containsKey (5 samples, 0.12%)</title>
            <rect x="923.9" y="323.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="926.9" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (2 samples, 0.05%)</title>
            <rect x="923.9" y="307.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="926.9" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (3 samples, 0.07%)</title>
            <rect x="924.5" y="307.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="927.5" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (2 samples, 0.05%)</title>
            <rect x="925.3" y="339.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="928.3" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (5 samples, 0.12%)</title>
            <rect x="925.9" y="339.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="928.9" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (3 samples, 0.07%)</title>
            <rect x="926.5" y="323.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="929.5" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.translateReadyOps (3 samples, 0.07%)</title>
            <rect x="926.5" y="307.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="929.5" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (1 samples, 0.02%)</title>
            <rect x="926.5" y="291.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="929.5" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.isConnected (2 samples, 0.05%)</title>
            <rect x="926.7" y="291.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="929.7" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (20 samples, 0.48%)</title>
            <rect x="927.3" y="371.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="930.3" y="382.0"></text>
        </g>
        <g>
            <title>java/util/ArrayDeque.pollFirst (16 samples, 0.38%)</title>
            <rect x="928.4" y="355.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="931.4" y="366.0"></text>
        </g>
        <g>
            <title>java/util/ArrayDeque.elementAt (1 samples, 0.02%)</title>
            <rect x="932.7" y="339.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="935.7" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.begin (3 samples, 0.07%)</title>
            <rect x="933.0" y="371.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="936.0" y="382.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.begin (3 samples, 0.07%)</title>
            <rect x="933.0" y="355.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="936.0" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (1 samples, 0.02%)</title>
            <rect x="933.3" y="339.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="936.3" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (1 samples, 0.02%)</title>
            <rect x="933.3" y="323.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="936.3" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (1 samples, 0.02%)</title>
            <rect x="933.3" y="307.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="936.3" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (1 samples, 0.02%)</title>
            <rect x="933.5" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="936.5" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.end (4 samples, 0.10%)</title>
            <rect x="933.8" y="371.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="936.8" y="382.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.10%)</title>
            <rect x="933.8" y="355.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="936.8" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.10%)</title>
            <rect x="933.8" y="339.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="936.8" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (4 samples, 0.10%)</title>
            <rect x="933.8" y="323.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="936.8" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (4 samples, 0.10%)</title>
            <rect x="933.8" y="307.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="936.8" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.22%)</title>
            <rect x="935.0" y="371.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="938.0" y="382.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.cancelledKeys (2 samples, 0.05%)</title>
            <rect x="936.7" y="355.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="939.7" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeyIterator.next (1 samples, 0.02%)</title>
            <rect x="937.2" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="940.2" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.nextNode (1 samples, 0.02%)</title>
            <rect x="937.2" y="339.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="940.2" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$2.clear (2 samples, 0.05%)</title>
            <rect x="937.5" y="419.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="940.5" y="430.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.clear (2 samples, 0.05%)</title>
            <rect x="937.5" y="403.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="940.5" y="414.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.clear (2 samples, 0.05%)</title>
            <rect x="937.5" y="387.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="940.5" y="398.0"></text>
        </g>
        <g>
            <title>svcudp_op (2 samples, 0.05%)</title>
            <rect x="938.1" y="419.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="941.1" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.process (844 samples, 20.27%)</title>
            <rect x="938.6" y="435.0" width="239.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="941.6" y="446.0">one/nio/net/Session.process</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (1 samples, 0.02%)</title>
            <rect x="939.5" y="419.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
            <text x="942.5" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processRead (827 samples, 19.86%)</title>
            <rect x="939.8" y="419.0" width="234.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="942.8" y="430.0">one/nio/http/HttpSession.proces..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processHttpBuffer (610 samples, 14.65%)</title>
            <rect x="940.1" y="403.0" width="172.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="943.1" y="414.0">one/nio/http/HttpSessi..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.handleParsedRequest (523 samples, 12.56%)</title>
            <rect x="943.2" y="387.0" width="148.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="946.2" y="398.0">one/nio/http/HttpSe..</text>
        </g>
        <g>
            <title>java/util/LinkedList.addLast (4 samples, 0.10%)</title>
            <rect x="944.3" y="371.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="947.3" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (3 samples, 0.07%)</title>
            <rect x="944.3" y="355.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="947.3" y="366.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (1 samples, 0.02%)</title>
            <rect x="945.2" y="355.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="948.2" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpServer.handleRequest (515 samples, 12.37%)</title>
            <rect x="945.4" y="371.0" width="146.0" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="948.4" y="382.0">one/nio/http/HttpS..</text>
        </g>
        <g>
            <title>RequestHandler1_entity.handleRequest (489 samples, 11.74%)</title>
            <rect x="945.4" y="355.0" width="138.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="948.4" y="366.0">RequestHandler1_e..</text>
        </g>
        <g>
            <title>one/nio/http/Request.getParameter (12 samples, 0.29%)</title>
            <rect x="945.7" y="339.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="948.7" y="350.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title>
            <rect x="948.0" y="323.0" width="0.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="951.0" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/URLEncoder.decode (2 samples, 0.05%)</title>
            <rect x="948.6" y="323.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="951.6" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (1 samples, 0.02%)</title>
            <rect x="948.8" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="951.8" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (1 samples, 0.02%)</title>
            <rect x="948.8" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="951.8" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (1 samples, 0.02%)</title>
            <rect x="948.8" y="275.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="951.8" y="286.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.entity (476 samples, 11.43%)</title>
            <rect x="949.1" y="339.0" width="134.9" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="952.1" y="350.0">ru/mail/polis/ser..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (5 samples, 0.12%)</title>
            <rect x="949.7" y="323.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="952.7" y="334.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (5 samples, 0.12%)</title>
            <rect x="949.7" y="307.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="952.7" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.10%)</title>
            <rect x="950.0" y="291.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="953.0" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.primaryFor (5 samples, 0.12%)</title>
            <rect x="951.1" y="323.0" width="1.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="954.1" y="334.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.primaryFor (5 samples, 0.12%)</title>
            <rect x="951.1" y="307.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="954.1" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.hashCode (5 samples, 0.12%)</title>
            <rect x="951.1" y="291.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="954.1" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.executeAsync (464 samples, 11.14%)</title>
            <rect x="952.5" y="323.0" width="131.5" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="955.5" y="334.0">ru/mail/polis/se..</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.execute (464 samples, 11.14%)</title>
            <rect x="952.5" y="307.0" width="131.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="955.5" y="318.0">java/util/concur..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (449 samples, 10.78%)</title>
            <rect x="956.8" y="291.0" width="127.2" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="959.8" y="302.0">java/util/concur..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (423 samples, 10.16%)</title>
            <rect x="957.1" y="275.0" width="119.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="960.1" y="286.0">java/util/concu..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (423 samples, 10.16%)</title>
            <rect x="957.1" y="259.0" width="119.8" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="960.1" y="270.0">java/util/concu..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (423 samples, 10.16%)</title>
            <rect x="957.1" y="243.0" width="119.8" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="960.1" y="254.0">java/util/concu..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (423 samples, 10.16%)</title>
            <rect x="957.1" y="227.0" width="119.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="960.1" y="238.0">java/util/concu..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (412 samples, 9.89%)</title>
            <rect x="960.2" y="211.0" width="116.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="963.2" y="222.0">java/util/conc..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (412 samples, 9.89%)</title>
            <rect x="960.2" y="195.0" width="116.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="963.2" y="206.0">jdk/internal/m..</text>
        </g>
        <g>
            <title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (1 samples, 0.02%)</title>
            <rect x="963.6" y="179.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="966.6" y="190.0"></text>
        </g>
        <g>
            <title>HandleMarkCleaner::~HandleMarkCleaner() (5 samples, 0.12%)</title>
            <rect x="963.9" y="179.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="966.9" y="190.0"></text>
        </g>
        <g>
            <title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title>
            <rect x="965.3" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="968.3" y="190.0"></text>
        </g>
        <g>
            <title>Parker::unpark() (1 samples, 0.02%)</title>
            <rect x="965.6" y="179.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="968.6" y="190.0"></text>
        </g>
        <g>
            <title>Thread::current() (4 samples, 0.10%)</title>
            <rect x="965.8" y="179.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="968.8" y="190.0"></text>
        </g>
        <g>
            <title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.05%)</title>
            <rect x="967.0" y="179.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="970.0" y="190.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) (1 samples, 0.02%)</title>
            <rect x="967.5" y="179.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="970.5" y="190.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.07%)</title>
            <rect x="967.8" y="179.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="970.8" y="190.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (378 samples, 9.08%)</title>
            <rect x="968.7" y="179.0" width="107.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="971.7" y="190.0">Unsafe_Unpark..</text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (4 samples, 0.10%)
            </title>
            <rect x="969.8" y="163.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="972.8" y="174.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (1 samples, 0.02%)</title>
            <rect x="970.9" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="973.9" y="174.0"></text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (8 samples, 0.19%)</title>
            <rect x="971.2" y="163.0" width="2.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="974.2" y="174.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (5 samples, 0.12%)</title>
            <rect x="972.1" y="147.0" width="1.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="975.1" y="158.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title>
            <rect x="973.5" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="976.5" y="174.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_with_handler(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="973.8" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="976.8" y="174.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (1 samples, 0.02%)</title>
            <rect x="974.1" y="163.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="977.1" y="174.0"></text>
        </g>
        <g>
            <title>JavaThread::set_thread_state(JavaThreadState) (1 samples, 0.02%)</title>
            <rect x="974.3" y="163.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="977.3" y="174.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.12%)</title>
            <rect x="974.6" y="163.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="977.6" y="174.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (5 samples, 0.12%)</title>
            <rect x="974.6" y="147.0" width="1.4" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="977.6" y="158.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="974.6" y="131.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="977.6" y="142.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.10%)</title>
            <rect x="974.9" y="131.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="977.9" y="142.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (3 samples, 0.07%)
            </title>
            <rect x="974.9" y="115.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="977.9" y="126.0"></text>
        </g>
        <g>
            <title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (1 samples, 0.02%)</title>
            <rect x="974.9" y="99.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="977.9" y="110.0"></text>
        </g>
        <g>
            <title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples,
                0.05%)
            </title>
            <rect x="975.2" y="99.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="978.2" y="110.0"></text>
        </g>
        <g>
            <title>int Atomic::load&lt;int&gt;(int const volatile*) (2 samples, 0.05%)</title>
            <rect x="975.2" y="83.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="978.2" y="94.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*)
                const (1 samples, 0.02%)
            </title>
            <rect x="975.2" y="67.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="978.2" y="78.0"></text>
        </g>
        <g>
            <title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples,
                0.02%)
            </title>
            <rect x="975.2" y="51.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="978.2" y="62.0"></text>
        </g>
        <g>
            <title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (1 samples,
                0.02%)
            </title>
            <rect x="975.5" y="67.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="978.5" y="78.0"></text>
        </g>
        <g>
            <title>int OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;::operator()&lt;int&gt;(int const
                volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="975.8" y="115.0" width="0.2" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="978.8" y="126.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (1 samples, 0.02%)</title>
            <rect x="976.0" y="163.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="979.0" y="174.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.05%)</title>
            <rect x="976.3" y="163.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="979.3" y="174.0"></text>
        </g>
        <g>
            <title>Thread::current() (13 samples, 0.31%)</title>
            <rect x="976.9" y="163.0" width="3.7" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="979.9" y="174.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (3 samples, 0.07%)</title>
            <rect x="976.9" y="147.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="979.9" y="158.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (10 samples, 0.24%)</title>
            <rect x="977.7" y="147.0" width="2.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
            <text x="980.7" y="158.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (3 samples, 0.07%)</title>
            <rect x="980.6" y="163.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="983.6" y="174.0"></text>
        </g>
        <g>
            <title>Thread::last_handle_mark() const (1 samples, 0.02%)</title>
            <rect x="981.4" y="163.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="984.4" y="174.0"></text>
        </g>
        <g>
            <title>ThreadInVMfromNative::ThreadInVMfromNative(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="981.7" y="163.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="984.7" y="174.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::ThreadStateTransition(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="982.0" y="163.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="985.0" y="174.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (13
                samples, 0.31%)
            </title>
            <rect x="982.3" y="163.0" width="3.7" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="985.3" y="174.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (1 samples, 0.02%)</title>
            <rect x="982.6" y="147.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="985.6" y="158.0"></text>
        </g>
        <g>
            <title>os::is_MP() (1 samples, 0.02%)</title>
            <rect x="982.6" y="131.0" width="0.2" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="985.6" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="982.8" y="147.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="985.8" y="158.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::uses_thread_local_poll() (1 samples, 0.02%)</title>
            <rect x="982.8" y="131.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="985.8" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (7 samples, 0.17%)</title>
            <rect x="983.1" y="147.0" width="2.0" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="986.1" y="158.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.05%)</title>
            <rect x="984.3" y="131.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="987.3" y="142.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="984.3" y="115.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="987.3" y="126.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1
                samples, 0.02%)
            </title>
            <rect x="984.5" y="115.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="987.5" y="126.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="984.5" y="99.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="987.5" y="110.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (1 samples, 0.02%)
            </title>
            <rect x="984.5" y="83.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="987.5" y="94.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples,
                0.02%)
            </title>
            <rect x="984.5" y="67.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="987.5" y="78.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, Atomic::PlatformLoad&lt;8ul&gt;, void&gt;::operator()(void
                volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="984.5" y="51.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="987.5" y="62.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const
                volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="984.5" y="35.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="987.5" y="46.0"></text>
        </g>
        <g>
            <title>mask_bits_are_true(long, long) (1 samples, 0.02%)</title>
            <rect x="984.8" y="131.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
            <text x="987.8" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title>
            <rect x="985.1" y="147.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="988.1" y="158.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (8 samples, 0.19%)
            </title>
            <rect x="986.0" y="163.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="989.0" y="174.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (8 samples, 0.19%)</title>
            <rect x="986.0" y="147.0" width="2.2" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="989.0" y="158.0"></text>
        </g>
        <g>
            <title>JavaThread::is_Java_thread() const (3 samples, 0.07%)</title>
            <rect x="986.0" y="131.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="989.0" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (4 samples, 0.10%)</title>
            <rect x="986.8" y="131.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="989.8" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.07%)</title>
            <rect x="986.8" y="115.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="989.8" y="126.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.07%)
            </title>
            <rect x="986.8" y="99.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="989.8" y="110.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.05%)
            </title>
            <rect x="986.8" y="83.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="989.8" y="94.0"></text>
        </g>
        <g>
            <title>OrderAccess::acquire() (1 samples, 0.02%)</title>
            <rect x="986.8" y="67.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="989.8" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (1 samples, 0.02%)
            </title>
            <rect x="987.1" y="67.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="990.1" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (1 samples,
                0.02%)
            </title>
            <rect x="987.1" y="51.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="990.1" y="62.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::PlatformLoad&lt;8ul&gt;::operator()&lt;void volatile*&gt;(void volatile* const
                volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="987.1" y="35.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="990.1" y="46.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void
                volatile*&gt;(void volatile* const volatile*) const (1 samples, 0.02%)
            </title>
            <rect x="987.4" y="83.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="990.4" y="94.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (1
                samples, 0.02%)
            </title>
            <rect x="987.7" y="115.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="990.7" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (1 samples, 0.02%)</title>
            <rect x="987.9" y="131.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="990.9" y="142.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.10%)</title>
            <rect x="988.2" y="163.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="991.2" y="174.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::acquire_stable_list_fast_path() (4 samples, 0.10%)</title>
            <rect x="988.2" y="147.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="991.2" y="158.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples,
                0.17%)
            </title>
            <rect x="989.4" y="163.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="992.4" y="174.0"></text>
        </g>
        <g>
            <title>G1BarrierSet::enqueue_if_weak(unsigned long long, oopDesc*) (2 samples, 0.05%)</title>
            <rect x="990.2" y="147.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="993.2" y="158.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (2 samples, 0.05%)</title>
            <rect x="990.8" y="147.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="993.8" y="158.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::~ThreadsListHandle() (1 samples, 0.02%)</title>
            <rect x="991.3" y="163.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="994.3" y="174.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (267 samples, 6.41%)</title>
            <rect x="991.6" y="163.0" width="75.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="994.6" y="174.0">__psynch..</text>
        </g>
        <g>
            <title>_pthread_cond_updateval (1 samples, 0.02%)</title>
            <rect x="1067.3" y="163.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="1070.3" y="174.0"></text>
        </g>
        <g>
            <title>in_ByteSize(int) (1 samples, 0.02%)</title>
            <rect x="1067.6" y="163.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
            <text x="1070.6" y="174.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::thread(oopDesc*) (1 samples, 0.02%)</title>
            <rect x="1067.9" y="163.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1070.9" y="174.0"></text>
        </g>
        <g>
            <title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**)
                (1 samples, 0.02%)
            </title>
            <rect x="1068.1" y="163.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1071.1" y="174.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (1 samples, 0.02%)</title>
            <rect x="1068.4" y="163.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1071.4" y="174.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (10 samples, 0.24%)</title>
            <rect x="1068.7" y="163.0" width="2.8" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="1071.7" y="174.0"></text>
        </g>
        <g>
            <title>_pthread_cond_updateval (3 samples, 0.07%)</title>
            <rect x="1070.7" y="147.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="1073.7" y="158.0"></text>
        </g>
        <g>
            <title>pthread_dependency_wait_np.cold.3 (1 samples, 0.02%)</title>
            <rect x="1071.5" y="163.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="1074.5" y="174.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (14 samples, 0.34%)</title>
            <rect x="1071.8" y="163.0" width="4.0" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="1074.8" y="174.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (4 samples, 0.10%)</title>
            <rect x="1075.8" y="179.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
            <text x="1078.8" y="190.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.10%)</title>
            <rect x="1076.9" y="275.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1079.9" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.10%)</title>
            <rect x="1076.9" y="259.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1079.9" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.10%)</title>
            <rect x="1076.9" y="243.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1079.9" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (21 samples, 0.50%)</title>
            <rect x="1078.1" y="275.0" width="5.9" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1081.1" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (21 samples, 0.50%)</title>
            <rect x="1078.1" y="259.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1081.1" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (21 samples, 0.50%)</title>
            <rect x="1078.1" y="243.0" width="5.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1081.1" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/http/PathMapper.find (13 samples, 0.31%)</title>
            <rect x="1084.0" y="355.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1087.0" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (13 samples, 0.31%)</title>
            <rect x="1084.0" y="339.0" width="3.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1087.0" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (6 samples, 0.14%)</title>
            <rect x="1084.0" y="323.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1087.0" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (7 samples, 0.17%)</title>
            <rect x="1085.7" y="323.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1088.7" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/String.hashCode (7 samples, 0.17%)</title>
            <rect x="1085.7" y="307.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1088.7" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.hashCode (7 samples, 0.17%)</title>
            <rect x="1085.7" y="291.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1088.7" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getPath (13 samples, 0.31%)</title>
            <rect x="1087.7" y="355.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1090.7" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (13 samples, 0.31%)</title>
            <rect x="1087.7" y="339.0" width="3.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1090.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (13 samples, 0.31%)</title>
            <rect x="1087.7" y="323.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1090.7" y="334.0"></text>
        </g>
        <g>
            <title>RequestHandler1_entity.handleRequest (8 samples, 0.19%)</title>
            <rect x="1087.7" y="307.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1090.7" y="318.0"></text>
        </g>
        <g>
            <title>itable stub (5 samples, 0.12%)</title>
            <rect x="1090.0" y="307.0" width="1.4" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="1093.0" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.parseRequest (28 samples, 0.67%)</title>
            <rect x="1091.4" y="387.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1094.4" y="398.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.17%)</title>
            <rect x="1092.2" y="371.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1095.2" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.05%)</title>
            <rect x="1093.1" y="355.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1096.1" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.05%)</title>
            <rect x="1093.1" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1096.1" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (2 samples, 0.05%)</title>
            <rect x="1093.1" y="323.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1096.1" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (2 samples, 0.05%)</title>
            <rect x="1093.7" y="355.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1096.7" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (10 samples, 0.24%)</title>
            <rect x="1094.2" y="371.0" width="2.9" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1097.2" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (10 samples, 0.24%)</title>
            <rect x="1094.2" y="355.0" width="2.9" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1097.2" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.startsWith (8 samples, 0.19%)</title>
            <rect x="1097.1" y="371.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1100.1" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.startParsingRequestBody (15 samples, 0.36%)</title>
            <rect x="1099.3" y="387.0" width="4.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1102.3" y="398.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (15 samples, 0.36%)</title>
            <rect x="1099.3" y="371.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1102.3" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (2 samples, 0.05%)</title>
            <rect x="1101.9" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1104.9" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (2 samples, 0.05%)</title>
            <rect x="1101.9" y="339.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1104.9" y="350.0"></text>
        </g>
        <g>
            <title>jlong_disjoint_arraycopy (4 samples, 0.10%)</title>
            <rect x="1102.4" y="355.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="1105.4" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (12 samples, 0.29%)</title>
            <rect x="1103.6" y="387.0" width="3.4" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1106.6" y="398.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (6 samples, 0.14%)</title>
            <rect x="1104.4" y="371.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1107.4" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.14%)</title>
            <rect x="1104.4" y="355.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1107.4" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (3 samples, 0.07%)</title>
            <rect x="1106.1" y="371.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1109.1" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (3 samples, 0.07%)</title>
            <rect x="1106.1" y="355.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1109.1" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpServer.handleRequest (2 samples, 0.05%)</title>
            <rect x="1106.4" y="339.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1109.4" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (21 samples, 0.50%)</title>
            <rect x="1107.0" y="387.0" width="5.9" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1110.0" y="398.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (11 samples, 0.26%)</title>
            <rect x="1109.8" y="371.0" width="3.1" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1112.8" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.read (216 samples, 5.19%)</title>
            <rect x="1112.9" y="403.0" width="61.2" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1115.9" y="414.0">one/ni..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (213 samples, 5.12%)</title>
            <rect x="1112.9" y="387.0" width="60.4" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1115.9" y="398.0">one/ni..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (2 samples, 0.05%)</title>
            <rect x="1113.8" y="371.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1116.8" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/net/SocketClosedException.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="1114.3" y="371.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1117.3" y="382.0"></text>
        </g>
        <g>
            <title>java/net/SocketException.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="1114.3" y="355.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1117.3" y="366.0"></text>
        </g>
        <g>
            <title>java/io/IOException.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="1114.3" y="339.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1117.3" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/Exception.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="1114.3" y="323.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1117.3" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.02%)</title>
            <rect x="1114.3" y="307.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="1117.3" y="318.0"></text>
        </g>
        <g>
            <title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.02%)
            </title>
            <rect x="1114.3" y="291.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1117.3" y="302.0"></text>
        </g>
        <g>
            <title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples,
                0.02%)
            </title>
            <rect x="1114.3" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1117.3" y="286.0"></text>
        </g>
        <g>
            <title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel,
                CompiledMethod*, JavaThread*) (1 samples, 0.02%)
            </title>
            <rect x="1114.3" y="259.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="1117.3" y="270.0"></text>
        </g>
        <g>
            <title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;,
                CompLevel, CompiledMethod*, JavaThread*) (1 samples, 0.02%)
            </title>
            <rect x="1114.3" y="243.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1117.3" y="254.0"></text>
        </g>
        <g>
            <title>CompileBroker::compilation_is_in_queue(methodHandle const&amp;) (1 samples, 0.02%)</title>
            <rect x="1114.3" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1117.3" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (207 samples, 4.97%)</title>
            <rect x="1114.6" y="371.0" width="58.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1117.6" y="382.0">sun/ni..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (1 samples, 0.02%)</title>
            <rect x="1115.5" y="355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1118.5" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.02%)</title>
            <rect x="1115.5" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1118.5" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (1 samples, 0.02%)</title>
            <rect x="1115.5" y="323.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1118.5" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (1 samples, 0.02%)</title>
            <rect x="1115.5" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1118.5" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (1 samples, 0.02%)</title>
            <rect x="1115.5" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1118.5" y="302.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.02%)</title>
            <rect x="1115.8" y="355.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1118.8" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.02%)</title>
            <rect x="1115.8" y="339.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1118.8" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (201 samples, 4.83%)</title>
            <rect x="1116.0" y="355.0" width="57.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1119.0" y="366.0">sun/ni..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (201 samples, 4.83%)</title>
            <rect x="1116.0" y="339.0" width="57.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1119.0" y="350.0">sun/ni..</text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.put (9 samples, 0.22%)</title>
            <rect x="1116.0" y="323.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1119.0" y="334.0"></text>
        </g>
        <g>
            <title>java/nio/DirectByteBuffer.get (9 samples, 0.22%)</title>
            <rect x="1116.0" y="307.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1119.0" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkBounds (1 samples, 0.02%)</title>
            <rect x="1116.0" y="291.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1119.0" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/MappedByteBuffer.position (5 samples, 0.12%)</title>
            <rect x="1116.3" y="291.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="1119.3" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (5 samples, 0.12%)</title>
            <rect x="1116.3" y="275.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1119.3" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.position (5 samples, 0.12%)</title>
            <rect x="1116.3" y="259.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1119.3" y="270.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (4 samples, 0.10%)</title>
            <rect x="1116.3" y="243.0" width="1.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="1119.3" y="254.0"></text>
        </g>
        <g>
            <title>unsafe_arraycopy (1 samples, 0.02%)</title>
            <rect x="1117.5" y="243.0" width="0.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
            <text x="1120.5" y="254.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.07%)</title>
            <rect x="1117.7" y="291.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="1120.7" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.07%)</title>
            <rect x="1117.7" y="275.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1120.7" y="286.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.checkPrimitivePointer (3 samples, 0.07%)</title>
            <rect x="1117.7" y="259.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="1120.7" y="270.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.checkPrimitiveArray (3 samples, 0.07%)</title>
            <rect x="1117.7" y="243.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1120.7" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (175 samples, 4.20%)</title>
            <rect x="1118.6" y="323.0" width="49.6" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="1121.6" y="334.0">sun/n..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (175 samples, 4.20%)</title>
            <rect x="1118.6" y="307.0" width="49.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1121.6" y="318.0">sun/n..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (175 samples, 4.20%)</title>
            <rect x="1118.6" y="291.0" width="49.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1121.6" y="302.0">sun/n..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (1 samples, 0.02%)</title>
            <rect x="1120.6" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
            <text x="1123.6" y="286.0"></text>
        </g>
        <g>
            <title>convertReturnVal (1 samples, 0.02%)</title>
            <rect x="1120.9" y="275.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="1123.9" y="286.0"></text>
        </g>
        <g>
            <title>read (166 samples, 3.99%)</title>
            <rect x="1121.1" y="275.0" width="47.1" height="15" fill="#e96565" rx="2" ry="2"/>
            <text x="1124.1" y="286.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (14 samples, 0.34%)</title>
            <rect x="1168.2" y="323.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1171.2" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (8 samples, 0.19%)</title>
            <rect x="1168.2" y="307.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1171.2" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$BufferCache.get (6 samples, 0.14%)</title>
            <rect x="1170.4" y="307.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1173.4" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.capacity (2 samples, 0.05%)</title>
            <rect x="1171.3" y="291.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1174.3" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$BufferCache.next (1 samples, 0.02%)</title>
            <rect x="1171.9" y="291.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1174.9" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.07%)</title>
            <rect x="1172.1" y="323.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1175.1" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (1 samples, 0.02%)</title>
            <rect x="1172.4" y="307.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1175.4" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (1 samples, 0.02%)</title>
            <rect x="1172.4" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1175.4" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$BufferCache.offerFirst (1 samples, 0.02%)</title>
            <rect x="1172.7" y="307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1175.7" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginRead (1 samples, 0.02%)</title>
            <rect x="1173.0" y="355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1176.0" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.listen (3 samples, 0.07%)</title>
            <rect x="1173.3" y="387.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1176.3" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (13 samples, 0.31%)</title>
            <rect x="1174.1" y="419.0" width="3.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1177.1" y="430.0"></text>
        </g>
        <g>
            <title>__chk_fail_overlap.cold.1 (2 samples, 0.05%)</title>
            <rect x="1174.4" y="403.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
            <text x="1177.4" y="414.0"></text>
        </g>
        <g>
            <title>gettimeofday (3 samples, 0.07%)</title>
            <rect x="1175.0" y="403.0" width="0.8" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="1178.0" y="414.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (3 samples, 0.07%)</title>
            <rect x="1175.0" y="387.0" width="0.8" height="15" fill="#ea6767" rx="2" ry="2"/>
            <text x="1178.0" y="398.0"></text>
        </g>
        <g>
            <title>_res (1 samples, 0.02%)</title>
            <rect x="1175.0" y="371.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="1178.0" y="382.0"></text>
        </g>
        <g>
            <title>h_errno (2 samples, 0.05%)</title>
            <rect x="1175.3" y="371.0" width="0.5" height="15" fill="#f27070" rx="2" ry="2"/>
            <text x="1178.3" y="382.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (7 samples, 0.17%)</title>
            <rect x="1175.8" y="403.0" width="2.0" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1178.8" y="414.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (1 samples, 0.02%)</title>
            <rect x="1177.8" y="435.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1180.8" y="446.0"></text>
        </g>
        <g>
            <title>gettimeofday (1 samples, 0.02%)</title>
            <rect x="1177.8" y="419.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="1180.8" y="430.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (2 samples, 0.05%)</title>
            <rect x="1178.1" y="451.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1181.1" y="462.0"></text>
        </g>
        <g>
            <title>thread_start (40 samples, 0.96%)</title>
            <rect x="1178.7" y="451.0" width="11.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="1181.7" y="462.0"></text>
        </g>
        <g>
            <title>_pthread_start (40 samples, 0.96%)</title>
            <rect x="1178.7" y="435.0" width="11.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1181.7" y="446.0"></text>
        </g>
        <g>
            <title>thread_native_entry(Thread*) (40 samples, 0.96%)</title>
            <rect x="1178.7" y="419.0" width="11.3" height="15" fill="#ec6868" rx="2" ry="2"/>
            <text x="1181.7" y="430.0"></text>
        </g>
        <g>
            <title>Thread::call_run() (40 samples, 0.96%)</title>
            <rect x="1178.7" y="403.0" width="11.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1181.7" y="414.0"></text>
        </g>
        <g>
            <title>ConcurrentGCThread::run() (7 samples, 0.17%)</title>
            <rect x="1178.7" y="387.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1181.7" y="398.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::run_service() (7 samples, 0.17%)</title>
            <rect x="1178.7" y="371.0" width="1.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1181.7" y="382.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.05%)</title>
            <rect x="1178.7" y="355.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1181.7" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples,
                0.05%)
            </title>
            <rect x="1178.7" y="339.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1181.7" y="350.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title>
            <rect x="1178.7" y="323.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1181.7" y="334.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.12%)</title>
            <rect x="1179.2" y="355.0" width="1.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1182.2" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (5 samples, 0.12%)</title>
            <rect x="1179.2" y="339.0" width="1.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1182.2" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (5 samples, 0.12%)</title>
            <rect x="1179.2" y="323.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1182.2" y="334.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (5 samples, 0.12%)</title>
            <rect x="1179.2" y="307.0" width="1.4" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1182.2" y="318.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (4 samples, 0.10%)</title>
            <rect x="1179.2" y="291.0" width="1.2" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="1182.2" y="302.0"></text>
        </g>
        <g>
            <title>xdrstdio_ops (1 samples, 0.02%)</title>
            <rect x="1180.4" y="291.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="1183.4" y="302.0"></text>
        </g>
        <g>
            <title>GangWorker::loop() (13 samples, 0.31%)</title>
            <rect x="1180.6" y="387.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1183.6" y="398.0"></text>
        </g>
        <g>
            <title>G1ParTask::work(unsigned int) (5 samples, 0.12%)</title>
            <rect x="1180.6" y="371.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1183.6" y="382.0"></text>
        </g>
        <g>
            <title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 0.10%)</title>
            <rect x="1180.6" y="355.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1183.6" y="366.0"></text>
        </g>
        <g>
            <title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.10%)</title>
            <rect x="1180.6" y="339.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1183.6" y="350.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples,
                0.10%)
            </title>
            <rect x="1180.6" y="323.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1183.6" y="334.0"></text>
        </g>
        <g>
            <title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned
                long, bool) (4 samples, 0.10%)
            </title>
            <rect x="1180.6" y="307.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1183.6" y="318.0"></text>
        </g>
        <g>
            <title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 0.10%)</title>
            <rect x="1180.6" y="291.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1183.6" y="302.0"></text>
        </g>
        <g>
            <title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.07%)</title>
            <rect x="1180.6" y="275.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1183.6" y="286.0"></text>
        </g>
        <g>
            <title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (3 samples, 0.07%)</title>
            <rect x="1180.6" y="259.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1183.6" y="270.0"></text>
        </g>
        <g>
            <title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples,
                0.05%)
            </title>
            <rect x="1180.9" y="243.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1183.9" y="254.0"></text>
        </g>
        <g>
            <title>Copy::pd_disjoint_words(HeapWord const*, HeapWord*, unsigned long) (1 samples, 0.02%)</title>
            <rect x="1181.2" y="227.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1184.2" y="238.0"></text>
        </g>
        <g>
            <title>_platform_memmove$VARIANT$Haswell (1 samples, 0.02%)</title>
            <rect x="1181.2" y="211.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="1184.2" y="222.0"></text>
        </g>
        <g>
            <title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.02%)
            </title>
            <rect x="1181.5" y="275.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1184.5" y="286.0"></text>
        </g>
        <g>
            <title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion,
                G1ScanObjsDuringUpdateRSClosure*) (1 samples, 0.02%)
            </title>
            <rect x="1181.5" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1184.5" y="270.0"></text>
        </g>
        <g>
            <title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass,
                unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (1 samples, 0.02%)
            </title>
            <rect x="1181.5" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1184.5" y="254.0"></text>
        </g>
        <g>
            <title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (1 samples,
                0.02%)
            </title>
            <rect x="1181.5" y="227.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1184.5" y="238.0"></text>
        </g>
        <g>
            <title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (1 samples, 0.02%)</title>
            <rect x="1181.8" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1184.8" y="366.0"></text>
        </g>
        <g>
            <title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples,
                0.02%)
            </title>
            <rect x="1181.8" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1184.8" y="350.0"></text>
        </g>
        <g>
            <title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title>
            <rect x="1181.8" y="323.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="1184.8" y="334.0"></text>
        </g>
        <g>
            <title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.02%)</title>
            <rect x="1181.8" y="307.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1184.8" y="318.0"></text>
        </g>
        <g>
            <title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.02%)</title>
            <rect x="1181.8" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1184.8" y="302.0"></text>
        </g>
        <g>
            <title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (1 samples, 0.02%)</title>
            <rect x="1181.8" y="275.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="1184.8" y="286.0"></text>
        </g>
        <g>
            <title>frame::is_interpreted_frame() const (1 samples, 0.02%)</title>
            <rect x="1181.8" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1184.8" y="270.0"></text>
        </g>
        <g>
            <title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.02%)</title>
            <rect x="1182.1" y="371.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1185.1" y="382.0"></text>
        </g>
        <g>
            <title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.02%)</title>
            <rect x="1182.1" y="355.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1185.1" y="366.0"></text>
        </g>
        <g>
            <title>JavaThread::nmethods_do(CodeBlobClosure*) (1 samples, 0.02%)</title>
            <rect x="1182.1" y="339.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="1185.1" y="350.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (1 samples, 0.02%)</title>
            <rect x="1182.1" y="323.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1185.1" y="334.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (1 samples, 0.02%)</title>
            <rect x="1182.1" y="307.0" width="0.2" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1185.1" y="318.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (6 samples, 0.14%)</title>
            <rect x="1182.3" y="371.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1185.3" y="382.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (6 samples, 0.14%)</title>
            <rect x="1182.3" y="355.0" width="1.7" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="1185.3" y="366.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (1 samples, 0.02%)</title>
            <rect x="1184.0" y="371.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="1187.0" y="382.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_main_inner() (5 samples, 0.12%)</title>
            <rect x="1184.3" y="387.0" width="1.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1187.3" y="398.0"></text>
        </g>
        <g>
            <title>CompileBroker::compiler_thread_loop() (3 samples, 0.07%)</title>
            <rect x="1184.3" y="371.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1187.3" y="382.0"></text>
        </g>
        <g>
            <title>CompileBroker::invoke_compiler_on_method(CompileTask*) (3 samples, 0.07%)</title>
            <rect x="1184.3" y="355.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1187.3" y="366.0"></text>
        </g>
        <g>
            <title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.05%)</title>
            <rect x="1184.3" y="339.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1187.3" y="350.0"></text>
        </g>
        <g>
            <title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples,
                0.05%)
            </title>
            <rect x="1184.3" y="323.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1187.3" y="334.0"></text>
        </g>
        <g>
            <title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples,
                0.05%)
            </title>
            <rect x="1184.3" y="307.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1187.3" y="318.0"></text>
        </g>
        <g>
            <title>Compile::Optimize() (2 samples, 0.05%)</title>
            <rect x="1184.3" y="291.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1187.3" y="302.0"></text>
        </g>
        <g>
            <title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (2 samples, 0.05%)</title>
            <rect x="1184.3" y="275.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1187.3" y="286.0"></text>
        </g>
        <g>
            <title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.02%)
            </title>
            <rect x="1184.3" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1187.3" y="270.0"></text>
        </g>
        <g>
            <title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.02%)</title>
            <rect x="1184.3" y="243.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1187.3" y="254.0"></text>
        </g>
        <g>
            <title>PhaseIdealLoop::conditional_move(Node*) (1 samples, 0.02%)</title>
            <rect x="1184.3" y="227.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="1187.3" y="238.0"></text>
        </g>
        <g>
            <title>PhaseIterGVN::optimize() (1 samples, 0.02%)</title>
            <rect x="1184.6" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1187.6" y="270.0"></text>
        </g>
        <g>
            <title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.02%)</title>
            <rect x="1184.6" y="243.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1187.6" y="254.0"></text>
        </g>
        <g>
            <title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.02%)</title>
            <rect x="1184.6" y="227.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1187.6" y="238.0"></text>
        </g>
        <g>
            <title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.02%)</title>
            <rect x="1184.6" y="211.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1187.6" y="222.0"></text>
        </g>
        <g>
            <title>ProjNode::hash() const (1 samples, 0.02%)</title>
            <rect x="1184.6" y="195.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1187.6" y="206.0"></text>
        </g>
        <g>
            <title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.02%)</title>
            <rect x="1184.9" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1187.9" y="350.0"></text>
        </g>
        <g>
            <title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1
                samples, 0.02%)
            </title>
            <rect x="1184.9" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1187.9" y="334.0"></text>
        </g>
        <g>
            <title>Compilation::compile_method() (1 samples, 0.02%)</title>
            <rect x="1184.9" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1187.9" y="318.0"></text>
        </g>
        <g>
            <title>Compilation::install_code(int) (1 samples, 0.02%)</title>
            <rect x="1184.9" y="291.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1187.9" y="302.0"></text>
        </g>
        <g>
            <title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*,
                ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState) (1 samples,
                0.02%)
            </title>
            <rect x="1184.9" y="275.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1187.9" y="286.0"></text>
        </g>
        <g>
            <title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*,
                Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*,
                AbstractCompiler*, int, _jobject*, _jobject*) (1 samples, 0.02%)
            </title>
            <rect x="1184.9" y="259.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1187.9" y="270.0"></text>
        </g>
        <g>
            <title>InstanceKlass::add_dependent_nmethod(nmethod*) (1 samples, 0.02%)</title>
            <rect x="1184.9" y="243.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1187.9" y="254.0"></text>
        </g>
        <g>
            <title>DependencyContext::add_dependent_nmethod(nmethod*, bool) (1 samples, 0.02%)</title>
            <rect x="1184.9" y="227.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="1187.9" y="238.0"></text>
        </g>
        <g>
            <title>NMethodSweeper::sweeper_loop() (1 samples, 0.02%)</title>
            <rect x="1185.2" y="371.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1188.2" y="382.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title>
            <rect x="1185.2" y="355.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1188.2" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title>
            <rect x="1185.2" y="339.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1188.2" y="350.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title>
            <rect x="1185.2" y="323.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1188.2" y="334.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (1 samples, 0.02%)</title>
            <rect x="1185.2" y="307.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="1188.2" y="318.0"></text>
        </g>
        <g>
            <title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.02%)</title>
            <rect x="1185.5" y="371.0" width="0.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1188.5" y="382.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title>
            <rect x="1185.5" y="355.0" width="0.2" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1188.5" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title>
            <rect x="1185.5" y="339.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1188.5" y="350.0"></text>
        </g>
        <g>
            <title>ParkCommon(ParkEvent*, long) (1 samples, 0.02%)</title>
            <rect x="1185.5" y="323.0" width="0.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
            <text x="1188.5" y="334.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park() (1 samples, 0.02%)</title>
            <rect x="1185.5" y="307.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1188.5" y="318.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (1 samples, 0.02%)</title>
            <rect x="1185.5" y="291.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1188.5" y="302.0"></text>
        </g>
        <g>
            <title>VMThread::run() (4 samples, 0.10%)</title>
            <rect x="1185.7" y="387.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1188.7" y="398.0"></text>
        </g>
        <g>
            <title>VMThread::loop() (4 samples, 0.10%)</title>
            <rect x="1185.7" y="371.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1188.7" y="382.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (1 samples, 0.02%)</title>
            <rect x="1185.7" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1188.7" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (1 samples, 0.02%)</title>
            <rect x="1185.7" y="339.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="1188.7" y="350.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (1 samples, 0.02%)</title>
            <rect x="1185.7" y="323.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1188.7" y="334.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (1 samples, 0.02%)</title>
            <rect x="1185.7" y="307.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="1188.7" y="318.0"></text>
        </g>
        <g>
            <title>SafepointSynchronize::begin() (1 samples, 0.02%)</title>
            <rect x="1186.0" y="355.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1189.0" y="366.0"></text>
        </g>
        <g>
            <title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.02%)</title>
            <rect x="1186.0" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1189.0" y="350.0"></text>
        </g>
        <g>
            <title>WorkGang::run_task(AbstractGangTask*, unsigned int) (1 samples, 0.02%)</title>
            <rect x="1186.0" y="323.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1189.0" y="334.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (1
                samples, 0.02%)
            </title>
            <rect x="1186.0" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1189.0" y="318.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (1 samples, 0.02%)</title>
            <rect x="1186.0" y="291.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="1189.0" y="302.0"></text>
        </g>
        <g>
            <title>SafepointSynchronize::end() (1 samples, 0.02%)</title>
            <rect x="1186.3" y="355.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="1189.3" y="366.0"></text>
        </g>
        <g>
            <title>ThreadSafepointState::restart() (1 samples, 0.02%)</title>
            <rect x="1186.3" y="339.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="1189.3" y="350.0"></text>
        </g>
        <g>
            <title>VMThread::evaluate_operation(VM_Operation*) (1 samples, 0.02%)</title>
            <rect x="1186.6" y="355.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1189.6" y="366.0"></text>
        </g>
        <g>
            <title>VM_Operation::evaluate() (1 samples, 0.02%)</title>
            <rect x="1186.6" y="339.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1189.6" y="350.0"></text>
        </g>
        <g>
            <title>VM_G1CollectForAllocation::doit() (1 samples, 0.02%)</title>
            <rect x="1186.6" y="323.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1189.6" y="334.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (1 samples, 0.02%)</title>
            <rect x="1186.6" y="307.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1189.6" y="318.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::pre_evacuate_collection_set() (1 samples, 0.02%)</title>
            <rect x="1186.6" y="291.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1189.6" y="302.0"></text>
        </g>
        <g>
            <title>G1RemSetScanState::reset() (1 samples, 0.02%)</title>
            <rect x="1186.6" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1189.6" y="286.0"></text>
        </g>
        <g>
            <title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.02%)</title>
            <rect x="1186.6" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1189.6" y="270.0"></text>
        </g>
        <g>
            <title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (1 samples, 0.02%)</title>
            <rect x="1186.6" y="243.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1189.6" y="254.0"></text>
        </g>
        <g>
            <title>WatcherThread::run() (11 samples, 0.26%)</title>
            <rect x="1186.9" y="387.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1189.9" y="398.0"></text>
        </g>
        <g>
            <title>WatcherThread::sleep() const (11 samples, 0.26%)</title>
            <rect x="1186.9" y="371.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1189.9" y="382.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (11 samples, 0.26%)</title>
            <rect x="1186.9" y="355.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1189.9" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (11 samples, 0.26%)</title>
            <rect x="1186.9" y="339.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1189.9" y="350.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (11 samples, 0.26%)</title>
            <rect x="1186.9" y="323.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1189.9" y="334.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (11 samples, 0.26%)</title>
            <rect x="1186.9" y="307.0" width="3.1" height="15" fill="#e55f5f" rx="2" ry="2"/>
            <text x="1189.9" y="318.0"></text>
        </g>
    </g>
</svg>
