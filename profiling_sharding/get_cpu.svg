<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502"
     xmlns="http://www.w3.org/2000/svg">
    <style type="text/css">
        text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
        #search { opacity:0.1; cursor:pointer; }
        #search:hover, #search.show { opacity:1; }
        #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
        #title { text-anchor:middle; font-size:17px}
        #unzoom { cursor:pointer; }
        #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
        .hide { display:none; }
        .parent { opacity:0.5; }
    </style>
    <script type="text/ecmascript">
        <![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
    </script>
    <rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
    <text id="title" x="600" y="24">Flame Graph</text>
    <text id="details" x="10" y="485"></text>
    <text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
    <text id="search" x="1090" y="24">Search</text>
    <text id="matched" x="1090" y="485"></text>
    <g id="frames">
        <g>
            <title>all (4,892 samples, 100.00%)</title>
            <rect x="10.0" y="451.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="13.0" y="462.0">all</text>
        </g>
        <g>
            <title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (10 samples, 0.20%)</title>
            <rect x="10.2" y="435.0" width="2.5" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="13.2" y="446.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.16%)</title>
            <rect x="10.7" y="419.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="13.7" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (8 samples, 0.16%)</title>
            <rect x="10.7" y="403.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="13.7" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (7 samples, 0.14%)</title>
            <rect x="10.7" y="387.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="13.7" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)</title>
            <rect x="11.2" y="371.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="14.2" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.06%)
            </title>
            <rect x="11.2" y="355.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="14.2" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.04%)
            </title>
            <rect x="11.2" y="339.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="14.2" y="350.0"></text>
        </g>
        <g>
            <title>_os_semaphore_wait.cold.1 (2 samples, 0.04%)</title>
            <rect x="11.9" y="371.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="14.9" y="382.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title>
            <rect x="12.7" y="435.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="15.7" y="446.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.04%)</title>
            <rect x="12.7" y="419.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="15.7" y="430.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (23 samples, 0.47%)</title>
            <rect x="13.1" y="435.0" width="5.6" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="16.1" y="446.0"></text>
        </g>
        <g>
            <title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.04%)</title>
            <rect x="13.4" y="419.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="16.4" y="430.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_instance(Thread*) (20 samples, 0.41%)</title>
            <rect x="13.9" y="419.0" width="4.8" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="16.9" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (18 samples, 0.37%)</title>
            <rect x="14.1" y="403.0" width="4.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="17.1" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (17 samples, 0.35%)</title>
            <rect x="14.3" y="387.0" width="4.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="17.3" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.04%)</title>
            <rect x="14.3" y="371.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="17.3" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (12 samples, 0.25%)</title>
            <rect x="15.1" y="371.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="18.1" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (11 samples, 0.22%)
            </title>
            <rect x="15.1" y="355.0" width="2.6" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="18.1" y="366.0"></text>
        </g>
        <g>
            <title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.04%)</title>
            <rect x="15.5" y="339.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="18.5" y="350.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::max_tlab_size() const (2 samples, 0.04%)</title>
            <rect x="15.5" y="323.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="18.5" y="334.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (4 samples, 0.08%)
            </title>
            <rect x="16.0" y="339.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="19.0" y="350.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.04%)</title>
            <rect x="16.0" y="323.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="19.0" y="334.0"></text>
        </g>
        <g>
            <title>_platform_memset$VARIANT$Haswell (2 samples, 0.04%)</title>
            <rect x="16.5" y="323.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="19.5" y="334.0"></text>
        </g>
        <g>
            <title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (3 samples, 0.06%)</title>
            <rect x="17.0" y="339.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="20.0" y="350.0"></text>
        </g>
        <g>
            <title>_platform_bzero$VARIANT$Haswell (2 samples, 0.04%)</title>
            <rect x="18.0" y="371.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="21.0" y="382.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (72 samples, 1.47%)
            </title>
            <rect x="18.7" y="435.0" width="17.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="21.7" y="446.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::enter(Thread*) (68 samples, 1.39%)</title>
            <rect x="19.4" y="419.0" width="16.4" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="22.4" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::EnterI(Thread*) (18 samples, 0.37%)</title>
            <rect x="20.6" y="403.0" width="4.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="23.6" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.04%)</title>
            <rect x="20.9" y="387.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="23.9" y="398.0"></text>
        </g>
        <g>
            <title>SpinPause (2 samples, 0.04%)</title>
            <rect x="21.3" y="387.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="24.3" y="398.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (13 samples, 0.27%)</title>
            <rect x="21.8" y="387.0" width="3.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="24.8" y="398.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (12 samples, 0.25%)</title>
            <rect x="22.1" y="371.0" width="2.9" height="15" fill="#f17070" rx="2" ry="2"/>
            <text x="25.1" y="382.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (2 samples, 0.04%)</title>
            <rect x="25.0" y="403.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="28.0" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (42 samples, 0.86%)</title>
            <rect x="25.4" y="403.0" width="10.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="28.4" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (16 samples, 0.33%)</title>
            <rect x="31.7" y="387.0" width="3.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="34.7" y="398.0"></text>
        </g>
        <g>
            <title>[not_walkable] (3 samples, 0.06%)</title>
            <rect x="36.5" y="435.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
            <text x="39.5" y="446.0"></text>
        </g>
        <g>
            <title>[not_walkable_Java] (11 samples, 0.22%)</title>
            <rect x="37.3" y="435.0" width="2.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
            <text x="40.3" y="446.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.04%)</title>
            <rect x="37.7" y="419.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="40.7" y="430.0"></text>
        </g>
        <g>
            <title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.04%)</title>
            <rect x="37.7" y="403.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="40.7" y="414.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (3 samples, 0.06%)</title>
            <rect x="38.2" y="419.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="41.2" y="430.0"></text>
        </g>
        <g>
            <title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (3 samples, 0.06%)</title>
            <rect x="38.2" y="403.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="41.2" y="414.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (2 samples, 0.04%)</title>
            <rect x="38.5" y="387.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="41.5" y="398.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.04%)</title>
            <rect x="38.5" y="371.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="41.5" y="382.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)
            </title>
            <rect x="39.2" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="42.2" y="430.0"></text>
        </g>
        <g>
            <title>[unknown_Java] (39 samples, 0.80%)</title>
            <rect x="39.9" y="435.0" width="9.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="42.9" y="446.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (6 samples, 0.12%)</title>
            <rect x="47.9" y="419.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="50.9" y="430.0"></text>
        </g>
        <g>
            <title>h_errno (6 samples, 0.12%)</title>
            <rect x="47.9" y="403.0" width="1.4" height="15" fill="#f87878" rx="2" ry="2"/>
            <text x="50.9" y="414.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.run (2,508 samples, 51.27%)</title>
            <rect x="49.3" y="435.0" width="605.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="52.3" y="446.0">java/lang/Thread.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,508 samples, 51.27%)</title>
            <rect x="49.3" y="419.0" width="605.0" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="52.3" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,508 samples, 51.27%)</title>
            <rect x="49.3" y="403.0" width="605.0" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="52.3" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (2 samples, 0.04%)</title>
            <rect x="49.3" y="387.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="52.3" y="398.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.04%)</title>
            <rect x="49.3" y="371.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="52.3" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (2 samples, 0.04%)</title>
            <rect x="49.3" y="355.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="52.3" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title>
            <rect x="49.3" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="52.3" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title>
            <rect x="49.3" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="52.3" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title>
            <rect x="49.3" y="307.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="52.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.getTask (954 samples, 19.50%)</title>
            <rect x="50.0" y="387.0" width="230.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="53.0" y="398.0">java/util/concurrent/ThreadPoo..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.take (942 samples, 19.26%)</title>
            <rect x="51.5" y="371.0" width="227.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="54.5" y="382.0">java/util/concurrent/LinkedBlo..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (847 samples, 17.31%)
            </title>
            <rect x="51.5" y="355.0" width="204.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="54.5" y="366.0">java/util/concurrent/locks/..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (8 samples, 0.16%)</title>
            <rect x="52.9" y="339.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="55.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (11 samples, 0.22%)</title>
            <rect x="54.9" y="339.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="57.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.22%)</title>
            <rect x="54.9" y="323.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="57.9" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (4 samples, 0.08%)</title>
            <rect x="56.1" y="307.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="59.1" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.06%)</title>
            <rect x="56.3" y="291.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="59.3" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.06%)</title>
            <rect x="56.3" y="275.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="59.3" y="286.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.06%)</title>
            <rect x="56.3" y="259.0" width="0.7" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="59.3" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (3 samples, 0.06%)</title>
            <rect x="56.3" y="243.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="59.3" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.04%)</title>
            <rect x="57.0" y="307.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="60.0" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (820 samples, 16.76%)</title>
            <rect x="57.8" y="339.0" width="197.8" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="60.8" y="350.0">java/util/concurrent/locks..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (815 samples, 16.66%)</title>
            <rect x="59.0" y="323.0" width="196.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="62.0" y="334.0">jdk/internal/misc/Unsafe.p..</text>
        </g>
        <g>
            <title>JavaThreadParkedState::~JavaThreadParkedState() (2 samples, 0.04%)</title>
            <rect x="72.0" y="307.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="75.0" y="318.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (4 samples, 0.08%)</title>
            <rect x="72.7" y="307.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="75.7" y="318.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (750 samples, 15.33%)</title>
            <rect x="74.4" y="307.0" width="180.9" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="77.4" y="318.0">Unsafe_Park(JNIEnv_*, _..</text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (3 samples, 0.06%)</title>
            <rect x="75.6" y="291.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="78.6" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (3 samples, 0.06%)</title>
            <rect x="76.6" y="291.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="79.6" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::jni_environment_offset() (2 samples, 0.04%)</title>
            <rect x="77.3" y="291.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="80.3" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::parker() (2 samples, 0.04%)</title>
            <rect x="77.8" y="291.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="80.8" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (3 samples, 0.06%)</title>
            <rect x="78.3" y="291.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="81.3" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (3 samples, 0.06%)</title>
            <rect x="78.3" y="275.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="81.3" y="286.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.06%)</title>
            <rect x="78.3" y="259.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="81.3" y="270.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (3 samples, 0.06%)
            </title>
            <rect x="78.3" y="243.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="81.3" y="254.0"></text>
        </g>
        <g>
            <title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.14%)</title>
            <rect x="79.0" y="291.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="82.0" y="302.0"></text>
        </g>
        <g>
            <title>ThreadService::is_thread_monitoring_contention() (4 samples, 0.08%)</title>
            <rect x="79.5" y="275.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="82.5" y="286.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (5 samples,
                0.10%)
            </title>
            <rect x="80.7" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="83.7" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::threadObj() const (5 samples, 0.10%)</title>
            <rect x="80.7" y="275.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="83.7" y="286.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (5 samples, 0.10%)</title>
            <rect x="81.9" y="291.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="84.9" y="302.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.06%)</title>
            <rect x="82.4" y="275.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="85.4" y="286.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::setting(JfrEventId) (2 samples, 0.04%)</title>
            <rect x="82.6" y="259.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="85.6" y="270.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (684 samples, 13.98%)</title>
            <rect x="83.3" y="291.0" width="165.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="86.3" y="302.0">Parker::park(bool, lo..</text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.04%)</title>
            <rect x="85.3" y="275.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="88.3" y="286.0"></text>
        </g>
        <g>
            <title>os::is_MP() (2 samples, 0.04%)</title>
            <rect x="85.3" y="259.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="88.3" y="270.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (15 samples, 0.31%)</title>
            <rect x="86.0" y="275.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="89.0" y="286.0"></text>
        </g>
        <g>
            <title>Monitor::lock_without_safepoint_check() (4 samples, 0.08%)</title>
            <rect x="88.2" y="259.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="91.2" y="270.0"></text>
        </g>
        <g>
            <title>Monitor::ILock(Thread*) (2 samples, 0.04%)</title>
            <rect x="88.6" y="243.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="91.6" y="254.0"></text>
        </g>
        <g>
            <title>Monitor::TryFast() (2 samples, 0.04%)</title>
            <rect x="88.6" y="227.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="91.6" y="238.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (2 samples, 0.04%)</title>
            <rect x="89.1" y="259.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
            <text x="92.1" y="270.0"></text>
        </g>
        <g>
            <title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (2 samples, 0.04%)</title>
            <rect x="89.6" y="275.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="92.6" y="286.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (2 samples, 0.04%)</title>
            <rect x="89.6" y="259.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="92.6" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (623 samples, 12.74%)</title>
            <rect x="90.1" y="275.0" width="150.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="93.1" y="286.0">__psynch_cvwait</text>
        </g>
        <g>
            <title>_pthread_cond_wait (26 samples, 0.53%)</title>
            <rect x="240.4" y="275.0" width="6.2" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="243.4" y="286.0"></text>
        </g>
        <g>
            <title>_pthread_mutex_droplock (4 samples, 0.08%)</title>
            <rect x="245.7" y="259.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="248.7" y="270.0"></text>
        </g>
        <g>
            <title>_pthread_testcancel (4 samples, 0.08%)</title>
            <rect x="246.6" y="275.0" width="1.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="249.6" y="286.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (2 samples, 0.04%)</title>
            <rect x="247.8" y="275.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="250.8" y="286.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4
                samples, 0.08%)
            </title>
            <rect x="249.0" y="291.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="252.0" y="302.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.08%)</title>
            <rect x="249.0" y="275.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="252.0" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.06%)</title>
            <rect x="249.3" y="259.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="252.3" y="270.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.06%)
            </title>
            <rect x="249.3" y="243.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="252.3" y="254.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void
                volatile*&gt;(void volatile* const volatile*) const (2 samples, 0.04%)
            </title>
            <rect x="249.5" y="227.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="252.5" y="238.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (4 samples, 0.08%)
            </title>
            <rect x="250.0" y="291.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="253.0" y="302.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (2 samples, 0.04%)</title>
            <rect x="250.0" y="275.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="253.0" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (2 samples, 0.04%)</title>
            <rect x="250.5" y="275.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="253.5" y="286.0"></text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (2 samples, 0.04%)</title>
            <rect x="251.0" y="291.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="254.0" y="302.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (3 samples, 0.06%)</title>
            <rect x="251.5" y="291.0" width="0.7" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="254.5" y="302.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (2 samples, 0.04%)
            </title>
            <rect x="252.2" y="291.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="255.2" y="302.0"></text>
        </g>
        <g>
            <title>pthread_cond_wait (2 samples, 0.04%)</title>
            <rect x="252.7" y="291.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="255.7" y="302.0"></text>
        </g>
        <g>
            <title>pthread_mutex_trylock (6 samples, 0.12%)</title>
            <rect x="253.1" y="291.0" width="1.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="256.1" y="302.0"></text>
        </g>
        <g>
            <title>pthread_mutex_unlock (3 samples, 0.06%)</title>
            <rect x="254.6" y="291.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="257.6" y="302.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (21 samples, 0.43%)</title>
            <rect x="255.8" y="355.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="258.8" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (21 samples, 0.43%)
            </title>
            <rect x="255.8" y="339.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="258.8" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (11 samples, 0.22%)
            </title>
            <rect x="257.2" y="323.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="260.2" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.06%)
            </title>
            <rect x="257.7" y="307.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="260.7" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.06%)</title>
            <rect x="257.7" y="291.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="260.7" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (2 samples, 0.04%)</title>
            <rect x="258.0" y="275.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="261.0" y="286.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (2 samples, 0.04%)</title>
            <rect x="258.0" y="259.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
            <text x="261.0" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (5 samples, 0.10%)</title>
            <rect x="258.4" y="307.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="261.4" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.08%)</title>
            <rect x="259.9" y="323.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="262.9" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.08%)</title>
            <rect x="259.9" y="307.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="262.9" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (74 samples, 1.51%)</title>
            <rect x="260.9" y="355.0" width="17.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="263.9" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (74 samples, 1.51%)</title>
            <rect x="260.9" y="339.0" width="17.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="263.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (74 samples, 1.51%)</title>
            <rect x="260.9" y="323.0" width="17.8" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="263.9" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (74 samples, 1.51%)</title>
            <rect x="260.9" y="307.0" width="17.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="263.9" y="318.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (74 samples, 1.51%)</title>
            <rect x="260.9" y="291.0" width="17.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="263.9" y="302.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (67 samples, 1.37%)</title>
            <rect x="262.3" y="275.0" width="16.2" height="15" fill="#fe8080" rx="2" ry="2"/>
            <text x="265.3" y="286.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (60 samples, 1.23%)</title>
            <rect x="263.5" y="259.0" width="14.5" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="266.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.runStateAtLeast (4 samples, 0.08%)</title>
            <rect x="278.7" y="371.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="281.7" y="382.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$4 (2 samples, 0.04%)</title>
            <rect x="279.7" y="371.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="282.7" y="382.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$74/1821403972.run (1,551 samples, 31.70%)</title>
            <rect x="280.2" y="387.0" width="374.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="283.2" y="398.0">ru/mail/polis/service/rubtsov/MyService$$Lambda$74/..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$4 (1,551 samples, 31.70%)</title>
            <rect x="280.2" y="371.0" width="374.1" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="283.2" y="382.0">ru/mail/polis/service/rubtsov/MyService.lambda$exec..</text>
        </g>
        <g>
            <title>itable stub (3 samples, 0.06%)</title>
            <rect x="280.4" y="355.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
            <text x="283.4" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.sendResponse (658 samples, 13.45%)</title>
            <rect x="281.1" y="355.0" width="158.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="284.1" y="366.0">one/nio/http/HttpSes..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.writeResponse (641 samples, 13.10%)</title>
            <rect x="284.0" y="339.0" width="154.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="287.0" y="350.0">one/nio/http/HttpSes..</text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (24 samples, 0.49%)</title>
            <rect x="284.3" y="323.0" width="5.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="287.3" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (13 samples, 0.27%)</title>
            <rect x="286.9" y="307.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="289.9" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (13 samples, 0.27%)</title>
            <rect x="286.9" y="291.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="289.9" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (13 samples, 0.27%)</title>
            <rect x="286.9" y="275.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="289.9" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (616 samples, 12.59%)</title>
            <rect x="290.0" y="323.0" width="148.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="293.0" y="334.0">one/nio/net/Session..</text>
        </g>
        <g>
            <title>one/nio/net/Session.write (616 samples, 12.59%)</title>
            <rect x="290.0" y="307.0" width="148.6" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="293.0" y="318.0">one/nio/net/Session..</text>
        </g>
        <g>
            <title>one/nio/net/Session$ArrayQueueItem.write (611 samples, 12.49%)</title>
            <rect x="290.8" y="291.0" width="147.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="293.8" y="302.0">one/nio/net/Session..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.write (611 samples, 12.49%)</title>
            <rect x="290.8" y="275.0" width="147.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="293.8" y="286.0">one/nio/net/JavaSoc..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (18 samples, 0.37%)</title>
            <rect x="292.0" y="259.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="295.0" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (18 samples, 0.37%)</title>
            <rect x="292.0" y="243.0" width="4.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="295.0" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (18 samples, 0.37%)</title>
            <rect x="292.0" y="227.0" width="4.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="295.0" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (18 samples, 0.37%)</title>
            <rect x="292.0" y="211.0" width="4.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="295.0" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (18 samples, 0.37%)</title>
            <rect x="292.0" y="195.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="295.0" y="206.0"></text>
        </g>
        <g>
            <title>gettimeofday (4 samples, 0.08%)</title>
            <rect x="293.7" y="179.0" width="0.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="296.7" y="190.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (7 samples, 0.14%)</title>
            <rect x="294.6" y="179.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="297.6" y="190.0"></text>
        </g>
        <g>
            <title>gettimeofday (2 samples, 0.04%)</title>
            <rect x="294.9" y="163.0" width="0.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
            <text x="297.9" y="174.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title>
            <rect x="294.9" y="147.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="297.9" y="158.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (4 samples, 0.08%)</title>
            <rect x="295.4" y="163.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="298.4" y="174.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (2 samples, 0.04%)</title>
            <rect x="296.3" y="259.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="299.3" y="270.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (586 samples, 11.98%)</title>
            <rect x="296.8" y="259.0" width="141.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="299.8" y="270.0">sun/nio/ch/SocketC..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title>
            <rect x="297.8" y="243.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="300.8" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title>
            <rect x="297.8" y="227.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="300.8" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.04%)</title>
            <rect x="297.8" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="300.8" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (578 samples, 11.82%)</title>
            <rect x="298.2" y="243.0" width="139.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="301.2" y="254.0">sun/nio/ch/IOUtil..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (576 samples, 11.77%)</title>
            <rect x="298.7" y="227.0" width="139.0" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="301.7" y="238.0">sun/nio/ch/IOUtil..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (569 samples, 11.63%)</title>
            <rect x="298.7" y="211.0" width="137.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="301.7" y="222.0">sun/nio/ch/IOUtil..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (569 samples, 11.63%)</title>
            <rect x="298.7" y="195.0" width="137.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="301.7" y="206.0">sun/nio/ch/Socket..</text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title>
            <rect x="302.6" y="179.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
            <text x="305.6" y="190.0"></text>
        </g>
        <g>
            <title>jshort_disjoint_arraycopy (2 samples, 0.04%)</title>
            <rect x="303.1" y="179.0" width="0.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
            <text x="306.1" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (548 samples, 11.20%)</title>
            <rect x="303.6" y="179.0" width="132.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="306.6" y="190.0">sun/nio/ch/FileD..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_write0 (17 samples, 0.35%)</title>
            <rect x="307.7" y="163.0" width="4.1" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="310.7" y="174.0"></text>
        </g>
        <g>
            <title>fdval (6 samples, 0.12%)</title>
            <rect x="310.3" y="147.0" width="1.5" height="15" fill="#e96464" rx="2" ry="2"/>
            <text x="313.3" y="158.0"></text>
        </g>
        <g>
            <title>fdval (2 samples, 0.04%)</title>
            <rect x="312.0" y="163.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
            <text x="315.0" y="174.0"></text>
        </g>
        <g>
            <title>write (511 samples, 10.45%)</title>
            <rect x="312.5" y="163.0" width="123.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="315.5" y="174.0">write</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (7 samples, 0.14%)</title>
            <rect x="436.0" y="211.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="439.0" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (7 samples, 0.14%)</title>
            <rect x="436.0" y="195.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="439.0" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (7 samples, 0.14%)</title>
            <rect x="436.0" y="179.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="439.0" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endWrite (2 samples, 0.04%)</title>
            <rect x="437.7" y="243.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="440.7" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (2 samples, 0.04%)</title>
            <rect x="437.7" y="227.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="440.7" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (2 samples, 0.04%)</title>
            <rect x="438.1" y="291.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="441.1" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title>
            <rect x="438.6" y="339.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="441.6" y="350.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/993411733.act (641 samples, 13.10%)</title>
            <rect x="439.8" y="355.0" width="154.7" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="442.8" y="366.0">ru/mail/polis/servic..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$entity$0 (639 samples, 13.06%)</title>
            <rect x="440.3" y="339.0" width="154.2" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="443.3" y="350.0">ru/mail/polis/servic..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.proxy (639 samples, 13.06%)</title>
            <rect x="440.3" y="323.0" width="154.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="443.3" y="334.0">ru/mail/polis/servic..</text>
        </g>
        <g>
            <title>java/util/HashMap.get (7 samples, 0.14%)</title>
            <rect x="440.3" y="307.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="443.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (7 samples, 0.14%)</title>
            <rect x="440.3" y="291.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="443.3" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.equals (4 samples, 0.08%)</title>
            <rect x="440.3" y="275.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="443.3" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.isLatin1 (2 samples, 0.04%)</title>
            <rect x="440.8" y="259.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="443.8" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.06%)</title>
            <rect x="441.3" y="275.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="444.3" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (632 samples, 12.92%)</title>
            <rect x="442.0" y="307.0" width="152.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="445.0" y="318.0">one/nio/http/HttpCl..</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (632 samples, 12.92%)</title>
            <rect x="442.0" y="291.0" width="152.5" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="445.0" y="302.0">one/nio/http/HttpCl..</text>
        </g>
        <g>
            <title>java/lang/String.equalsIgnoreCase (3 samples, 0.06%)</title>
            <rect x="443.0" y="275.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="446.0" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (319 samples, 6.52%)</title>
            <rect x="443.7" y="275.0" width="76.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="446.7" y="286.0">one/nio/..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (317 samples, 6.48%)</title>
            <rect x="444.2" y="259.0" width="76.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="447.2" y="270.0">one/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (317 samples, 6.48%)</title>
            <rect x="444.2" y="243.0" width="76.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="447.2" y="254.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (313 samples, 6.40%)</title>
            <rect x="444.4" y="227.0" width="75.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="447.4" y="238.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (313 samples, 6.40%)</title>
            <rect x="444.4" y="211.0" width="75.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="447.4" y="222.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (308 samples, 6.30%)</title>
            <rect x="444.7" y="195.0" width="74.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="447.7" y="206.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (304 samples, 6.21%)</title>
            <rect x="445.6" y="179.0" width="73.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="448.6" y="190.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (304 samples, 6.21%)</title>
            <rect x="445.6" y="163.0" width="73.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="448.6" y="174.0">sun/nio/..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (4 samples, 0.08%)</title>
            <rect x="451.9" y="147.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="454.9" y="158.0"></text>
        </g>
        <g>
            <title>read (274 samples, 5.60%)</title>
            <rect x="452.9" y="147.0" width="66.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="455.9" y="158.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (3 samples, 0.06%)</title>
            <rect x="519.2" y="195.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="522.2" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title>
            <rect x="519.2" y="179.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="522.2" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.04%)</title>
            <rect x="519.4" y="163.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="522.4" y="174.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginRead (2 samples, 0.04%)</title>
            <rect x="519.9" y="227.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="522.9" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readResponse (26 samples, 0.53%)</title>
            <rect x="520.6" y="275.0" width="6.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="523.6" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (2 samples, 0.04%)</title>
            <rect x="521.4" y="259.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="524.4" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (2 samples, 0.04%)</title>
            <rect x="521.4" y="243.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="524.4" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readLine (18 samples, 0.37%)</title>
            <rect x="521.8" y="259.0" width="4.4" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="524.8" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (9 samples, 0.18%)</title>
            <rect x="524.0" y="243.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="527.0" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (7 samples, 0.14%)</title>
            <rect x="524.5" y="227.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="527.5" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (3 samples, 0.06%)</title>
            <rect x="526.2" y="259.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="529.2" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (2 samples, 0.04%)</title>
            <rect x="526.4" y="243.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="529.4" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.toBytes (11 samples, 0.22%)</title>
            <rect x="526.9" y="275.0" width="2.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="529.9" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (7 samples, 0.14%)</title>
            <rect x="527.4" y="259.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="530.4" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.04%)</title>
            <rect x="527.4" y="243.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="530.4" y="254.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title>
            <rect x="527.4" y="227.0" width="0.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="530.4" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (3 samples, 0.06%)</title>
            <rect x="528.1" y="243.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="531.1" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (2 samples, 0.04%)</title>
            <rect x="528.1" y="227.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="531.1" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (2 samples, 0.04%)</title>
            <rect x="529.1" y="259.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="532.1" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (5 samples, 0.10%)</title>
            <rect x="529.6" y="275.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="532.6" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (4 samples, 0.08%)</title>
            <rect x="529.8" y="259.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="532.8" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (4 samples, 0.08%)</title>
            <rect x="529.8" y="243.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="532.8" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.writeFully (256 samples, 5.23%)</title>
            <rect x="530.8" y="275.0" width="61.7" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="533.8" y="286.0">one/ni..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels$1.write (160 samples, 3.27%)</title>
            <rect x="531.0" y="259.0" width="38.6" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="534.0" y="270.0">jav..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFully (160 samples, 3.27%)</title>
            <rect x="531.0" y="243.0" width="38.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="534.0" y="254.0">jav..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFullyImpl (160 samples, 3.27%)</title>
            <rect x="531.0" y="227.0" width="38.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="534.0" y="238.0">jav..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (160 samples, 3.27%)</title>
            <rect x="531.0" y="211.0" width="38.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="534.0" y="222.0">sun..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (156 samples, 3.19%)</title>
            <rect x="531.0" y="195.0" width="37.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="534.0" y="206.0">sun..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (154 samples, 3.15%)</title>
            <rect x="531.3" y="179.0" width="37.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="534.3" y="190.0">sun..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (151 samples, 3.09%)</title>
            <rect x="531.3" y="163.0" width="36.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="534.3" y="174.0">sun..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (151 samples, 3.09%)</title>
            <rect x="531.3" y="147.0" width="36.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="534.3" y="158.0">sun..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (146 samples, 2.98%)</title>
            <rect x="532.5" y="131.0" width="35.2" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="535.5" y="142.0">sun..</text>
        </g>
        <g>
            <title>write (140 samples, 2.86%)</title>
            <rect x="533.9" y="115.0" width="33.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
            <text x="536.9" y="126.0">wr..</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (3 samples, 0.06%)</title>
            <rect x="567.7" y="163.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="570.7" y="174.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (3 samples, 0.06%)</title>
            <rect x="567.7" y="147.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="570.7" y="158.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.06%)</title>
            <rect x="567.7" y="131.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="570.7" y="142.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (3 samples, 0.06%)</title>
            <rect x="568.6" y="195.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="571.6" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (3 samples, 0.06%)</title>
            <rect x="568.6" y="179.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="571.6" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketAdaptor.getOutputStream (89 samples, 1.82%)</title>
            <rect x="569.6" y="259.0" width="21.5" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="572.6" y="270.0">s..</text>
        </g>
        <g>
            <title>java/security/AccessController.doPrivileged (88 samples, 1.80%)</title>
            <rect x="569.8" y="243.0" width="21.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="572.8" y="254.0">j..</text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (2 samples, 0.04%)</title>
            <rect x="569.8" y="227.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="572.8" y="238.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.04%)</title>
            <rect x="570.3" y="227.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="573.3" y="238.0"></text>
        </g>
        <g>
            <title>JVM_DoPrivileged (74 samples, 1.51%)</title>
            <rect x="570.8" y="227.0" width="17.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
            <text x="573.8" y="238.0"></text>
        </g>
        <g>
            <title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (3 samples, 0.06%)</title>
            <rect x="573.2" y="211.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="576.2" y="222.0"></text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (4 samples, 0.08%)</title>
            <rect x="574.2" y="211.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="577.2" y="222.0"></text>
        </g>
        <g>
            <title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode,
                Klass::PrivateLookupMode) const (6 samples, 0.12%)
            </title>
            <rect x="575.4" y="211.0" width="1.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="578.4" y="222.0"></text>
        </g>
        <g>
            <title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*,
                Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (6 samples, 0.12%)
            </title>
            <rect x="575.4" y="195.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="578.4" y="206.0"></text>
        </g>
        <g>
            <title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (5 samples, 0.10%)</title>
            <rect x="575.4" y="179.0" width="1.2" height="15" fill="#fd8080" rx="2" ry="2"/>
            <text x="578.4" y="190.0"></text>
        </g>
        <g>
            <title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (15 samples,
                0.31%)
            </title>
            <rect x="577.3" y="211.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="580.3" y="222.0"></text>
        </g>
        <g>
            <title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (7 samples,
                0.14%)
            </title>
            <rect x="578.3" y="195.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="581.3" y="206.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_block(Thread*) (3 samples, 0.06%)</title>
            <rect x="578.5" y="179.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="581.5" y="190.0"></text>
        </g>
        <g>
            <title>ThreadShadow::clear_pending_exception() (2 samples, 0.04%)</title>
            <rect x="579.5" y="179.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="582.5" y="190.0"></text>
        </g>
        <g>
            <title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (3 samples,
                0.06%)
            </title>
            <rect x="580.2" y="195.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="583.2" y="206.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (6 samples, 0.12%)</title>
            <rect x="581.2" y="211.0" width="1.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="584.2" y="222.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (4 samples, 0.08%)</title>
            <rect x="581.2" y="195.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="584.2" y="206.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.04%)</title>
            <rect x="581.2" y="179.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="584.2" y="190.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (2 samples, 0.04%)</title>
            <rect x="581.2" y="163.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="584.2" y="174.0"></text>
        </g>
        <g>
            <title>nmethod::is_zombie() const (2 samples, 0.04%)</title>
            <rect x="581.7" y="179.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="584.7" y="190.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (3 samples, 0.06%)
            </title>
            <rect x="582.9" y="211.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="585.9" y="222.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (2 samples, 0.04%)</title>
            <rect x="583.1" y="195.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="586.1" y="206.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (2 samples, 0.04%)</title>
            <rect x="583.8" y="211.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="586.8" y="222.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (18 samples, 0.37%)</title>
            <rect x="584.3" y="211.0" width="4.4" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="587.3" y="222.0"></text>
        </g>
        <g>
            <title>Method::is_ignored_by_security_stack_walk() const (9 samples, 0.18%)</title>
            <rect x="584.3" y="195.0" width="2.2" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="587.3" y="206.0"></text>
        </g>
        <g>
            <title>Klass::is_subclass_of(Klass const*) const (6 samples, 0.12%)</title>
            <rect x="585.0" y="179.0" width="1.5" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="588.0" y="190.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_next() (9 samples, 0.18%)</title>
            <rect x="586.5" y="195.0" width="2.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="589.5" y="206.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (3 samples, 0.06%)</title>
            <rect x="586.5" y="179.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="589.5" y="190.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (2 samples, 0.04%)</title>
            <rect x="586.7" y="163.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="589.7" y="174.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (6 samples, 0.12%)</title>
            <rect x="587.2" y="179.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="590.2" y="190.0"></text>
        </g>
        <g>
            <title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples,
                0.04%)
            </title>
            <rect x="587.9" y="163.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="590.9" y="174.0"></text>
        </g>
        <g>
            <title>PcDescCache::find_pc_desc(int, bool) (2 samples, 0.04%)</title>
            <rect x="587.9" y="147.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="590.9" y="158.0"></text>
        </g>
        <g>
            <title>call_stub (2 samples, 0.04%)</title>
            <rect x="589.6" y="227.0" width="0.5" height="15" fill="#f67777" rx="2" ry="2"/>
            <text x="592.6" y="238.0"></text>
        </g>
        <g>
            <title>methodHandle::~methodHandle() (3 samples, 0.06%)</title>
            <rect x="590.1" y="227.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="593.1" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.socket (6 samples, 0.12%)</title>
            <rect x="591.1" y="259.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="594.1" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.borrowObject (4 samples, 0.08%)</title>
            <rect x="592.5" y="275.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="595.5" y="286.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.pollFirst (3 samples, 0.06%)</title>
            <rect x="592.8" y="259.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="595.8" y="270.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.unlinkFirst (3 samples, 0.06%)</title>
            <rect x="592.8" y="243.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="595.8" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.returnObject (4 samples, 0.08%)</title>
            <rect x="593.5" y="275.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="596.5" y="286.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.addFirst (3 samples, 0.06%)</title>
            <rect x="593.7" y="259.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="596.7" y="270.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.linkFirst (3 samples, 0.06%)</title>
            <rect x="593.7" y="243.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="596.7" y="254.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList$Node.&lt;init&gt; (2 samples, 0.04%)</title>
            <rect x="594.0" y="227.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="597.0" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$80/897481377.act (248 samples, 5.07%)</title>
            <rect x="594.5" y="355.0" width="59.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="597.5" y="366.0">ru/mai..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$entity$1 (244 samples, 4.99%)</title>
            <rect x="595.4" y="339.0" width="58.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="598.4" y="350.0">ru/mai..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.get (244 samples, 4.99%)</title>
            <rect x="595.4" y="323.0" width="58.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="598.4" y="334.0">ru/mai..</text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.get (244 samples, 4.99%)</title>
            <rect x="595.4" y="307.0" width="58.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="598.4" y="318.0">ru/mai..</text>
        </g>
        <g>
            <title>com/google/common/collect/TransformedIterator.hasNext (26 samples, 0.53%)</title>
            <rect x="595.4" y="291.0" width="6.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="598.4" y="302.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (26 samples, 0.53%)</title>
            <rect x="595.4" y="275.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="598.4" y="286.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (26 samples, 0.53%)</title>
            <rect x="595.4" y="259.0" width="6.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="598.4" y="270.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (26 samples, 0.53%)</title>
            <rect x="595.4" y="243.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="598.4" y="254.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (26 samples, 0.53%)</title>
            <rect x="595.4" y="227.0" width="6.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="598.4" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 0.41%)</title>
            <rect x="596.9" y="211.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="599.9" y="222.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.hasNext (7 samples, 0.14%)</title>
            <rect x="596.9" y="195.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="599.9" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (7 samples, 0.14%)</title>
            <rect x="596.9" y="179.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="599.9" y="190.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (7 samples, 0.14%)</title>
            <rect x="596.9" y="163.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="599.9" y="174.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (7 samples, 0.14%)</title>
            <rect x="596.9" y="147.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="599.9" y="158.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.14%)</title>
            <rect x="596.9" y="131.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="599.9" y="142.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.06%)</title>
            <rect x="597.1" y="115.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="600.1" y="126.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (3 samples, 0.06%)</title>
            <rect x="597.1" y="99.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="600.1" y="110.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.equals (3 samples, 0.06%)</title>
            <rect x="597.8" y="115.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="600.8" y="126.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (2 samples, 0.04%)</title>
            <rect x="598.1" y="99.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="601.1" y="110.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (12 samples, 0.25%)</title>
            <rect x="598.6" y="195.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="601.6" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.next (11 samples, 0.22%)</title>
            <rect x="598.6" y="179.0" width="2.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="601.6" y="190.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (9 samples, 0.18%)</title>
            <rect x="598.6" y="163.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="601.6" y="174.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (9 samples, 0.18%)</title>
            <rect x="598.6" y="147.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="601.6" y="158.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (6 samples, 0.12%)</title>
            <rect x="599.3" y="131.0" width="1.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="602.3" y="142.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.08%)</title>
            <rect x="599.8" y="115.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="602.8" y="126.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.add (3 samples, 0.06%)</title>
            <rect x="600.0" y="99.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="603.0" y="110.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/Item.isRemoved (2 samples, 0.04%)</title>
            <rect x="600.7" y="163.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="603.7" y="174.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.equals (9 samples, 0.18%)</title>
            <rect x="601.9" y="291.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="604.9" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (9 samples, 0.18%)</title>
            <rect x="601.9" y="275.0" width="2.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="604.9" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (2 samples, 0.04%)</title>
            <rect x="603.6" y="259.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="606.6" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.iterator (206 samples, 4.21%)</title>
            <rect x="604.6" y="291.0" width="49.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="607.6" y="302.0">ru/ma..</text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.itemIterator (206 samples, 4.21%)</title>
            <rect x="604.6" y="275.0" width="49.7" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="607.6" y="286.0">ru/ma..</text>
        </g>
        <g>
            <title>java/util/ArrayList.&lt;init&gt; (3 samples, 0.06%)</title>
            <rect x="604.8" y="259.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="607.8" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (4 samples, 0.08%)</title>
            <rect x="605.5" y="259.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="608.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (4 samples, 0.08%)</title>
            <rect x="605.5" y="243.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="608.5" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.04%)</title>
            <rect x="606.0" y="227.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="609.0" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.04%)</title>
            <rect x="606.5" y="259.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="609.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (2 samples, 0.04%)</title>
            <rect x="606.5" y="243.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="609.5" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (2 samples, 0.04%)</title>
            <rect x="606.5" y="227.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="609.5" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/IteratorUtils.itersTransform (24 samples, 0.49%)</title>
            <rect x="607.0" y="259.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="610.0" y="270.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators.mergeSorted (20 samples, 0.41%)</title>
            <rect x="607.0" y="243.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="610.0" y="254.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (20 samples, 0.41%)</title>
            <rect x="607.0" y="227.0" width="4.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="610.0" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (16 samples, 0.33%)</title>
            <rect x="607.7" y="211.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="610.7" y="222.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (16 samples, 0.33%)</title>
            <rect x="607.7" y="195.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="610.7" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (15 samples, 0.31%)</title>
            <rect x="608.0" y="179.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="611.0" y="190.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (15 samples, 0.31%)</title>
            <rect x="608.0" y="163.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="611.0" y="174.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (13 samples, 0.27%)</title>
            <rect x="608.2" y="147.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="611.2" y="158.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.hasNext (4 samples, 0.08%)</title>
            <rect x="608.2" y="131.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="611.2" y="142.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (4 samples, 0.08%)</title>
            <rect x="608.2" y="115.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="611.2" y="126.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (4 samples, 0.08%)</title>
            <rect x="608.2" y="99.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="611.2" y="110.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (4 samples, 0.08%)</title>
            <rect x="608.2" y="83.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="611.2" y="94.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (4 samples, 0.08%)</title>
            <rect x="608.2" y="67.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="611.2" y="78.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (8 samples, 0.16%)</title>
            <rect x="609.2" y="131.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="612.2" y="142.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.next (7 samples, 0.14%)</title>
            <rect x="609.4" y="115.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="612.4" y="126.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (7 samples, 0.14%)</title>
            <rect x="609.4" y="99.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="612.4" y="110.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (6 samples, 0.12%)</title>
            <rect x="609.6" y="83.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="612.6" y="94.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (2 samples, 0.04%)</title>
            <rect x="610.6" y="67.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="613.6" y="78.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters.collapseEquals (4 samples, 0.08%)</title>
            <rect x="611.8" y="243.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="614.8" y="254.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (4 samples, 0.08%)</title>
            <rect x="611.8" y="227.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="614.8" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.08%)</title>
            <rect x="611.8" y="211.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="614.8" y="222.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.06%)</title>
            <rect x="611.8" y="195.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="614.8" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.06%)</title>
            <rect x="611.8" y="179.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="614.8" y="190.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.06%)</title>
            <rect x="611.8" y="163.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="614.8" y="174.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.06%)</title>
            <rect x="611.8" y="147.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="614.8" y="158.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.06%)</title>
            <rect x="611.8" y="131.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="614.8" y="142.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.04%)</title>
            <rect x="611.8" y="115.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="614.8" y="126.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (2 samples, 0.04%)</title>
            <rect x="611.8" y="99.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="614.8" y="110.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTablePool.iterator (172 samples, 3.52%)</title>
            <rect x="612.8" y="259.0" width="41.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="615.8" y="270.0">ru/..</text>
        </g>
        <g>
            <title>java/util/ArrayList.add (3 samples, 0.06%)</title>
            <rect x="613.0" y="243.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="616.0" y="254.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.add (3 samples, 0.06%)</title>
            <rect x="613.0" y="227.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="616.0" y="238.0"></text>
        </g>
        <g>
            <title>java/util/Objects.requireNonNull (2 samples, 0.04%)</title>
            <rect x="613.7" y="243.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="616.7" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (3 samples, 0.06%)</title>
            <rect x="614.2" y="243.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="617.2" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (2 samples, 0.04%)</title>
            <rect x="615.0" y="243.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="618.0" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (2 samples, 0.04%)</title>
            <rect x="615.0" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="618.0" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (2 samples, 0.04%)</title>
            <rect x="615.0" y="211.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="618.0" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (34 samples, 0.70%)</title>
            <rect x="615.4" y="243.0" width="8.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="618.4" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (34 samples, 0.70%)</title>
            <rect x="615.4" y="227.0" width="8.2" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="618.4" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (34 samples, 0.70%)</title>
            <rect x="615.4" y="211.0" width="8.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="618.4" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (33 samples, 0.67%)</title>
            <rect x="615.7" y="195.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="618.7" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/Object.&lt;init&gt; (2 samples, 0.04%)</title>
            <rect x="620.7" y="179.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="623.7" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (3 samples, 0.06%)</title>
            <rect x="621.2" y="179.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="624.2" y="190.0"></text>
        </g>
        <g>
            <title>jbyte_arraycopy (3 samples, 0.06%)</title>
            <rect x="622.4" y="179.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="625.4" y="190.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title>
            <rect x="623.2" y="179.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="626.2" y="190.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/IteratorUtils.itersTransform (13 samples, 0.27%)</title>
            <rect x="623.6" y="243.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="626.6" y="254.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators.mergeSorted (8 samples, 0.16%)</title>
            <rect x="623.6" y="227.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="626.6" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (8 samples, 0.16%)</title>
            <rect x="623.6" y="211.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="626.6" y="222.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList$Itr.next (2 samples, 0.04%)</title>
            <rect x="624.4" y="195.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="627.4" y="206.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList$Itr.checkForComodification (2 samples, 0.04%)</title>
            <rect x="624.4" y="179.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="627.4" y="190.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.06%)</title>
            <rect x="624.8" y="195.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="627.8" y="206.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters.collapseEquals (5 samples, 0.10%)</title>
            <rect x="625.6" y="227.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="628.6" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (5 samples, 0.10%)</title>
            <rect x="625.6" y="211.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="628.6" y="222.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (4 samples, 0.08%)</title>
            <rect x="625.8" y="195.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="628.8" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (4 samples, 0.08%)</title>
            <rect x="625.8" y="179.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="628.8" y="190.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (3 samples, 0.06%)</title>
            <rect x="626.1" y="163.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="629.1" y="174.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (3 samples, 0.06%)</title>
            <rect x="626.1" y="147.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="629.1" y="158.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTable.iterator (114 samples, 2.33%)</title>
            <rect x="626.8" y="243.0" width="27.5" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="629.8" y="254.0">r..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap.values (8 samples, 0.16%)</title>
            <rect x="627.7" y="227.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="630.7" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.04%)</title>
            <rect x="628.9" y="211.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="631.9" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (102 samples, 2.09%)</title>
            <rect x="629.7" y="227.0" width="24.6" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="632.7" y="238.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (98 samples,
                2.00%)
            </title>
            <rect x="630.4" y="211.0" width="23.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="633.4" y="222.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (98 samples, 2.00%)</title>
            <rect x="630.4" y="195.0" width="23.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="633.4" y="206.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (95 samples, 1.94%)</title>
            <rect x="631.1" y="179.0" width="22.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="634.1" y="190.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.findNear (95 samples, 1.94%)</title>
            <rect x="631.1" y="163.0" width="22.9" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="634.1" y="174.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.14%)</title>
            <rect x="632.1" y="147.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="635.1" y="158.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (7 samples, 0.14%)</title>
            <rect x="632.1" y="131.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="635.1" y="142.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (7 samples, 0.14%)</title>
            <rect x="632.1" y="115.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="635.1" y="126.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (7 samples, 0.14%)</title>
            <rect x="632.1" y="99.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="635.1" y="110.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (3 samples, 0.06%)</title>
            <rect x="633.0" y="83.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="636.0" y="94.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (3 samples, 0.06%)</title>
            <rect x="633.0" y="67.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="636.0" y="78.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (84 samples, 1.72%)</title>
            <rect x="633.8" y="147.0" width="20.2" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="636.8" y="158.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.cpr (24 samples, 0.49%)</title>
            <rect x="648.2" y="131.0" width="5.8" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="651.2" y="142.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (24 samples, 0.49%)</title>
            <rect x="648.2" y="115.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="651.2" y="126.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (24 samples, 0.49%)</title>
            <rect x="648.2" y="99.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="651.2" y="110.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (24 samples, 0.49%)</title>
            <rect x="648.2" y="83.0" width="5.8" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="651.2" y="94.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (10 samples, 0.20%)</title>
            <rect x="651.6" y="67.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="654.6" y="78.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (10 samples, 0.20%)</title>
            <rect x="651.6" y="51.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="654.6" y="62.0"></text>
        </g>
        <g>
            <title>one/nio/server/AcceptorThread.run (3 samples, 0.06%)</title>
            <rect x="654.3" y="435.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="657.3" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/net/Socket.acceptNonBlocking (3 samples, 0.06%)</title>
            <rect x="654.3" y="419.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="657.3" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaServerSocket.accept (3 samples, 0.06%)</title>
            <rect x="654.3" y="403.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="657.3" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaServerSocket.accept (3 samples, 0.06%)</title>
            <rect x="654.3" y="387.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="657.3" y="398.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept (3 samples, 0.06%)</title>
            <rect x="654.3" y="371.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="657.3" y="382.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept (3 samples, 0.06%)</title>
            <rect x="654.3" y="355.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="657.3" y="366.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept0 (3 samples, 0.06%)</title>
            <rect x="654.3" y="339.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="657.3" y="350.0"></text>
        </g>
        <g>
            <title>accept (2 samples, 0.04%)</title>
            <rect x="654.5" y="323.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
            <text x="657.5" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/server/SelectorThread.run (2,185 samples, 44.66%)</title>
            <rect x="655.0" y="435.0" width="527.0" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="658.0" y="446.0">one/nio/server/SelectorThread.run</text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.04%)
            </title>
            <rect x="657.9" y="419.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="660.9" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (2 samples, 0.04%)</title>
            <rect x="657.9" y="403.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="660.9" y="414.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (2 samples, 0.04%)</title>
            <rect x="657.9" y="387.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
            <text x="660.9" y="398.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector$1.hasNext (7 samples, 0.14%)</title>
            <rect x="658.6" y="419.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="661.6" y="430.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.06%)
            </title>
            <rect x="659.3" y="403.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="662.3" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.06%)</title>
            <rect x="659.3" y="387.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="662.3" y="398.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (3 samples, 0.06%)</title>
            <rect x="659.3" y="371.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="662.3" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.select (1,209 samples, 24.71%)</title>
            <rect x="660.3" y="419.0" width="291.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="663.3" y="430.0">one/nio/net/JavaSelector.select</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (2 samples, 0.04%)</title>
            <rect x="660.8" y="403.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="663.8" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.iteratorFor (12 samples, 0.25%)</title>
            <rect x="661.3" y="403.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="664.3" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.registerPendingSessions (5 samples, 0.10%)</title>
            <rect x="664.2" y="403.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="667.2" y="414.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelectableChannel.register (5 samples, 0.10%)</title>
            <rect x="664.2" y="387.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="667.2" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (4 samples, 0.08%)</title>
            <rect x="665.4" y="403.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="668.4" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.select (1,177 samples, 24.06%)</title>
            <rect x="666.6" y="403.0" width="283.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="669.6" y="414.0">sun/nio/ch/SelectorImpl.select</text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,177 samples, 24.06%)</title>
            <rect x="666.6" y="387.0" width="283.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="669.6" y="398.0">sun/nio/ch/SelectorImpl.lockAndDoSelect</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,172 samples, 23.96%)</title>
            <rect x="667.8" y="371.0" width="282.7" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="670.8" y="382.0">sun/nio/ch/KQueueSelectorImpl.doSelect</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueue.poll (1,054 samples, 21.55%)</title>
            <rect x="669.7" y="355.0" width="254.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="672.7" y="366.0">sun/nio/ch/KQueue.poll</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_KQueue_poll (12 samples, 0.25%)</title>
            <rect x="684.4" y="339.0" width="2.9" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="687.4" y="350.0"></text>
        </g>
        <g>
            <title>kevent (981 samples, 20.05%)</title>
            <rect x="687.3" y="339.0" width="236.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="690.3" y="350.0">kevent</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processEvents (62 samples, 1.27%)</title>
            <rect x="923.9" y="355.0" width="15.0" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="926.9" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.valueOf (2 samples, 0.04%)</title>
            <rect x="924.7" y="339.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="927.7" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (9 samples, 0.18%)</title>
            <rect x="925.2" y="339.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="928.2" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (5 samples, 0.10%)</title>
            <rect x="925.2" y="323.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="928.2" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (4 samples, 0.08%)</title>
            <rect x="926.4" y="323.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="929.4" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.hashCode (3 samples, 0.06%)</title>
            <rect x="926.6" y="307.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="929.6" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.put (4 samples, 0.08%)</title>
            <rect x="927.3" y="339.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="930.3" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueue.getFilter (3 samples, 0.06%)</title>
            <rect x="928.3" y="339.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="931.3" y="350.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.getShort (3 samples, 0.06%)</title>
            <rect x="928.3" y="323.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="931.3" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processReadyEvents (41 samples, 0.84%)</title>
            <rect x="929.0" y="339.0" width="9.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="932.0" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.add (30 samples, 0.61%)</title>
            <rect x="929.0" y="323.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="932.0" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.put (30 samples, 0.61%)</title>
            <rect x="929.0" y="307.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="932.0" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.putVal (30 samples, 0.61%)</title>
            <rect x="929.0" y="291.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="932.0" y="302.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.afterNodeInsertion (3 samples, 0.06%)</title>
            <rect x="930.2" y="275.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="933.2" y="286.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.newNode (18 samples, 0.37%)</title>
            <rect x="930.9" y="275.0" width="4.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="933.9" y="286.0"></text>
        </g>
        <g>
            <title>vtable stub (4 samples, 0.08%)</title>
            <rect x="935.3" y="275.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="938.3" y="286.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectionKeyImpl.nioReadyOps (2 samples, 0.04%)</title>
            <rect x="936.5" y="323.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="939.5" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (8 samples, 0.16%)</title>
            <rect x="937.0" y="323.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="940.0" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (3 samples, 0.06%)</title>
            <rect x="938.2" y="307.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="941.2" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.translateReadyOps (3 samples, 0.06%)</title>
            <rect x="938.2" y="291.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="941.2" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.isConnected (3 samples, 0.06%)</title>
            <rect x="938.2" y="275.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="941.2" y="286.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (32 samples, 0.65%)</title>
            <rect x="938.9" y="355.0" width="7.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="941.9" y="366.0"></text>
        </g>
        <g>
            <title>java/util/ArrayDeque.pollFirst (26 samples, 0.53%)</title>
            <rect x="940.3" y="339.0" width="6.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="943.3" y="350.0"></text>
        </g>
        <g>
            <title>java/util/ArrayDeque.elementAt (3 samples, 0.06%)</title>
            <rect x="945.4" y="323.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="948.4" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processEvents (2 samples, 0.04%)</title>
            <rect x="946.1" y="323.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="949.1" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.begin (4 samples, 0.08%)</title>
            <rect x="946.6" y="355.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="949.6" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.begin (4 samples, 0.08%)</title>
            <rect x="946.6" y="339.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="949.6" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.04%)</title>
            <rect x="947.1" y="323.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="950.1" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.end (4 samples, 0.08%)</title>
            <rect x="947.6" y="355.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="950.6" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.end (4 samples, 0.08%)</title>
            <rect x="947.6" y="339.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="950.6" y="350.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.08%)</title>
            <rect x="947.6" y="323.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="950.6" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (4 samples, 0.08%)</title>
            <rect x="947.6" y="307.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="950.6" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (4 samples, 0.08%)</title>
            <rect x="947.6" y="291.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="950.6" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (8 samples, 0.16%)</title>
            <rect x="948.5" y="355.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="951.5" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.cancelledKeys (3 samples, 0.06%)</title>
            <rect x="949.3" y="339.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="952.3" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeyIterator.next (2 samples, 0.04%)</title>
            <rect x="950.0" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="953.0" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.nextNode (2 samples, 0.04%)</title>
            <rect x="950.0" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="953.0" y="334.0"></text>
        </g>
        <g>
            <title>svcudp_op (5 samples, 0.10%)</title>
            <rect x="950.7" y="403.0" width="1.2" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="953.7" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.process (950 samples, 19.42%)</title>
            <rect x="951.9" y="419.0" width="229.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="954.9" y="430.0">one/nio/net/Session.process</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (2 samples, 0.04%)</title>
            <rect x="953.4" y="403.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="956.4" y="414.0"></text>
        </g>
        <g>
            <title>gettimeofday (2 samples, 0.04%)</title>
            <rect x="953.9" y="403.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
            <text x="956.9" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processRead (931 samples, 19.03%)</title>
            <rect x="954.3" y="403.0" width="224.6" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="957.3" y="414.0">one/nio/http/HttpSession.proce..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processHttpBuffer (650 samples, 13.29%)</title>
            <rect x="955.8" y="387.0" width="156.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="958.8" y="398.0">one/nio/http/HttpSes..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.handleParsedRequest (589 samples, 12.04%)</title>
            <rect x="958.4" y="371.0" width="142.1" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="961.4" y="382.0">one/nio/http/HttpS..</text>
        </g>
        <g>
            <title>one/nio/http/HttpServer.handleRequest (586 samples, 11.98%)</title>
            <rect x="959.2" y="355.0" width="141.3" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="962.2" y="366.0">one/nio/http/HttpS..</text>
        </g>
        <g>
            <title>RequestHandler1_entity.handleRequest (540 samples, 11.04%)</title>
            <rect x="959.4" y="339.0" width="130.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="962.4" y="350.0">RequestHandler1_..</text>
        </g>
        <g>
            <title>one/nio/http/Request.getParameter (24 samples, 0.49%)</title>
            <rect x="959.6" y="323.0" width="5.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="962.6" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.04%)</title>
            <rect x="962.8" y="307.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="965.8" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (2 samples, 0.04%)</title>
            <rect x="962.8" y="291.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="965.8" y="302.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.04%)</title>
            <rect x="963.5" y="307.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="966.5" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/URLEncoder.decode (6 samples, 0.12%)</title>
            <rect x="964.0" y="307.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="967.0" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.entity (515 samples, 10.53%)</title>
            <rect x="965.4" y="323.0" width="124.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="968.4" y="334.0">ru/mail/polis/s..</text>
        </g>
        <g>
            <title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (5 samples, 0.10%)</title>
            <rect x="967.4" y="307.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="970.4" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5 samples, 0.10%)</title>
            <rect x="967.4" y="291.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="970.4" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/993411733.get$Lambda (5 samples, 0.10%)</title>
            <rect x="967.4" y="275.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="970.4" y="286.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/993411733.&lt;init&gt; (5 samples, 0.10%)</title>
            <rect x="967.4" y="259.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="970.4" y="270.0"></text>
        </g>
        <g>
            <title>jlong_disjoint_arraycopy (3 samples, 0.06%)</title>
            <rect x="967.8" y="243.0" width="0.8" height="15" fill="#e15b5b" rx="2" ry="2"/>
            <text x="970.8" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (15 samples, 0.31%)</title>
            <rect x="968.6" y="307.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="971.6" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (13 samples, 0.27%)</title>
            <rect x="969.1" y="291.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="972.1" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (13 samples, 0.27%)</title>
            <rect x="969.1" y="275.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="972.1" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (13 samples, 0.27%)</title>
            <rect x="969.1" y="259.0" width="3.1" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="972.1" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (11 samples, 0.22%)</title>
            <rect x="969.5" y="243.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="972.5" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (6 samples, 0.12%)</title>
            <rect x="969.5" y="227.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="972.5" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (5 samples, 0.10%)</title>
            <rect x="969.5" y="211.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="972.5" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.limit (5 samples, 0.10%)</title>
            <rect x="969.5" y="195.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="972.5" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (5 samples, 0.10%)</title>
            <rect x="971.0" y="227.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="974.0" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (4 samples, 0.08%)</title>
            <rect x="971.2" y="211.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="974.2" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.position (2 samples, 0.04%)</title>
            <rect x="971.7" y="195.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="974.7" y="206.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (2 samples, 0.04%)</title>
            <rect x="971.7" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="974.7" y="190.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.isMe (7 samples, 0.14%)</title>
            <rect x="972.2" y="307.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="975.2" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.isMe (7 samples, 0.14%)</title>
            <rect x="972.2" y="291.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="975.2" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.equals (7 samples, 0.14%)</title>
            <rect x="972.2" y="275.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="975.2" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.isLatin1 (4 samples, 0.08%)</title>
            <rect x="972.9" y="259.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="975.9" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.primaryFor (2 samples, 0.04%)</title>
            <rect x="973.9" y="307.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="976.9" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.primaryFor (2 samples, 0.04%)</title>
            <rect x="973.9" y="291.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="976.9" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.executeAsync (478 samples, 9.77%)</title>
            <rect x="974.4" y="307.0" width="115.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="977.4" y="318.0">ru/mail/polis/..</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.execute (478 samples, 9.77%)</title>
            <rect x="974.4" y="291.0" width="115.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="977.4" y="302.0">java/util/conc..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (478 samples, 9.77%)</title>
            <rect x="974.4" y="275.0" width="115.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="977.4" y="286.0">java/util/conc..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (461 samples, 9.42%)</title>
            <rect x="974.4" y="259.0" width="111.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="977.4" y="270.0">java/util/con..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (461 samples, 9.42%)</title>
            <rect x="974.4" y="243.0" width="111.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="977.4" y="254.0">java/util/con..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (461 samples, 9.42%)</title>
            <rect x="974.4" y="227.0" width="111.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="977.4" y="238.0">java/util/con..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (461 samples, 9.42%)</title>
            <rect x="974.4" y="211.0" width="111.2" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="977.4" y="222.0">java/util/con..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (449 samples, 9.18%)</title>
            <rect x="977.3" y="195.0" width="108.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="980.3" y="206.0">java/util/con..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (449 samples, 9.18%)</title>
            <rect x="977.3" y="179.0" width="108.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="980.3" y="190.0">jdk/internal/..</text>
        </g>
        <g>
            <title>HandleMarkCleaner::HandleMarkCleaner(Thread*) (2 samples, 0.04%)</title>
            <rect x="979.2" y="163.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="982.2" y="174.0"></text>
        </g>
        <g>
            <title>HandleMarkCleaner::~HandleMarkCleaner() (10 samples, 0.20%)</title>
            <rect x="979.7" y="163.0" width="2.4" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="982.7" y="174.0"></text>
        </g>
        <g>
            <title>Parker::unpark() (3 samples, 0.06%)</title>
            <rect x="982.1" y="163.0" width="0.7" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="985.1" y="174.0"></text>
        </g>
        <g>
            <title>Thread::current() (3 samples, 0.06%)</title>
            <rect x="982.8" y="163.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="985.8" y="174.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (2
                samples, 0.04%)
            </title>
            <rect x="983.8" y="163.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="986.8" y="174.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (415 samples, 8.48%)</title>
            <rect x="984.7" y="163.0" width="100.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
            <text x="987.7" y="174.0">Unsafe_Unpar..</text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.04%)
            </title>
            <rect x="985.7" y="147.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="988.7" y="158.0"></text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (11 samples, 0.22%)</title>
            <rect x="986.4" y="147.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="989.4" y="158.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (9 samples, 0.18%)</title>
            <rect x="986.9" y="131.0" width="2.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="989.9" y="142.0"></text>
        </g>
        <g>
            <title>HandleMarkCleaner::~HandleMarkCleaner() (2 samples, 0.04%)</title>
            <rect x="989.1" y="147.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="992.1" y="158.0"></text>
        </g>
        <g>
            <title>Thread::last_handle_mark() const (2 samples, 0.04%)</title>
            <rect x="989.1" y="131.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="992.1" y="142.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (5 samples, 0.10%)</title>
            <rect x="990.0" y="147.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="993.0" y="158.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (5 samples, 0.10%)</title>
            <rect x="990.0" y="131.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="993.0" y="142.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.08%)</title>
            <rect x="990.3" y="115.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="993.3" y="126.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (4 samples, 0.08%)
            </title>
            <rect x="990.3" y="99.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="993.3" y="110.0"></text>
        </g>
        <g>
            <title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (3 samples,
                0.06%)
            </title>
            <rect x="990.5" y="83.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="993.5" y="94.0"></text>
        </g>
        <g>
            <title>Thread::current() (13 samples, 0.27%)</title>
            <rect x="991.5" y="147.0" width="3.1" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="994.5" y="158.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (4 samples, 0.08%)</title>
            <rect x="991.5" y="131.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="994.5" y="142.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (9 samples, 0.18%)</title>
            <rect x="992.4" y="131.0" width="2.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="995.4" y="142.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (12
                samples, 0.25%)
            </title>
            <rect x="994.9" y="147.0" width="2.9" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="997.9" y="158.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.04%)</title>
            <rect x="994.9" y="131.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="997.9" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (8 samples, 0.16%)</title>
            <rect x="995.3" y="131.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="998.3" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (7 samples, 0.14%)</title>
            <rect x="995.6" y="115.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="998.6" y="126.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (6
                samples, 0.12%)
            </title>
            <rect x="995.8" y="99.0" width="1.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="998.8" y="110.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (5 samples, 0.10%)
            </title>
            <rect x="995.8" y="83.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="998.8" y="94.0"></text>
        </g>
        <g>
            <title>ScopedFence&lt;(ScopedFenceType)0&gt;::ScopedFence(void*) (3 samples, 0.06%)</title>
            <rect x="995.8" y="67.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="998.8" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (2 samples, 0.04%)
            </title>
            <rect x="996.5" y="67.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="999.5" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples,
                0.04%)
            </title>
            <rect x="996.5" y="51.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="999.5" y="62.0"></text>
        </g>
        <g>
            <title>mask_bits_are_true(long, long) (2 samples, 0.04%)</title>
            <rect x="997.3" y="131.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="1000.3" y="142.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (10 samples, 0.20%)
            </title>
            <rect x="997.8" y="147.0" width="2.4" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="1000.8" y="158.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.04%)</title>
            <rect x="997.8" y="131.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="1000.8" y="142.0"></text>
        </g>
        <g>
            <title>os::is_MP() (2 samples, 0.04%)</title>
            <rect x="997.8" y="115.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1000.8" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (6 samples, 0.12%)</title>
            <rect x="998.2" y="131.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1001.2" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (5 samples, 0.10%)</title>
            <rect x="998.5" y="115.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1001.5" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.10%)</title>
            <rect x="998.5" y="99.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="1001.5" y="110.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5
                samples, 0.10%)
            </title>
            <rect x="998.5" y="83.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1001.5" y="94.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.06%)
            </title>
            <rect x="998.5" y="67.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1001.5" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (2 samples, 0.04%)
            </title>
            <rect x="998.7" y="51.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1001.7" y="62.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples,
                0.04%)
            </title>
            <rect x="998.7" y="35.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1001.7" y="46.0"></text>
        </g>
        <g>
            <title>os::is_MP() (2 samples, 0.04%)</title>
            <rect x="999.7" y="131.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1002.7" y="142.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (13 samples,
                0.27%)
            </title>
            <rect x="1000.4" y="147.0" width="3.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1003.4" y="158.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (3 samples, 0.06%)</title>
            <rect x="1002.8" y="131.0" width="0.7" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1005.8" y="142.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (305 samples, 6.23%)</title>
            <rect x="1003.8" y="147.0" width="73.6" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="1006.8" y="158.0">__psynch..</text>
        </g>
        <g>
            <title>_pthread_cond_updateval (3 samples, 0.06%)</title>
            <rect x="1077.4" y="147.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
            <text x="1080.4" y="158.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::thread(oopDesc*) (8 samples, 0.16%)</title>
            <rect x="1078.1" y="147.0" width="1.9" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1081.1" y="158.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (5 samples, 0.10%)</title>
            <rect x="1080.2" y="147.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="1083.2" y="158.0"></text>
        </g>
        <g>
            <title>pthread_dependency_wait_np.cold.3 (3 samples, 0.06%)</title>
            <rect x="1081.5" y="147.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="1084.5" y="158.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (11 samples, 0.22%)</title>
            <rect x="1082.2" y="147.0" width="2.6" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="1085.2" y="158.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (3 samples, 0.06%)</title>
            <rect x="1084.8" y="163.0" width="0.8" height="15" fill="#f37373" rx="2" ry="2"/>
            <text x="1087.8" y="174.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.06%)</title>
            <rect x="1085.6" y="259.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="1088.6" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.06%)</title>
            <rect x="1085.6" y="243.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1088.6" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.06%)</title>
            <rect x="1085.6" y="227.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1088.6" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (14 samples, 0.29%)</title>
            <rect x="1086.3" y="259.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1089.3" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (14 samples, 0.29%)</title>
            <rect x="1086.3" y="243.0" width="3.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1089.3" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (14 samples, 0.29%)</title>
            <rect x="1086.3" y="227.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1089.3" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/PathMapper.find (21 samples, 0.43%)</title>
            <rect x="1089.7" y="339.0" width="5.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1092.7" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (21 samples, 0.43%)</title>
            <rect x="1089.7" y="323.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="1092.7" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (8 samples, 0.16%)</title>
            <rect x="1089.7" y="307.0" width="1.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1092.7" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (13 samples, 0.27%)</title>
            <rect x="1091.6" y="307.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1094.6" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.hashCode (13 samples, 0.27%)</title>
            <rect x="1091.6" y="291.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1094.6" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.hashCode (13 samples, 0.27%)</title>
            <rect x="1091.6" y="275.0" width="3.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1094.6" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getPath (24 samples, 0.49%)</title>
            <rect x="1094.7" y="339.0" width="5.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1097.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (24 samples, 0.49%)</title>
            <rect x="1094.7" y="323.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1097.7" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (24 samples, 0.49%)</title>
            <rect x="1094.7" y="307.0" width="5.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1097.7" y="318.0"></text>
        </g>
        <g>
            <title>RequestHandler1_entity.handleRequest (9 samples, 0.18%)</title>
            <rect x="1095.2" y="291.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1098.2" y="302.0"></text>
        </g>
        <g>
            <title>itable stub (13 samples, 0.27%)</title>
            <rect x="1097.4" y="291.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
            <text x="1100.4" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.parseRequest (39 samples, 0.80%)</title>
            <rect x="1100.5" y="371.0" width="9.4" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1103.5" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.10%)</title>
            <rect x="1102.2" y="355.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1105.2" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (5 samples, 0.10%)</title>
            <rect x="1102.2" y="339.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1105.2" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (5 samples, 0.10%)</title>
            <rect x="1102.2" y="323.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1105.2" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (25 samples, 0.51%)</title>
            <rect x="1103.4" y="355.0" width="6.0" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1106.4" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (25 samples, 0.51%)</title>
            <rect x="1103.4" y="339.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1106.4" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.startsWith (2 samples, 0.04%)</title>
            <rect x="1109.4" y="355.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1112.4" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (5 samples, 0.10%)</title>
            <rect x="1109.9" y="371.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1112.9" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeaderCount (2 samples, 0.04%)</title>
            <rect x="1111.1" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1114.1" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (4 samples, 0.08%)</title>
            <rect x="1111.6" y="371.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1114.6" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (4 samples, 0.08%)</title>
            <rect x="1111.6" y="355.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1114.6" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.read (275 samples, 5.62%)</title>
            <rect x="1112.6" y="387.0" width="66.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1115.6" y="398.0">one/nio..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (270 samples, 5.52%)</title>
            <rect x="1112.8" y="371.0" width="65.1" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1115.8" y="382.0">one/nio..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (5 samples, 0.10%)</title>
            <rect x="1113.1" y="355.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1116.1" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.04%)</title>
            <rect x="1113.8" y="339.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1116.8" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (264 samples, 5.40%)</title>
            <rect x="1114.3" y="355.0" width="63.6" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1117.3" y="366.0">sun/nio..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.12%)</title>
            <rect x="1115.7" y="339.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1118.7" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.12%)</title>
            <rect x="1115.7" y="323.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="1118.7" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (6 samples, 0.12%)</title>
            <rect x="1115.7" y="307.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1118.7" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (6 samples, 0.12%)</title>
            <rect x="1115.7" y="291.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1118.7" y="302.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.04%)</title>
            <rect x="1116.2" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1119.2" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.04%)</title>
            <rect x="1116.2" y="259.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1119.2" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.04%)</title>
            <rect x="1116.2" y="243.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1119.2" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.getState (2 samples, 0.04%)</title>
            <rect x="1116.7" y="275.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1119.7" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.04%)</title>
            <rect x="1117.2" y="339.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1120.2" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.04%)</title>
            <rect x="1117.2" y="323.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1120.2" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (249 samples, 5.09%)</title>
            <rect x="1117.6" y="339.0" width="60.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1120.6" y="350.0">sun/ni..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (249 samples, 5.09%)</title>
            <rect x="1117.6" y="323.0" width="60.1" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="1120.6" y="334.0">sun/ni..</text>
        </g>
        <g>
            <title>java/nio/Buffer.remaining (2 samples, 0.04%)</title>
            <rect x="1117.6" y="307.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1120.6" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.put (7 samples, 0.14%)</title>
            <rect x="1118.1" y="307.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1121.1" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/DirectByteBuffer.get (5 samples, 0.10%)</title>
            <rect x="1118.4" y="291.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1121.4" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemory (4 samples, 0.08%)</title>
            <rect x="1118.6" y="275.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1121.6" y="286.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemoryChecks (4 samples, 0.08%)</title>
            <rect x="1118.6" y="259.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1121.6" y="270.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.checkPrimitivePointer (4 samples, 0.08%)</title>
            <rect x="1118.6" y="243.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1121.6" y="254.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.checkPrimitiveArray (4 samples, 0.08%)</title>
            <rect x="1118.6" y="227.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1121.6" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (227 samples, 4.64%)</title>
            <rect x="1119.8" y="307.0" width="54.8" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1122.8" y="318.0">sun/n..</text>
        </g>
        <g>
            <title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title>
            <rect x="1120.0" y="291.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1123.0" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/MappedByteBuffer.position (2 samples, 0.04%)</title>
            <rect x="1120.0" y="275.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1123.0" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (2 samples, 0.04%)</title>
            <rect x="1120.0" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1123.0" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.position (2 samples, 0.04%)</title>
            <rect x="1120.0" y="243.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1123.0" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (224 samples, 4.58%)</title>
            <rect x="1120.5" y="291.0" width="54.1" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1123.5" y="302.0">sun/n..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (224 samples, 4.58%)</title>
            <rect x="1120.5" y="275.0" width="54.1" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1123.5" y="286.0">sun/n..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (8 samples, 0.16%)</title>
            <rect x="1122.7" y="259.0" width="1.9" height="15" fill="#fb7c7c" rx="2" ry="2"/>
            <text x="1125.7" y="270.0"></text>
        </g>
        <g>
            <title>fdval (4 samples, 0.08%)</title>
            <rect x="1123.7" y="243.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="1126.7" y="254.0"></text>
        </g>
        <g>
            <title>read (206 samples, 4.21%)</title>
            <rect x="1124.9" y="259.0" width="49.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="1127.9" y="270.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (11 samples, 0.22%)</title>
            <rect x="1174.6" y="307.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1177.6" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (9 samples, 0.18%)</title>
            <rect x="1174.6" y="291.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1177.6" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$BufferCache.get (2 samples, 0.04%)</title>
            <rect x="1176.7" y="291.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1179.7" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util.offerFirstTemporaryDirectBuffer (2 samples, 0.04%)</title>
            <rect x="1177.2" y="307.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1180.2" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$BufferCache.offerFirst (2 samples, 0.04%)</title>
            <rect x="1177.2" y="291.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="1180.2" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.listen (4 samples, 0.08%)</title>
            <rect x="1177.9" y="371.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1180.9" y="382.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (9 samples, 0.18%)</title>
            <rect x="1178.9" y="403.0" width="2.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1181.9" y="414.0"></text>
        </g>
        <g>
            <title>gettimeofday (3 samples, 0.06%)</title>
            <rect x="1178.9" y="387.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="1181.9" y="398.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title>
            <rect x="1178.9" y="371.0" width="0.5" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="1181.9" y="382.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (6 samples, 0.12%)</title>
            <rect x="1179.6" y="387.0" width="1.5" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="1182.6" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (4 samples, 0.08%)</title>
            <rect x="1181.1" y="419.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1184.1" y="430.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.04%)</title>
            <rect x="1181.6" y="403.0" width="0.4" height="15" fill="#e76363" rx="2" ry="2"/>
            <text x="1184.6" y="414.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (2 samples, 0.04%)</title>
            <rect x="1182.0" y="435.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1185.0" y="446.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (4 samples, 0.08%)</title>
            <rect x="1182.5" y="435.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1185.5" y="446.0"></text>
        </g>
        <g>
            <title>thread_start (27 samples, 0.55%)</title>
            <rect x="1183.5" y="435.0" width="6.5" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="1186.5" y="446.0"></text>
        </g>
        <g>
            <title>_pthread_start (27 samples, 0.55%)</title>
            <rect x="1183.5" y="419.0" width="6.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="1186.5" y="430.0"></text>
        </g>
        <g>
            <title>thread_native_entry(Thread*) (27 samples, 0.55%)</title>
            <rect x="1183.5" y="403.0" width="6.5" height="15" fill="#f17070" rx="2" ry="2"/>
            <text x="1186.5" y="414.0"></text>
        </g>
        <g>
            <title>Thread::call_run() (27 samples, 0.55%)</title>
            <rect x="1183.5" y="387.0" width="6.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1186.5" y="398.0"></text>
        </g>
        <g>
            <title>ConcurrentGCThread::run() (4 samples, 0.08%)</title>
            <rect x="1183.5" y="371.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1186.5" y="382.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::run_service() (4 samples, 0.08%)</title>
            <rect x="1183.5" y="355.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1186.5" y="366.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (3 samples, 0.06%)</title>
            <rect x="1183.5" y="339.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1186.5" y="350.0"></text>
        </g>
        <g>
            <title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (3 samples,
                0.06%)
            </title>
            <rect x="1183.5" y="323.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1186.5" y="334.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (3 samples, 0.06%)</title>
            <rect x="1183.5" y="307.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1186.5" y="318.0"></text>
        </g>
        <g>
            <title>GangWorker::loop() (5 samples, 0.10%)</title>
            <rect x="1184.5" y="371.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1187.5" y="382.0"></text>
        </g>
        <g>
            <title>ParallelSPCleanupTask::work(unsigned int) (2 samples, 0.04%)</title>
            <rect x="1184.5" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1187.5" y="366.0"></text>
        </g>
        <g>
            <title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (2 samples, 0.04%)</title>
            <rect x="1184.5" y="339.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="1187.5" y="350.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (3 samples, 0.06%)</title>
            <rect x="1184.9" y="355.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1187.9" y="366.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (3 samples, 0.06%)</title>
            <rect x="1184.9" y="339.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="1187.9" y="350.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_main_inner() (2 samples, 0.04%)</title>
            <rect x="1185.7" y="371.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1188.7" y="382.0"></text>
        </g>
        <g>
            <title>CompileBroker::compiler_thread_loop() (2 samples, 0.04%)</title>
            <rect x="1185.7" y="355.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1188.7" y="366.0"></text>
        </g>
        <g>
            <title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2 samples, 0.04%)</title>
            <rect x="1185.7" y="339.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1188.7" y="350.0"></text>
        </g>
        <g>
            <title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (2 samples, 0.04%)</title>
            <rect x="1185.7" y="323.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1188.7" y="334.0"></text>
        </g>
        <g>
            <title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples,
                0.04%)
            </title>
            <rect x="1185.7" y="307.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1188.7" y="318.0"></text>
        </g>
        <g>
            <title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (2 samples,
                0.04%)
            </title>
            <rect x="1185.7" y="291.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1188.7" y="302.0"></text>
        </g>
        <g>
            <title>Compile::Code_Gen() (2 samples, 0.04%)</title>
            <rect x="1185.7" y="275.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="1188.7" y="286.0"></text>
        </g>
        <g>
            <title>VMThread::run() (4 samples, 0.08%)</title>
            <rect x="1186.1" y="371.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1189.1" y="382.0"></text>
        </g>
        <g>
            <title>VMThread::loop() (4 samples, 0.08%)</title>
            <rect x="1186.1" y="355.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1189.1" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (2 samples, 0.04%)</title>
            <rect x="1186.1" y="339.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1189.1" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (2 samples, 0.04%)</title>
            <rect x="1186.1" y="323.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="1189.1" y="334.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (2 samples, 0.04%)</title>
            <rect x="1186.1" y="307.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1189.1" y="318.0"></text>
        </g>
        <g>
            <title>SafepointSynchronize::begin() (2 samples, 0.04%)</title>
            <rect x="1186.6" y="339.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1189.6" y="350.0"></text>
        </g>
        <g>
            <title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.04%)</title>
            <rect x="1186.6" y="323.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1189.6" y="334.0"></text>
        </g>
        <g>
            <title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.04%)</title>
            <rect x="1186.6" y="307.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1189.6" y="318.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2
                samples, 0.04%)
            </title>
            <rect x="1186.6" y="291.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1189.6" y="302.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (2 samples, 0.04%)</title>
            <rect x="1186.6" y="275.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
            <text x="1189.6" y="286.0"></text>
        </g>
        <g>
            <title>WatcherThread::run() (12 samples, 0.25%)</title>
            <rect x="1187.1" y="371.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1190.1" y="382.0"></text>
        </g>
        <g>
            <title>WatcherThread::sleep() const (12 samples, 0.25%)</title>
            <rect x="1187.1" y="355.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1190.1" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (12 samples, 0.25%)</title>
            <rect x="1187.1" y="339.0" width="2.9" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1190.1" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (12 samples, 0.25%)</title>
            <rect x="1187.1" y="323.0" width="2.9" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1190.1" y="334.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (12 samples, 0.25%)</title>
            <rect x="1187.1" y="307.0" width="2.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1190.1" y="318.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (10 samples, 0.20%)</title>
            <rect x="1187.3" y="291.0" width="2.5" height="15" fill="#e96565" rx="2" ry="2"/>
            <text x="1190.3" y="302.0"></text>
        </g>
    </g>
</svg>
