<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502"
     xmlns="http://www.w3.org/2000/svg">
    <style type="text/css">
        text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
        #search { opacity:0.1; cursor:pointer; }
        #search:hover, #search.show { opacity:1; }
        #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
        #title { text-anchor:middle; font-size:17px}
        #unzoom { cursor:pointer; }
        #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
        .hide { display:none; }
        .parent { opacity:0.5; }
    </style>
    <script type="text/ecmascript">
        <![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
    </script>
    <rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
    <text id="title" x="600" y="24">Flame Graph</text>
    <text id="details" x="10" y="485"></text>
    <text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
    <text id="search" x="1090" y="24">Search</text>
    <text id="matched" x="1090" y="485"></text>
    <g id="frames">
        <g>
            <title>all (7,575 samples, 100.00%)</title>
            <rect x="10.0" y="451.0" width="1180.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="13.0" y="462.0">all</text>
        </g>
        <g>
            <title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (20 samples, 0.26%)</title>
            <rect x="10.2" y="435.0" width="3.1" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="13.2" y="446.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_objArray(int, int, Thread*) (4 samples, 0.05%)</title>
            <rect x="10.3" y="419.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="13.3" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (4 samples, 0.05%)</title>
            <rect x="10.3" y="403.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="13.3" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (4 samples, 0.05%)</title>
            <rect x="10.3" y="387.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="13.3" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)</title>
            <rect x="10.3" y="371.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="13.3" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.04%)
            </title>
            <rect x="10.3" y="355.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="13.3" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)
            </title>
            <rect x="10.5" y="339.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="13.5" y="350.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (15 samples, 0.20%)</title>
            <rect x="10.9" y="419.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="13.9" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (13 samples, 0.17%)</title>
            <rect x="10.9" y="403.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="13.9" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (10 samples, 0.13%)</title>
            <rect x="11.2" y="387.0" width="1.6" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="14.2" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.04%)</title>
            <rect x="11.2" y="371.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="14.2" y="382.0"></text>
        </g>
        <g>
            <title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3
                samples, 0.04%)
            </title>
            <rect x="11.2" y="355.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="14.2" y="366.0"></text>
        </g>
        <g>
            <title>LeakProfiler::is_running() (2 samples, 0.03%)</title>
            <rect x="11.4" y="339.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="14.4" y="350.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title>
            <rect x="11.9" y="371.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="14.9" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)
            </title>
            <rect x="12.2" y="355.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="15.2" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)
            </title>
            <rect x="12.5" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="15.5" y="350.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (2 samples, 0.03%)</title>
            <rect x="13.0" y="403.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="16.0" y="414.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (4 samples, 0.05%)</title>
            <rect x="13.3" y="435.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="16.3" y="446.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.05%)</title>
            <rect x="13.3" y="419.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="16.3" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title>
            <rect x="13.6" y="403.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="16.6" y="414.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (24 samples, 0.32%)</title>
            <rect x="13.9" y="435.0" width="3.7" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="16.9" y="446.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_instance(Thread*) (21 samples, 0.28%)</title>
            <rect x="14.2" y="419.0" width="3.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="17.2" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (21 samples, 0.28%)</title>
            <rect x="14.2" y="403.0" width="3.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="17.2" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (20 samples, 0.26%)</title>
            <rect x="14.2" y="387.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="17.2" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation() (3 samples, 0.04%)</title>
            <rect x="14.2" y="371.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="17.2" y="382.0"></text>
        </g>
        <g>
            <title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2
                samples, 0.03%)
            </title>
            <rect x="14.2" y="355.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="17.2" y="366.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (14 samples, 0.18%)</title>
            <rect x="14.8" y="371.0" width="2.2" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="17.8" y="382.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (4 samples, 0.05%)
            </title>
            <rect x="14.8" y="355.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="17.8" y="366.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (8 samples, 0.11%)
            </title>
            <rect x="15.6" y="355.0" width="1.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="18.6" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (4 samples, 0.05%)
            </title>
            <rect x="15.8" y="339.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="18.8" y="350.0"></text>
        </g>
        <g>
            <title>_platform_memset$VARIANT$Haswell (3 samples, 0.04%)</title>
            <rect x="15.9" y="323.0" width="0.5" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="18.9" y="334.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.03%)</title>
            <rect x="16.4" y="339.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="19.4" y="350.0"></text>
        </g>
        <g>
            <title>_platform_bzero$VARIANT$Haswell (2 samples, 0.03%)</title>
            <rect x="17.0" y="371.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="20.0" y="382.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (78 samples, 1.03%)
            </title>
            <rect x="17.6" y="435.0" width="12.2" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="20.6" y="446.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::enter(Thread*) (76 samples, 1.00%)</title>
            <rect x="17.6" y="419.0" width="11.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="20.6" y="430.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::EnterI(Thread*) (9 samples, 0.12%)</title>
            <rect x="18.3" y="403.0" width="1.4" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="21.3" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (2 samples, 0.03%)</title>
            <rect x="18.3" y="387.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="21.3" y="398.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (6 samples, 0.08%)</title>
            <rect x="18.6" y="387.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="21.6" y="398.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (5 samples, 0.07%)</title>
            <rect x="18.7" y="371.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="21.7" y="382.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.04%)</title>
            <rect x="19.7" y="403.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="22.7" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (53 samples, 0.70%)</title>
            <rect x="20.1" y="403.0" width="8.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="23.1" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (20 samples, 0.26%)</title>
            <rect x="25.3" y="387.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="28.3" y="398.0"></text>
        </g>
        <g>
            <title>SpinPause (7 samples, 0.09%)</title>
            <rect x="28.4" y="403.0" width="1.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="31.4" y="414.0"></text>
        </g>
        <g>
            <title>[not_walkable] (4 samples, 0.05%)</title>
            <rect x="29.8" y="435.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
            <text x="32.8" y="446.0"></text>
        </g>
        <g>
            <title>[not_walkable_Java] (13 samples, 0.17%)</title>
            <rect x="30.4" y="435.0" width="2.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="33.4" y="446.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (6 samples, 0.08%)</title>
            <rect x="30.7" y="419.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="33.7" y="430.0"></text>
        </g>
        <g>
            <title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.08%)</title>
            <rect x="30.7" y="403.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="33.7" y="414.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (2 samples, 0.03%)</title>
            <rect x="30.7" y="387.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="33.7" y="398.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title>
            <rect x="30.7" y="371.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="33.7" y="382.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title>
            <rect x="31.0" y="387.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="34.0" y="398.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.05%)</title>
            <rect x="31.0" y="371.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="34.0" y="382.0"></text>
        </g>
        <g>
            <title>frame::update_map_with_saved_link(RegisterMap*, long**) (2 samples, 0.03%)</title>
            <rect x="31.3" y="355.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="34.3" y="366.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title>
            <rect x="31.7" y="419.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="34.7" y="430.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)
            </title>
            <rect x="32.0" y="419.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="35.0" y="430.0"></text>
        </g>
        <g>
            <title>[unknown_Java] (53 samples, 0.70%)</title>
            <rect x="32.4" y="435.0" width="8.3" height="15" fill="#fd8080" rx="2" ry="2"/>
            <text x="35.4" y="446.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.04%)</title>
            <rect x="38.2" y="419.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="41.2" y="430.0"></text>
        </g>
        <g>
            <title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="38.2" y="403.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="41.2" y="414.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (12 samples, 0.16%)</title>
            <rect x="38.8" y="419.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="41.8" y="430.0"></text>
        </g>
        <g>
            <title>_res (5 samples, 0.07%)</title>
            <rect x="38.8" y="403.0" width="0.8" height="15" fill="#e86363" rx="2" ry="2"/>
            <text x="41.8" y="414.0"></text>
        </g>
        <g>
            <title>h_errno (7 samples, 0.09%)</title>
            <rect x="39.6" y="403.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="42.6" y="414.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.run (4,426 samples, 58.43%)</title>
            <rect x="40.7" y="435.0" width="689.5" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="43.7" y="446.0">java/lang/Thread.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,426 samples, 58.43%)</title>
            <rect x="40.7" y="419.0" width="689.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="43.7" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,426 samples, 58.43%)</title>
            <rect x="40.7" y="403.0" width="689.5" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="43.7" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (5 samples, 0.07%)</title>
            <rect x="40.7" y="387.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="43.7" y="398.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.07%)</title>
            <rect x="40.7" y="371.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="43.7" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (5 samples, 0.07%)</title>
            <rect x="40.7" y="355.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="43.7" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.07%)</title>
            <rect x="40.7" y="339.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="43.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.07%)</title>
            <rect x="40.7" y="323.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="43.7" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.07%)</title>
            <rect x="40.7" y="307.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="43.7" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.getTask (1,527 samples, 20.16%)</title>
            <rect x="41.5" y="387.0" width="237.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="44.5" y="398.0">java/util/concurrent/ThreadPool..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.take (1,503 samples, 19.84%)</title>
            <rect x="43.6" y="371.0" width="234.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="46.6" y="382.0">java/util/concurrent/LinkedBloc..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,335 samples, 17.62%)
            </title>
            <rect x="45.2" y="355.0" width="208.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="48.2" y="366.0">java/util/concurrent/locks/..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (3 samples, 0.04%)</title>
            <rect x="46.6" y="339.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="49.6" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.04%)
            </title>
            <rect x="46.6" y="323.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="49.6" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.04%)</title>
            <rect x="46.6" y="307.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="49.6" y="318.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (3 samples, 0.04%)</title>
            <rect x="46.6" y="291.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="49.6" y="302.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (3 samples, 0.04%)</title>
            <rect x="46.6" y="275.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="49.6" y="286.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (3 samples, 0.04%)</title>
            <rect x="46.6" y="259.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="49.6" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (3 samples, 0.04%)</title>
            <rect x="46.6" y="243.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
            <text x="49.6" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (24 samples, 0.32%)</title>
            <rect x="47.1" y="339.0" width="3.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="50.1" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (24 samples, 0.32%)</title>
            <rect x="47.1" y="323.0" width="3.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="50.1" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (10 samples, 0.13%)</title>
            <rect x="49.3" y="307.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="52.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (10 samples, 0.13%)</title>
            <rect x="49.3" y="291.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="52.3" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.11%)</title>
            <rect x="49.6" y="275.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="52.6" y="286.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (7 samples, 0.09%)</title>
            <rect x="49.7" y="259.0" width="1.1" height="15" fill="#f77777" rx="2" ry="2"/>
            <text x="52.7" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (6 samples, 0.08%)</title>
            <rect x="49.7" y="243.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="52.7" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (7 samples, 0.09%)</title>
            <rect x="50.8" y="339.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="53.8" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (7 samples, 0.09%)</title>
            <rect x="50.8" y="323.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="53.8" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (7 samples, 0.09%)</title>
            <rect x="50.8" y="307.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="53.8" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (1,290 samples, 17.03%)</title>
            <rect x="51.9" y="339.0" width="201.0" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="54.9" y="350.0">java/util/concurrent/locks..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (1,285 samples, 16.96%)</title>
            <rect x="52.7" y="323.0" width="200.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="55.7" y="334.0">jdk/internal/misc/Unsafe.p..</text>
        </g>
        <g>
            <title>JavaThread::parker() (4 samples, 0.05%)</title>
            <rect x="65.6" y="307.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="68.6" y="318.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (3 samples, 0.04%)</title>
            <rect x="66.5" y="307.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="69.5" y="318.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (4 samples, 0.05%)</title>
            <rect x="67.2" y="307.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="70.2" y="318.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (2 samples, 0.03%)</title>
            <rect x="67.8" y="307.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="70.8" y="318.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1,186 samples, 15.66%)</title>
            <rect x="68.1" y="307.0" width="184.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="71.1" y="318.0">Unsafe_Park(JNIEnv_*, _j..</text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (5 samples, 0.07%)</title>
            <rect x="69.0" y="291.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="72.0" y="302.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (3 samples, 0.04%)</title>
            <rect x="69.4" y="275.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="72.4" y="286.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (6 samples, 0.08%)</title>
            <rect x="70.1" y="291.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="73.1" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (9 samples, 0.12%)</title>
            <rect x="71.4" y="291.0" width="1.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="74.4" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (4
                samples, 0.05%)
            </title>
            <rect x="71.4" y="275.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="74.4" y="286.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title>
            <rect x="71.7" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="74.7" y="270.0"></text>
        </g>
        <g>
            <title>ThreadService::is_thread_monitoring_contention() (3 samples, 0.04%)</title>
            <rect x="72.2" y="275.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="75.2" y="286.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::is_alive() (2 samples, 0.03%)</title>
            <rect x="72.9" y="291.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="75.9" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (5 samples,
                0.07%)
            </title>
            <rect x="73.2" y="291.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="76.2" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::threadObj() const (5 samples, 0.07%)</title>
            <rect x="73.2" y="275.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="76.2" y="286.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (3 samples, 0.04%)</title>
            <rect x="74.0" y="291.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="77.0" y="302.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.04%)</title>
            <rect x="74.0" y="275.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="77.0" y="286.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::setting(JfrEventId) (3 samples, 0.04%)</title>
            <rect x="74.0" y="259.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="77.0" y="270.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::is_enabled(JfrEventId) (3 samples, 0.04%)</title>
            <rect x="74.8" y="291.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="77.8" y="302.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (1,109 samples, 14.64%)</title>
            <rect x="75.3" y="291.0" width="172.7" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="78.3" y="302.0">Parker::park(bool, long)</text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (18 samples, 0.24%)</title>
            <rect x="76.4" y="275.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="79.4" y="286.0"></text>
        </g>
        <g>
            <title>Monitor::IUnlock(bool) (2 samples, 0.03%)</title>
            <rect x="77.3" y="259.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="80.3" y="270.0"></text>
        </g>
        <g>
            <title>Monitor::lock_without_safepoint_check() (7 samples, 0.09%)</title>
            <rect x="77.6" y="259.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="80.6" y="270.0"></text>
        </g>
        <g>
            <title>Monitor::TryFast() (2 samples, 0.03%)</title>
            <rect x="78.4" y="243.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="81.4" y="254.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (3 samples, 0.04%)</title>
            <rect x="78.7" y="259.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
            <text x="81.7" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (1,035 samples, 13.66%)</title>
            <rect x="79.6" y="275.0" width="161.3" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="82.6" y="286.0">__psynch_cvwait</text>
        </g>
        <g>
            <title>_pthread_cond_wait (24 samples, 0.32%)</title>
            <rect x="240.9" y="275.0" width="3.7" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="243.9" y="286.0"></text>
        </g>
        <g>
            <title>_pthread_mutex_droplock (2 samples, 0.03%)</title>
            <rect x="244.3" y="259.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="247.3" y="270.0"></text>
        </g>
        <g>
            <title>_pthread_mutex_droplock (4 samples, 0.05%)</title>
            <rect x="244.6" y="275.0" width="0.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
            <text x="247.6" y="286.0"></text>
        </g>
        <g>
            <title>_pthread_testcancel (12 samples, 0.16%)</title>
            <rect x="245.2" y="275.0" width="1.9" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="248.2" y="286.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (5 samples, 0.07%)</title>
            <rect x="247.2" y="275.0" width="0.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="250.2" y="286.0"></text>
        </g>
        <g>
            <title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="248.0" y="291.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="251.0" y="302.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4
                samples, 0.05%)
            </title>
            <rect x="248.5" y="291.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="251.5" y="302.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.05%)</title>
            <rect x="248.5" y="275.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="251.5" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="248.6" y="259.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="251.6" y="270.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.04%)
            </title>
            <rect x="248.6" y="243.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="251.6" y="254.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="248.6" y="227.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="251.6" y="238.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (5 samples, 0.07%)
            </title>
            <rect x="249.1" y="291.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="252.1" y="302.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title>
            <rect x="249.1" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="252.1" y="286.0"></text>
        </g>
        <g>
            <title>os::is_MP() (2 samples, 0.03%)</title>
            <rect x="249.1" y="259.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="252.1" y="270.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (3 samples, 0.04%)</title>
            <rect x="249.4" y="275.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="252.4" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (2 samples, 0.03%)</title>
            <rect x="249.4" y="259.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="252.4" y="270.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (2 samples, 0.03%)</title>
            <rect x="249.4" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="252.4" y="254.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (8 samples, 0.11%)
            </title>
            <rect x="250.2" y="291.0" width="1.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="253.2" y="302.0"></text>
        </g>
        <g>
            <title>pthread_mutex_trylock (4 samples, 0.05%)</title>
            <rect x="251.6" y="291.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="254.6" y="302.0"></text>
        </g>
        <g>
            <title>pthread_mutex_unlock (4 samples, 0.05%)</title>
            <rect x="252.2" y="291.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
            <text x="255.2" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title>
            <rect x="252.9" y="339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="255.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (7 samples, 0.09%)</title>
            <rect x="253.2" y="355.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="256.2" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (7 samples, 0.09%)</title>
            <rect x="253.2" y="339.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="256.2" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (6 samples, 0.08%)
            </title>
            <rect x="253.3" y="323.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="256.3" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (6 samples, 0.08%)
            </title>
            <rect x="253.3" y="307.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="256.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (6 samples, 0.08%)</title>
            <rect x="253.3" y="291.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="256.3" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (6 samples, 0.08%)</title>
            <rect x="253.3" y="275.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="256.3" y="286.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (6 samples, 0.08%)</title>
            <rect x="253.3" y="259.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="256.3" y="270.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (6 samples, 0.08%)</title>
            <rect x="253.3" y="243.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="256.3" y="254.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (6 samples, 0.08%)</title>
            <rect x="253.3" y="227.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
            <text x="256.3" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (151 samples, 1.99%)</title>
            <rect x="254.3" y="355.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="257.3" y="366.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (151 samples, 1.99%)</title>
            <rect x="254.3" y="339.0" width="23.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="257.3" y="350.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (151 samples, 1.99%)</title>
            <rect x="254.3" y="323.0" width="23.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="257.3" y="334.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (149 samples, 1.97%)</title>
            <rect x="254.6" y="307.0" width="23.2" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="257.6" y="318.0">j..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (148 samples, 1.95%)</title>
            <rect x="254.7" y="291.0" width="23.1" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="257.7" y="302.0">j..</text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (141 samples, 1.86%)</title>
            <rect x="255.7" y="275.0" width="21.9" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="258.7" y="286.0">U..</text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title>
            <rect x="255.7" y="259.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="258.7" y="270.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (2 samples, 0.03%)</title>
            <rect x="255.7" y="243.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="258.7" y="254.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title>
            <rect x="256.0" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="259.0" y="270.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (6 samples,
                0.08%)
            </title>
            <rect x="256.7" y="259.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="259.7" y="270.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (2 samples, 0.03%)</title>
            <rect x="257.4" y="243.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="260.4" y="254.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (116 samples, 1.53%)</title>
            <rect x="257.7" y="259.0" width="18.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="260.7" y="270.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (2 samples, 0.03%)</title>
            <rect x="275.8" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="278.8" y="270.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (5 samples, 0.07%)</title>
            <rect x="276.1" y="259.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="279.1" y="270.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (3 samples, 0.04%)</title>
            <rect x="276.8" y="259.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="279.8" y="270.0"></text>
        </g>
        <g>
            <title>pthread_mutex_unlock (2 samples, 0.03%)</title>
            <rect x="277.3" y="259.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="280.3" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.get (9 samples, 0.12%)</title>
            <rect x="277.9" y="371.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="280.9" y="382.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$73/753104640.run (2,894 samples, 38.20%)</title>
            <rect x="279.3" y="387.0" width="450.9" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="282.3" y="398.0">ru/mail/polis/service/rubtsov/MyService$$Lambda$73/753104640.run</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$3 (2,893 samples, 38.19%)</title>
            <rect x="279.5" y="371.0" width="450.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="282.5" y="382.0">ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$3</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.sendResponse (696 samples, 9.19%)</title>
            <rect x="279.5" y="355.0" width="108.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="282.5" y="366.0">one/nio/http/..</text>
        </g>
        <g>
            <title>java/lang/String.equalsIgnoreCase (8 samples, 0.11%)</title>
            <rect x="281.7" y="339.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="284.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (8 samples, 0.11%)</title>
            <rect x="281.7" y="323.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="284.7" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.11%)</title>
            <rect x="281.7" y="307.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="284.7" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (2 samples, 0.03%)</title>
            <rect x="282.6" y="291.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="285.6" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.writeResponse (651 samples, 8.59%)</title>
            <rect x="282.9" y="339.0" width="101.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="285.9" y="350.0">one/nio/http..</text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (40 samples, 0.53%)</title>
            <rect x="283.4" y="323.0" width="6.2" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="286.4" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (23 samples, 0.30%)</title>
            <rect x="286.0" y="307.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="289.0" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (23 samples, 0.30%)</title>
            <rect x="286.0" y="291.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="289.0" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (23 samples, 0.30%)</title>
            <rect x="286.0" y="275.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="289.0" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (608 samples, 8.03%)</title>
            <rect x="289.6" y="323.0" width="94.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="292.6" y="334.0">one/nio/net..</text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (6 samples, 0.08%)</title>
            <rect x="290.4" y="307.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="293.4" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (597 samples, 7.88%)</title>
            <rect x="291.3" y="307.0" width="93.0" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="294.3" y="318.0">one/nio/net..</text>
        </g>
        <g>
            <title>one/nio/net/Session$ArrayQueueItem.write (586 samples, 7.74%)</title>
            <rect x="292.6" y="291.0" width="91.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="295.6" y="302.0">one/nio/net..</text>
        </g>
        <g>
            <title>ObjectMonitor::exit(bool, Thread*) (5 samples, 0.07%)</title>
            <rect x="292.6" y="275.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="295.6" y="286.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.03%)</title>
            <rect x="293.4" y="275.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="296.4" y="286.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (9 samples, 0.12%)
            </title>
            <rect x="293.8" y="275.0" width="1.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="296.8" y="286.0"></text>
        </g>
        <g>
            <title>ExceptionMark::ExceptionMark(Thread*&amp;) (3 samples, 0.04%)</title>
            <rect x="294.1" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="297.1" y="270.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.03%)</title>
            <rect x="294.8" y="259.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="297.8" y="270.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (2 samples, 0.03%)
            </title>
            <rect x="294.8" y="243.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="297.8" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.write (569 samples, 7.51%)</title>
            <rect x="295.2" y="275.0" width="88.7" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="298.2" y="286.0">one/nio/ne..</text>
        </g>
        <g>
            <title>gettimeofday (4 samples, 0.05%)</title>
            <rect x="295.5" y="259.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="298.5" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (4 samples, 0.05%)</title>
            <rect x="296.2" y="259.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="299.2" y="270.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (10 samples, 0.13%)</title>
            <rect x="296.8" y="259.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="299.8" y="270.0"></text>
        </g>
        <g>
            <title>gettimeofday (6 samples, 0.08%)</title>
            <rect x="296.9" y="243.0" width="1.0" height="15" fill="#e66060" rx="2" ry="2"/>
            <text x="299.9" y="254.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title>
            <rect x="297.4" y="227.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="300.4" y="238.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title>
            <rect x="297.9" y="243.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="300.9" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (549 samples, 7.25%)</title>
            <rect x="298.3" y="259.0" width="85.6" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="301.3" y="270.0">sun/nio/ch..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.03%)</title>
            <rect x="298.3" y="243.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="301.3" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.03%)</title>
            <rect x="298.3" y="227.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="301.3" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.03%)</title>
            <rect x="298.3" y="211.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="301.3" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (536 samples, 7.08%)</title>
            <rect x="298.7" y="243.0" width="83.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="301.7" y="254.0">sun/nio/c..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (534 samples, 7.05%)</title>
            <rect x="299.0" y="227.0" width="83.1" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="302.0" y="238.0">sun/nio/c..</text>
        </g>
        <g>
            <title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title>
            <rect x="299.3" y="211.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="302.3" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title>
            <rect x="299.3" y="195.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="302.3" y="206.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemory (2 samples, 0.03%)</title>
            <rect x="299.3" y="179.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="302.3" y="190.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.03%)</title>
            <rect x="299.3" y="163.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="302.3" y="174.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (498 samples, 6.57%)</title>
            <rect x="299.7" y="211.0" width="77.6" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="302.7" y="222.0">sun/nio/c..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (498 samples, 6.57%)</title>
            <rect x="299.7" y="195.0" width="77.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="302.7" y="206.0">sun/nio/c..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (498 samples, 6.57%)</title>
            <rect x="299.7" y="179.0" width="77.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="302.7" y="190.0">sun/nio/c..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_write0 (8 samples, 0.11%)</title>
            <rect x="303.6" y="163.0" width="1.3" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="306.6" y="174.0"></text>
        </g>
        <g>
            <title>fdval (2 samples, 0.03%)</title>
            <rect x="304.6" y="147.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="307.6" y="158.0"></text>
        </g>
        <g>
            <title>write (465 samples, 6.14%)</title>
            <rect x="304.9" y="163.0" width="72.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="307.9" y="174.0">write</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (31 samples, 0.41%)</title>
            <rect x="377.3" y="211.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="380.3" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (31 samples, 0.41%)</title>
            <rect x="377.3" y="195.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="380.3" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (12 samples, 0.16%)</title>
            <rect x="377.3" y="179.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="380.3" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (11 samples, 0.15%)</title>
            <rect x="377.5" y="163.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="380.5" y="174.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="378.1" y="147.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
            <text x="381.1" y="158.0"></text>
        </g>
        <g>
            <title>unsafe_arraycopy (3 samples, 0.04%)</title>
            <rect x="378.7" y="147.0" width="0.5" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="381.7" y="158.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.setInitialValue (19 samples, 0.25%)</title>
            <rect x="379.2" y="179.0" width="2.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="382.2" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.set (19 samples, 0.25%)</title>
            <rect x="379.2" y="163.0" width="2.9" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="382.2" y="174.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (9 samples, 0.12%)</title>
            <rect x="379.2" y="147.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="382.2" y="158.0"></text>
        </g>
        <g>
            <title>java/lang/ref/WeakReference.&lt;init&gt; (8 samples, 0.11%)</title>
            <rect x="379.3" y="131.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="382.3" y="142.0"></text>
        </g>
        <g>
            <title>java/lang/ref/Reference.&lt;init&gt; (8 samples, 0.11%)</title>
            <rect x="379.3" y="115.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="382.3" y="126.0"></text>
        </g>
        <g>
            <title>java/lang/ref/Reference.&lt;init&gt; (8 samples, 0.11%)</title>
            <rect x="379.3" y="99.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="382.3" y="110.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (10 samples, 0.13%)</title>
            <rect x="380.6" y="147.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="383.6" y="158.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (8 samples, 0.11%)</title>
            <rect x="382.1" y="243.0" width="1.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="385.1" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endWrite (3 samples, 0.04%)</title>
            <rect x="383.4" y="243.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="386.4" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (3 samples, 0.04%)</title>
            <rect x="383.4" y="227.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="386.4" y="238.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (2 samples, 0.03%)</title>
            <rect x="383.5" y="211.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="386.5" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (3 samples, 0.04%)</title>
            <rect x="383.9" y="291.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="386.9" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (23 samples, 0.30%)</title>
            <rect x="384.3" y="339.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="387.3" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (13 samples, 0.17%)</title>
            <rect x="385.7" y="323.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="388.7" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (13 samples, 0.17%)</title>
            <rect x="385.7" y="307.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="388.7" y="318.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="387.4" y="291.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
            <text x="390.4" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$79/526491426.act (2,197 samples, 29.00%)</title>
            <rect x="387.9" y="355.0" width="342.3" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="390.9" y="366.0">ru/mail/polis/service/rubtsov/MyService$$Lambd..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$entity$0 (2,197 samples, 29.00%)</title>
            <rect x="387.9" y="339.0" width="342.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="390.9" y="350.0">ru/mail/polis/service/rubtsov/MyService.lambda..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.get (2,197 samples, 29.00%)</title>
            <rect x="387.9" y="323.0" width="342.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="390.9" y="334.0">ru/mail/polis/service/rubtsov/MyService.get</text>
        </g>
        <g>
            <title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2 samples, 0.03%)</title>
            <rect x="389.5" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="392.5" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (11 samples, 0.15%)</title>
            <rect x="389.8" y="307.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="392.8" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (11 samples, 0.15%)</title>
            <rect x="389.8" y="291.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="392.8" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.15%)</title>
            <rect x="389.8" y="275.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="392.8" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.13%)</title>
            <rect x="389.9" y="259.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="392.9" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (9 samples, 0.12%)</title>
            <rect x="390.1" y="243.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="393.1" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (5 samples, 0.07%)</title>
            <rect x="390.7" y="227.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="393.7" y="238.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.&lt;init&gt; (7 samples, 0.09%)</title>
            <rect x="391.5" y="307.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="394.5" y="318.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.add (5 samples, 0.07%)</title>
            <rect x="392.6" y="307.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="395.6" y="318.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.add (5 samples, 0.07%)</title>
            <rect x="392.6" y="291.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="395.6" y="302.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.grow (3 samples, 0.04%)</title>
            <rect x="392.7" y="275.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="395.7" y="286.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.grow (3 samples, 0.04%)</title>
            <rect x="392.7" y="259.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="395.7" y="270.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.newCapacity (3 samples, 0.04%)</title>
            <rect x="392.7" y="243.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="395.7" y="254.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.latestIterator (3 samples, 0.04%)</title>
            <rect x="392.7" y="227.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="395.7" y="238.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (14 samples, 0.18%)</title>
            <rect x="393.4" y="307.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="396.4" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (14 samples, 0.18%)</title>
            <rect x="393.4" y="291.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="396.4" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.equals (11 samples, 0.15%)</title>
            <rect x="393.8" y="275.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="396.8" y="286.0"></text>
        </g>
        <g>
            <title>java/util/Objects.requireNonNull (2 samples, 0.03%)</title>
            <rect x="394.5" y="259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="397.5" y="270.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title>
            <rect x="394.8" y="259.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
            <text x="397.8" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.get (1,616 samples, 21.33%)</title>
            <rect x="395.5" y="307.0" width="251.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="398.5" y="318.0">one/nio/http/HttpClient.get</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.createRequest (8 samples, 0.11%)</title>
            <rect x="395.5" y="291.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="398.5" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.&lt;init&gt; (5 samples, 0.07%)</title>
            <rect x="396.0" y="275.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="399.0" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (5 samples, 0.07%)</title>
            <rect x="396.0" y="259.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="399.0" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (5 samples, 0.07%)</title>
            <rect x="396.0" y="243.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="399.0" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (5 samples, 0.07%)</title>
            <rect x="396.0" y="227.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="399.0" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (1,608 samples, 21.23%)</title>
            <rect x="396.8" y="291.0" width="250.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="399.8" y="302.0">one/nio/http/HttpClient.invoke</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (1,608 samples, 21.23%)</title>
            <rect x="396.8" y="275.0" width="250.5" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="399.8" y="286.0">one/nio/http/HttpClient.invoke</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (805 samples, 10.63%)</title>
            <rect x="397.4" y="259.0" width="125.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="400.4" y="270.0">one/nio/http/Ht..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (801 samples, 10.57%)</title>
            <rect x="398.0" y="243.0" width="124.8" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="401.0" y="254.0">one/nio/net/Jav..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (22 samples, 0.29%)</title>
            <rect x="398.7" y="227.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="401.7" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.28%)</title>
            <rect x="398.7" y="211.0" width="3.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="401.7" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.28%)</title>
            <rect x="398.7" y="195.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="401.7" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (13 samples, 0.17%)</title>
            <rect x="399.9" y="179.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="402.9" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (8 samples, 0.11%)</title>
            <rect x="400.1" y="163.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="403.1" y="174.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (8 samples, 0.11%)</title>
            <rect x="400.1" y="147.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="403.1" y="158.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.limit (4 samples, 0.05%)</title>
            <rect x="400.7" y="131.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="403.7" y="142.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title>
            <rect x="401.3" y="163.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="404.3" y="174.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (775 samples, 10.23%)</title>
            <rect x="402.1" y="227.0" width="120.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="405.1" y="238.0">sun/nio/ch/Sock..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title>
            <rect x="402.1" y="211.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="405.1" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (757 samples, 9.99%)</title>
            <rect x="402.4" y="211.0" width="117.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="405.4" y="222.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (757 samples, 9.99%)</title>
            <rect x="402.4" y="195.0" width="117.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="405.4" y="206.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (757 samples, 9.99%)</title>
            <rect x="402.4" y="179.0" width="117.9" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="405.4" y="190.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (757 samples, 9.99%)</title>
            <rect x="402.4" y="163.0" width="117.9" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="405.4" y="174.0">sun/nio/ch/Soc..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (739 samples, 9.76%)</title>
            <rect x="405.0" y="147.0" width="115.2" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="408.0" y="158.0">sun/nio/ch/Fil..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (5 samples, 0.07%)</title>
            <rect x="409.1" y="131.0" width="0.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="412.1" y="142.0"></text>
        </g>
        <g>
            <title>read (708 samples, 9.35%)</title>
            <rect x="409.9" y="131.0" width="110.3" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="412.9" y="142.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginRead (11 samples, 0.15%)</title>
            <rect x="520.3" y="211.0" width="1.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="523.3" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (2 samples, 0.03%)</title>
            <rect x="521.7" y="195.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="524.7" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endRead (5 samples, 0.07%)</title>
            <rect x="522.0" y="211.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="525.0" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (4 samples, 0.05%)</title>
            <rect x="522.2" y="195.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="525.2" y="206.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readResponse (46 samples, 0.61%)</title>
            <rect x="522.8" y="259.0" width="7.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="525.8" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readLine (33 samples, 0.44%)</title>
            <rect x="522.8" y="243.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="525.8" y="254.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="525.0" y="227.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="528.0" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (17 samples, 0.22%)</title>
            <rect x="525.3" y="227.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="528.3" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (10 samples, 0.13%)</title>
            <rect x="526.4" y="211.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="529.4" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (12 samples, 0.16%)</title>
            <rect x="528.0" y="243.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="531.0" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (12 samples, 0.16%)</title>
            <rect x="528.0" y="227.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="531.0" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.16%)</title>
            <rect x="528.0" y="211.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="531.0" y="222.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (4 samples, 0.05%)</title>
            <rect x="529.2" y="195.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="532.2" y="206.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.toBytes (64 samples, 0.84%)</title>
            <rect x="530.0" y="259.0" width="9.9" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="533.0" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readResponse (3 samples, 0.04%)</title>
            <rect x="530.4" y="243.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="533.4" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.07%)</title>
            <rect x="530.9" y="243.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="533.9" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (53 samples, 0.70%)</title>
            <rect x="531.7" y="243.0" width="8.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="534.7" y="254.0"></text>
        </g>
        <g>
            <title>java/security/AccessController.doPrivileged (3 samples, 0.04%)</title>
            <rect x="532.8" y="227.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="535.8" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.ensureCapacity (5 samples, 0.07%)</title>
            <rect x="533.4" y="227.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="536.4" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (17 samples, 0.22%)</title>
            <rect x="534.2" y="227.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="537.2" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (8 samples, 0.11%)</title>
            <rect x="534.7" y="211.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="537.7" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/String.isLatin1 (4 samples, 0.05%)</title>
            <rect x="535.3" y="195.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="538.3" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/String.length (6 samples, 0.08%)</title>
            <rect x="535.9" y="211.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="538.9" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (3 samples, 0.04%)</title>
            <rect x="536.4" y="195.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="539.4" y="206.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.write (20 samples, 0.26%)</title>
            <rect x="536.8" y="227.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="539.8" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.write (20 samples, 0.26%)</title>
            <rect x="536.8" y="211.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="539.8" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (16 samples, 0.21%)</title>
            <rect x="537.5" y="195.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="540.5" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.charAt (16 samples, 0.21%)</title>
            <rect x="537.5" y="179.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="540.5" y="190.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (6 samples, 0.08%)</title>
            <rect x="539.9" y="259.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="542.9" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.writeFully (669 samples, 8.83%)</title>
            <rect x="541.0" y="259.0" width="104.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="544.0" y="270.0">one/nio/net/..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels$1.write (465 samples, 6.14%)</title>
            <rect x="541.2" y="243.0" width="72.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="544.2" y="254.0">java/nio..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFully (462 samples, 6.10%)</title>
            <rect x="541.7" y="227.0" width="71.9" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="544.7" y="238.0">java/nio..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFullyImpl (458 samples, 6.05%)</title>
            <rect x="542.3" y="211.0" width="71.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="545.3" y="222.0">java/nio..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (456 samples, 6.02%)</title>
            <rect x="542.6" y="195.0" width="71.0" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="545.6" y="206.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (436 samples, 5.76%)</title>
            <rect x="542.8" y="179.0" width="67.9" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="545.8" y="190.0">sun/nio..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (433 samples, 5.72%)</title>
            <rect x="543.1" y="163.0" width="67.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="546.1" y="174.0">sun/nio..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (413 samples, 5.45%)</title>
            <rect x="543.8" y="147.0" width="64.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="546.8" y="158.0">sun/nio..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (413 samples, 5.45%)</title>
            <rect x="543.8" y="131.0" width="64.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="546.8" y="142.0">sun/nio..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (413 samples, 5.45%)</title>
            <rect x="543.8" y="115.0" width="64.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="546.8" y="126.0">sun/nio..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_write0 (4 samples, 0.05%)</title>
            <rect x="545.9" y="99.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="548.9" y="110.0"></text>
        </g>
        <g>
            <title>convertReturnVal (3 samples, 0.04%)</title>
            <rect x="546.5" y="99.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
            <text x="549.5" y="110.0"></text>
        </g>
        <g>
            <title>write (393 samples, 5.19%)</title>
            <rect x="547.0" y="99.0" width="61.2" height="15" fill="#f77777" rx="2" ry="2"/>
            <text x="550.0" y="110.0">write</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (15 samples, 0.20%)</title>
            <rect x="608.2" y="147.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="611.2" y="158.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (15 samples, 0.20%)</title>
            <rect x="608.2" y="131.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="611.2" y="142.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 0.08%)</title>
            <rect x="608.2" y="115.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="611.2" y="126.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (5 samples, 0.07%)</title>
            <rect x="608.3" y="99.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="611.3" y="110.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.setInitialValue (9 samples, 0.12%)</title>
            <rect x="609.1" y="115.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="612.1" y="126.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.set (9 samples, 0.12%)</title>
            <rect x="609.1" y="99.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="612.1" y="110.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (4 samples, 0.05%)</title>
            <rect x="609.4" y="83.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="612.4" y="94.0"></text>
        </g>
        <g>
            <title>java/lang/ref/WeakReference.&lt;init&gt; (4 samples, 0.05%)</title>
            <rect x="609.4" y="67.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="612.4" y="78.0"></text>
        </g>
        <g>
            <title>java/lang/ref/Reference.&lt;init&gt; (4 samples, 0.05%)</title>
            <rect x="609.4" y="51.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="612.4" y="62.0"></text>
        </g>
        <g>
            <title>java/lang/ref/Reference.&lt;init&gt; (4 samples, 0.05%)</title>
            <rect x="609.4" y="35.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="612.4" y="46.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.04%)</title>
            <rect x="610.0" y="83.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="613.0" y="94.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (11 samples, 0.15%)</title>
            <rect x="610.7" y="179.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="613.7" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (6 samples, 0.08%)</title>
            <rect x="611.4" y="163.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="614.4" y="174.0"></text>
        </g>
        <g>
            <title>pthread_self (4 samples, 0.05%)</title>
            <rect x="611.8" y="147.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
            <text x="614.8" y="158.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endWrite (8 samples, 0.11%)</title>
            <rect x="612.4" y="179.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="615.4" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (8 samples, 0.11%)</title>
            <rect x="612.4" y="163.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="615.4" y="174.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (3 samples, 0.04%)</title>
            <rect x="613.2" y="147.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="616.2" y="158.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketAdaptor.getOutputStream (203 samples, 2.68%)</title>
            <rect x="613.6" y="243.0" width="31.7" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="616.6" y="254.0">su..</text>
        </g>
        <g>
            <title>java/security/AccessController.doPrivileged (202 samples, 2.67%)</title>
            <rect x="613.8" y="227.0" width="31.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="616.8" y="238.0">ja..</text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_handle(oopDesc*) (3 samples, 0.04%)</title>
            <rect x="615.2" y="211.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="618.2" y="222.0"></text>
        </g>
        <g>
            <title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (5 samples, 0.07%)</title>
            <rect x="615.7" y="211.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="618.7" y="222.0"></text>
        </g>
        <g>
            <title>JVM_DoPrivileged (157 samples, 2.07%)</title>
            <rect x="616.4" y="211.0" width="24.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="619.4" y="222.0">J..</text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)
            </title>
            <rect x="620.6" y="195.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="623.6" y="206.0"></text>
        </g>
        <g>
            <title>Arena::Amalloc_4(unsigned long, AllocFailStrategy::AllocFailEnum) (2 samples, 0.03%)</title>
            <rect x="621.0" y="195.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="624.0" y="206.0"></text>
        </g>
        <g>
            <title>Arena::check_for_overflow(unsigned long, char const*, AllocFailStrategy::AllocFailEnum) const (2
                samples, 0.03%)
            </title>
            <rect x="621.0" y="179.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="624.0" y="190.0"></text>
        </g>
        <g>
            <title>CompiledMethod::is_compiled() const (3 samples, 0.04%)</title>
            <rect x="621.7" y="195.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="624.7" y="206.0"></text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (3 samples, 0.04%)</title>
            <rect x="622.4" y="195.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="625.4" y="206.0"></text>
        </g>
        <g>
            <title>HandleMark::initialize(Thread*) (2 samples, 0.03%)</title>
            <rect x="622.8" y="195.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="625.8" y="206.0"></text>
        </g>
        <g>
            <title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode,
                Klass::PrivateLookupMode) const (8 samples, 0.11%)
            </title>
            <rect x="623.1" y="195.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="626.1" y="206.0"></text>
        </g>
        <g>
            <title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*,
                Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (6 samples, 0.08%)
            </title>
            <rect x="623.3" y="179.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="626.3" y="190.0"></text>
        </g>
        <g>
            <title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (6 samples, 0.08%)</title>
            <rect x="623.3" y="163.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="626.3" y="174.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_handle(oopDesc*) (2 samples, 0.03%)</title>
            <rect x="624.4" y="195.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="627.4" y="206.0"></text>
        </g>
        <g>
            <title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (13 samples,
                0.17%)
            </title>
            <rect x="625.0" y="195.0" width="2.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="628.0" y="206.0"></text>
        </g>
        <g>
            <title>AbstractInterpreter::size_top_interpreter_activation(Method*) (3 samples, 0.04%)</title>
            <rect x="625.2" y="179.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="628.2" y="190.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.03%)</title>
            <rect x="625.6" y="179.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="628.6" y="190.0"></text>
        </g>
        <g>
            <title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (4 samples,
                0.05%)
            </title>
            <rect x="626.1" y="179.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="629.1" y="190.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (21 samples, 0.28%)</title>
            <rect x="627.2" y="195.0" width="3.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="630.2" y="206.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (14 samples, 0.18%)</title>
            <rect x="627.5" y="179.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="630.5" y="190.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob_unsafe(void*) (8 samples, 0.11%)</title>
            <rect x="627.5" y="163.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="630.5" y="174.0"></text>
        </g>
        <g>
            <title>CodeCache::get_code_heap_containing(void*) (4 samples, 0.05%)</title>
            <rect x="628.1" y="147.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="631.1" y="158.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (5 samples, 0.07%)</title>
            <rect x="628.7" y="163.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="631.7" y="174.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (4 samples, 0.05%)</title>
            <rect x="628.9" y="147.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="631.9" y="158.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title>
            <rect x="629.7" y="179.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="632.7" y="190.0"></text>
        </g>
        <g>
            <title>nmethod::is_zombie() const (3 samples, 0.04%)</title>
            <rect x="630.0" y="179.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="633.0" y="190.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (2 samples, 0.03%)</title>
            <rect x="630.6" y="195.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="633.6" y="206.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (4
                samples, 0.05%)
            </title>
            <rect x="630.9" y="195.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="633.9" y="206.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="631.1" y="179.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="634.1" y="190.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="631.1" y="163.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="634.1" y="174.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.04%)
            </title>
            <rect x="631.1" y="147.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="634.1" y="158.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)
            </title>
            <rect x="631.1" y="131.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="634.1" y="142.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (2 samples, 0.03%)
            </title>
            <rect x="631.2" y="115.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="634.2" y="126.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (6 samples, 0.08%)
            </title>
            <rect x="631.5" y="195.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="634.5" y="206.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (2 samples, 0.03%)</title>
            <rect x="631.5" y="179.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="634.5" y="190.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (4 samples, 0.05%)</title>
            <rect x="631.9" y="179.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="634.9" y="190.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (3 samples, 0.04%)</title>
            <rect x="632.0" y="163.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="635.0" y="174.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="632.0" y="147.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="635.0" y="158.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.04%)
            </title>
            <rect x="632.0" y="131.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="635.0" y="142.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="632.2" y="115.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="635.2" y="126.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (7 samples, 0.09%)</title>
            <rect x="632.8" y="195.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="635.8" y="206.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (44 samples, 0.58%)</title>
            <rect x="633.9" y="195.0" width="6.8" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="636.9" y="206.0"></text>
        </g>
        <g>
            <title>Method::is_ignored_by_security_stack_walk() const (20 samples, 0.26%)</title>
            <rect x="634.0" y="179.0" width="3.2" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="637.0" y="190.0"></text>
        </g>
        <g>
            <title>Klass::is_subclass_of(Klass const*) const (11 samples, 0.15%)</title>
            <rect x="635.4" y="163.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="638.4" y="174.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_next() (23 samples, 0.30%)</title>
            <rect x="637.2" y="179.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="640.2" y="190.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (9 samples, 0.12%)</title>
            <rect x="637.2" y="163.0" width="1.4" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="640.2" y="174.0"></text>
        </g>
        <g>
            <title>CodeBlob::is_deoptimization_stub() const (3 samples, 0.04%)</title>
            <rect x="637.3" y="147.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="640.3" y="158.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (5 samples, 0.07%)</title>
            <rect x="637.8" y="147.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="640.8" y="158.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (3 samples, 0.04%)</title>
            <rect x="638.1" y="131.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="641.1" y="142.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.03%)</title>
            <rect x="638.2" y="115.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="641.2" y="126.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (2 samples, 0.03%)</title>
            <rect x="638.2" y="99.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="641.2" y="110.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (14 samples, 0.18%)</title>
            <rect x="638.6" y="163.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="641.6" y="174.0"></text>
        </g>
        <g>
            <title>CompressedReadStream::read_int() (4 samples, 0.05%)</title>
            <rect x="639.0" y="147.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="642.0" y="158.0"></text>
        </g>
        <g>
            <title>PcDescCache::find_pc_desc(int, bool) (2 samples, 0.03%)</title>
            <rect x="639.6" y="147.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="642.6" y="158.0"></text>
        </g>
        <g>
            <title>PcDescContainer::find_pc_desc(unsigned char*, bool, PcDescSearch const&amp;) (2 samples, 0.03%)
            </title>
            <rect x="640.0" y="147.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="643.0" y="158.0"></text>
        </g>
        <g>
            <title>nmethod::metadata_at(int) const (3 samples, 0.04%)</title>
            <rect x="640.3" y="147.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="643.3" y="158.0"></text>
        </g>
        <g>
            <title>nmethod::metadata_addr_at(int) const (2 samples, 0.03%)</title>
            <rect x="640.4" y="131.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="643.4" y="142.0"></text>
        </g>
        <g>
            <title>JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples,
                0.03%)
            </title>
            <rect x="640.9" y="211.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="643.9" y="222.0"></text>
        </g>
        <g>
            <title>Method::is_method() const volatile (2 samples, 0.03%)</title>
            <rect x="641.5" y="211.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="644.5" y="222.0"></text>
        </g>
        <g>
            <title>RegisterMap::RegisterMap(JavaThread*, bool) (3 samples, 0.04%)</title>
            <rect x="641.8" y="211.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="644.8" y="222.0"></text>
        </g>
        <g>
            <title>call_stub (3 samples, 0.04%)</title>
            <rect x="642.6" y="211.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="645.6" y="222.0"></text>
        </g>
        <g>
            <title>methodHandle::~methodHandle() (3 samples, 0.04%)</title>
            <rect x="643.2" y="211.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="646.2" y="222.0"></text>
        </g>
        <g>
            <title>os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*),
                JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (2 samples, 0.03%)
            </title>
            <rect x="643.7" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="646.7" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketAdaptor$2.run (5 samples, 0.07%)</title>
            <rect x="644.0" y="211.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="647.0" y="222.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.03%)</title>
            <rect x="644.9" y="211.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="647.9" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.borrowObject (7 samples, 0.09%)</title>
            <rect x="645.3" y="259.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="648.3" y="270.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.pollFirst (4 samples, 0.05%)</title>
            <rect x="645.3" y="243.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="648.3" y="254.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.unlinkFirst (4 samples, 0.05%)</title>
            <rect x="645.3" y="227.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="648.3" y="238.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title>
            <rect x="645.9" y="243.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="648.9" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.returnObject (6 samples, 0.08%)</title>
            <rect x="646.3" y="259.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="649.3" y="270.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.addFirst (4 samples, 0.05%)</title>
            <rect x="646.7" y="243.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="649.7" y="254.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.linkFirst (4 samples, 0.05%)</title>
            <rect x="646.7" y="227.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="649.7" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.latestIterator (431 samples, 5.69%)</title>
            <rect x="647.4" y="307.0" width="67.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="650.4" y="318.0">ru/mail..</text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/IteratorUtils.itersTransformWithRemoved (35 samples, 0.46%)</title>
            <rect x="647.4" y="291.0" width="5.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="650.4" y="302.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators.mergeSorted (3 samples, 0.04%)</title>
            <rect x="647.4" y="275.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="650.4" y="286.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (3 samples, 0.04%)</title>
            <rect x="647.4" y="259.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="650.4" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters.collapseEquals (32 samples, 0.42%)</title>
            <rect x="647.9" y="275.0" width="5.0" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="650.9" y="286.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (32 samples, 0.42%)</title>
            <rect x="647.9" y="259.0" width="5.0" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="650.9" y="270.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (32 samples, 0.42%)</title>
            <rect x="647.9" y="243.0" width="5.0" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="650.9" y="254.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (29 samples, 0.38%)</title>
            <rect x="648.2" y="227.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="651.2" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (29 samples, 0.38%)</title>
            <rect x="648.2" y="211.0" width="4.5" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="651.2" y="222.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (29 samples, 0.38%)</title>
            <rect x="648.2" y="195.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="651.2" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title>
            <rect x="648.2" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="651.2" y="190.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (27 samples, 0.36%)</title>
            <rect x="648.5" y="179.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="651.5" y="190.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.next (2 samples, 0.03%)</title>
            <rect x="648.7" y="163.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="651.7" y="174.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.advance (2 samples, 0.03%)</title>
            <rect x="648.7" y="147.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="651.7" y="158.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (24 samples, 0.32%)</title>
            <rect x="649.0" y="163.0" width="3.7" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="652.0" y="174.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (6 samples, 0.08%)</title>
            <rect x="651.2" y="147.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="654.2" y="158.0"></text>
        </g>
        <g>
            <title>java/util/AbstractQueue.remove (4 samples, 0.05%)</title>
            <rect x="651.2" y="131.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="654.2" y="142.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.poll (4 samples, 0.05%)</title>
            <rect x="651.2" y="115.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="654.2" y="126.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.add (2 samples, 0.03%)</title>
            <rect x="651.8" y="131.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="654.8" y="142.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.offer (2 samples, 0.03%)</title>
            <rect x="651.8" y="115.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="654.8" y="126.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.siftUp (2 samples, 0.03%)</title>
            <rect x="651.8" y="99.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="654.8" y="110.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.equals (4 samples, 0.05%)</title>
            <rect x="652.1" y="147.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="655.1" y="158.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (3 samples, 0.04%)</title>
            <rect x="652.3" y="131.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="655.3" y="142.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.collectItems (396 samples, 5.23%)</title>
            <rect x="652.9" y="291.0" width="61.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="655.9" y="302.0">ru/mai..</text>
        </g>
        <g>
            <title>java/util/ArrayList.add (7 samples, 0.09%)</title>
            <rect x="652.9" y="275.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="655.9" y="286.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.add (5 samples, 0.07%)</title>
            <rect x="653.2" y="259.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="656.2" y="270.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.grow (5 samples, 0.07%)</title>
            <rect x="653.2" y="243.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="656.2" y="254.0"></text>
        </g>
        <g>
            <title>java/util/ArrayList.grow (5 samples, 0.07%)</title>
            <rect x="653.2" y="227.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="656.2" y="238.0"></text>
        </g>
        <g>
            <title>java/util/Arrays.copyOf (5 samples, 0.07%)</title>
            <rect x="653.2" y="211.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="656.2" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/CopyOnWriteArrayList.iterator (5 samples, 0.07%)</title>
            <rect x="654.0" y="275.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="657.0" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/CopyOnWriteArrayList.getArray (5 samples, 0.07%)</title>
            <rect x="654.0" y="259.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="657.0" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (36 samples, 0.48%)</title>
            <rect x="654.8" y="275.0" width="5.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="657.8" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (36 samples, 0.48%)</title>
            <rect x="654.8" y="259.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="657.8" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (36 samples, 0.48%)</title>
            <rect x="654.8" y="243.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="657.8" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (25 samples, 0.33%)</title>
            <rect x="654.8" y="227.0" width="3.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="657.8" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.setInitialValue (25 samples, 0.33%)</title>
            <rect x="654.8" y="211.0" width="3.8" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="657.8" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.set (25 samples, 0.33%)</title>
            <rect x="654.8" y="195.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="657.8" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (2 samples, 0.03%)</title>
            <rect x="657.7" y="179.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="660.7" y="190.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (4 samples, 0.05%)</title>
            <rect x="658.0" y="179.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="661.0" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.set (5 samples, 0.07%)</title>
            <rect x="658.6" y="227.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="661.6" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.set (5 samples, 0.07%)</title>
            <rect x="658.6" y="211.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="661.6" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap$Entry.&lt;init&gt; (2 samples, 0.03%)</title>
            <rect x="658.6" y="195.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="661.6" y="206.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (2 samples, 0.03%)</title>
            <rect x="658.6" y="179.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="661.6" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.cleanSomeSlots (3 samples, 0.04%)</title>
            <rect x="659.0" y="195.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="662.0" y="206.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/CopyOnWriteArrayList.iterator (2 samples, 0.03%)</title>
            <rect x="659.4" y="227.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="662.4" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (4 samples, 0.05%)
            </title>
            <rect x="659.7" y="227.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="662.7" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (2 samples, 0.03%)</title>
            <rect x="659.9" y="211.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="662.9" y="222.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTablePool.latestIterator (347 samples, 4.58%)</title>
            <rect x="660.5" y="275.0" width="54.1" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="663.5" y="286.0">ru/ma..</text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/IteratorUtils.itersTransformWithRemoved (29 samples, 0.38%)</title>
            <rect x="660.5" y="259.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="663.5" y="270.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators.mergeSorted (11 samples, 0.15%)</title>
            <rect x="660.5" y="243.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="663.5" y="254.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (9 samples, 0.12%)</title>
            <rect x="660.8" y="227.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="663.8" y="238.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.&lt;init&gt; (3 samples, 0.04%)</title>
            <rect x="661.8" y="211.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="664.8" y="222.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters.collapseEquals (18 samples, 0.24%)</title>
            <rect x="662.2" y="243.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="665.2" y="254.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (16 samples, 0.21%)</title>
            <rect x="662.5" y="227.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="665.5" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (15 samples, 0.20%)</title>
            <rect x="662.7" y="211.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="665.7" y="222.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.hasNext (2 samples, 0.03%)</title>
            <rect x="663.6" y="195.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="666.6" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (7 samples, 0.09%)</title>
            <rect x="663.9" y="195.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="666.9" y="206.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.09%)</title>
            <rect x="663.9" y="179.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="666.9" y="190.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (7 samples, 0.09%)</title>
            <rect x="663.9" y="163.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="666.9" y="174.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (7 samples, 0.09%)</title>
            <rect x="663.9" y="147.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="666.9" y="158.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7 samples, 0.09%)</title>
            <rect x="663.9" y="131.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="666.9" y="142.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.hasNext (3 samples, 0.04%)</title>
            <rect x="664.3" y="115.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="667.3" y="126.0"></text>
        </g>
        <g>
            <title>java/util/AbstractCollection.isEmpty (2 samples, 0.03%)</title>
            <rect x="664.4" y="99.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="667.4" y="110.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTablePool.collectIters (318 samples, 4.20%)</title>
            <rect x="665.0" y="259.0" width="49.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="668.0" y="270.0">ru/ma..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (8 samples, 0.11%)</title>
            <rect x="665.0" y="243.0" width="1.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="668.0" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.11%)</title>
            <rect x="665.0" y="227.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="668.0" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.07%)</title>
            <rect x="665.5" y="211.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="668.5" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.fullTryAcquireShared (3 samples, 0.04%)
            </title>
            <rect x="665.8" y="195.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="668.8" y="206.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTable.iterator (310 samples, 4.09%)</title>
            <rect x="666.3" y="243.0" width="48.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="669.3" y="254.0">ru/m..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$Values.iterator (310 samples, 4.09%)</title>
            <rect x="666.3" y="227.0" width="48.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="669.3" y="238.0">java..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapValueIterator.&lt;init&gt; (300 samples,
                3.96%)
            </title>
            <rect x="667.2" y="211.0" width="46.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="670.2" y="222.0">java..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapIter.&lt;init&gt; (300 samples, 3.96%)
            </title>
            <rect x="667.2" y="195.0" width="46.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="670.2" y="206.0">java..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap.inBounds (3 samples, 0.04%)</title>
            <rect x="667.5" y="179.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="670.5" y="190.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap.tooLow (3 samples, 0.04%)</title>
            <rect x="667.5" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="670.5" y="174.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$SubMap.loNode (295 samples, 3.89%)</title>
            <rect x="668.0" y="179.0" width="45.9" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="671.0" y="190.0">java..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.findNear (293 samples, 3.87%)</title>
            <rect x="668.3" y="163.0" width="45.6" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="671.3" y="174.0">java..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.cpr (9 samples, 0.12%)</title>
            <rect x="670.5" y="147.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="673.5" y="158.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (9 samples, 0.12%)</title>
            <rect x="670.5" y="131.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="673.5" y="142.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (9 samples, 0.12%)</title>
            <rect x="670.5" y="115.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="673.5" y="126.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (9 samples, 0.12%)</title>
            <rect x="670.5" y="99.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="673.5" y="110.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title>
            <rect x="671.6" y="83.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="674.6" y="94.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title>
            <rect x="671.6" y="67.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="674.6" y="78.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.findPredecessor (270 samples, 3.56%)</title>
            <rect x="671.9" y="147.0" width="42.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="674.9" y="158.0">java..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (10 samples, 0.13%)</title>
            <rect x="700.2" y="131.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="703.2" y="142.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.cpr (78 samples, 1.03%)</title>
            <rect x="701.8" y="131.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="704.8" y="142.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (77 samples, 1.02%)</title>
            <rect x="702.0" y="115.0" width="11.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="705.0" y="126.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (76 samples, 1.00%)</title>
            <rect x="702.1" y="99.0" width="11.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="705.1" y="110.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (76 samples, 1.00%)</title>
            <rect x="702.1" y="83.0" width="11.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="705.1" y="94.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (31 samples, 0.41%)</title>
            <rect x="709.1" y="67.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="712.1" y="78.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (31 samples, 0.41%)</title>
            <rect x="709.1" y="51.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="712.1" y="62.0"></text>
        </g>
        <g>
            <title>vectorizedMismatch (6 samples, 0.08%)</title>
            <rect x="713.0" y="35.0" width="0.9" height="15" fill="#f47373" rx="2" ry="2"/>
            <text x="716.0" y="46.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap$ValueIterator.&lt;init&gt; (4 samples, 0.05%)</title>
            <rect x="713.9" y="211.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="716.9" y="222.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.replicas (10 samples, 0.13%)</title>
            <rect x="714.7" y="307.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="717.7" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.replicas (10 samples, 0.13%)</title>
            <rect x="714.7" y="291.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="717.7" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/ServiceUtils.from (24 samples, 0.32%)</title>
            <rect x="716.3" y="307.0" width="3.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="719.3" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$MH/568895345.linkToTargetMethod (7 samples, 0.09%)</title>
            <rect x="716.9" y="291.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="719.9" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$MH/408014674.invoke (7 samples, 0.09%)</title>
            <rect x="716.9" y="275.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="719.9" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$DMH/1013570846.invokeStatic (7 samples, 0.09%)</title>
            <rect x="716.9" y="259.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="719.9" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/StringConcatHelper.prepend (7 samples, 0.09%)</title>
            <rect x="716.9" y="243.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="719.9" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/Long.getChars (7 samples, 0.09%)</title>
            <rect x="716.9" y="227.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="719.9" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.15%)</title>
            <rect x="718.0" y="291.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="721.0" y="302.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (5 samples, 0.07%)</title>
            <rect x="718.9" y="275.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="721.9" y="286.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/ValueUtils.from (48 samples, 0.63%)</title>
            <rect x="720.0" y="307.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="723.0" y="318.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.equals (14 samples, 0.18%)</title>
            <rect x="720.3" y="291.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="723.3" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.remaining (2 samples, 0.03%)</title>
            <rect x="720.3" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="723.3" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (12 samples, 0.16%)</title>
            <rect x="720.6" y="275.0" width="1.9" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="723.6" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (4 samples, 0.05%)</title>
            <rect x="722.5" y="291.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="725.5" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (22 samples, 0.29%)</title>
            <rect x="723.1" y="291.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="726.1" y="302.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (12 samples, 0.16%)</title>
            <rect x="723.6" y="275.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="726.6" y="286.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (9 samples, 0.12%)</title>
            <rect x="723.9" y="259.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="726.9" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (9 samples, 0.12%)</title>
            <rect x="723.9" y="243.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="726.9" y="254.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (9 samples, 0.12%)</title>
            <rect x="723.9" y="227.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="726.9" y="238.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$PeekingImpl.next (9 samples, 0.12%)</title>
            <rect x="723.9" y="211.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="726.9" y="222.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (9 samples, 0.12%)</title>
            <rect x="723.9" y="195.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="726.9" y="206.0"></text>
        </g>
        <g>
            <title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.04%)</title>
            <rect x="724.5" y="179.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="727.5" y="190.0"></text>
        </g>
        <g>
            <title>java/util/AbstractQueue.remove (3 samples, 0.04%)</title>
            <rect x="724.5" y="163.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="727.5" y="174.0"></text>
        </g>
        <g>
            <title>java/util/PriorityQueue.poll (3 samples, 0.04%)</title>
            <rect x="724.5" y="147.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="727.5" y="158.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.equals (2 samples, 0.03%)</title>
            <rect x="725.0" y="179.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="728.0" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.equals (7 samples, 0.09%)</title>
            <rect x="725.5" y="275.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="728.5" y="286.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (5 samples, 0.07%)</title>
            <rect x="725.8" y="259.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="728.8" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title>
            <rect x="726.3" y="243.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="729.3" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (2 samples, 0.03%)</title>
            <rect x="726.3" y="227.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="729.3" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/Value.present (5 samples, 0.07%)</title>
            <rect x="726.7" y="291.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="729.7" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/ValueUtils.merge (17 samples, 0.22%)</title>
            <rect x="727.5" y="307.0" width="2.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="730.5" y="318.0"></text>
        </g>
        <g>
            <title>java/util/Collection.stream (9 samples, 0.12%)</title>
            <rect x="727.5" y="291.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="730.5" y="302.0"></text>
        </g>
        <g>
            <title>java/util/stream/StreamSupport.stream (9 samples, 0.12%)</title>
            <rect x="727.5" y="275.0" width="1.4" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="730.5" y="286.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (7 samples, 0.09%)</title>
            <rect x="727.8" y="259.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="730.8" y="270.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline.&lt;init&gt; (7 samples, 0.09%)</title>
            <rect x="727.8" y="243.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="730.8" y="254.0"></text>
        </g>
        <g>
            <title>java/util/stream/AbstractPipeline.&lt;init&gt; (5 samples, 0.07%)</title>
            <rect x="728.1" y="227.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="731.1" y="238.0"></text>
        </g>
        <g>
            <title>jlong_disjoint_arraycopy (4 samples, 0.05%)</title>
            <rect x="728.3" y="211.0" width="0.6" height="15" fill="#e76363" rx="2" ry="2"/>
            <text x="731.3" y="222.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline.filter (6 samples, 0.08%)</title>
            <rect x="728.9" y="291.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="731.9" y="302.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (6 samples, 0.08%)</title>
            <rect x="728.9" y="275.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="731.9" y="286.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (6 samples, 0.08%)</title>
            <rect x="728.9" y="259.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="731.9" y="270.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline.&lt;init&gt; (6 samples, 0.08%)</title>
            <rect x="728.9" y="243.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="731.9" y="254.0"></text>
        </g>
        <g>
            <title>java/util/stream/AbstractPipeline.&lt;init&gt; (6 samples, 0.08%)</title>
            <rect x="728.9" y="227.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="731.9" y="238.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline.max (2 samples, 0.03%)</title>
            <rect x="729.8" y="291.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="732.8" y="302.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReferencePipeline.reduce (2 samples, 0.03%)</title>
            <rect x="729.8" y="275.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="732.8" y="286.0"></text>
        </g>
        <g>
            <title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.03%)</title>
            <rect x="729.8" y="259.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="732.8" y="270.0"></text>
        </g>
        <g>
            <title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (2 samples, 0.03%)</title>
            <rect x="729.8" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="732.8" y="254.0"></text>
        </g>
        <g>
            <title>java/util/stream/AbstractPipeline.wrapAndCopyInto (2 samples, 0.03%)</title>
            <rect x="729.8" y="227.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="732.8" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/server/AcceptorThread.run (6 samples, 0.08%)</title>
            <rect x="730.2" y="435.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="733.2" y="446.0"></text>
        </g>
        <g>
            <title>one/nio/net/Socket.acceptNonBlocking (6 samples, 0.08%)</title>
            <rect x="730.2" y="419.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="733.2" y="430.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaServerSocket.accept (6 samples, 0.08%)</title>
            <rect x="730.2" y="403.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="733.2" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaServerSocket.accept (6 samples, 0.08%)</title>
            <rect x="730.2" y="387.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="733.2" y="398.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept (6 samples, 0.08%)</title>
            <rect x="730.2" y="371.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="733.2" y="382.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept (4 samples, 0.05%)</title>
            <rect x="730.2" y="355.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="733.2" y="366.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/ServerSocketChannelImpl.accept0 (4 samples, 0.05%)</title>
            <rect x="730.2" y="339.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="733.2" y="350.0"></text>
        </g>
        <g>
            <title>accept (4 samples, 0.05%)</title>
            <rect x="730.2" y="323.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
            <text x="733.2" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.&lt;init&gt; (2 samples, 0.03%)</title>
            <rect x="730.8" y="355.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="733.8" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/server/SelectorThread.run (2,918 samples, 38.52%)</title>
            <rect x="731.1" y="435.0" width="454.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="734.1" y="446.0">one/nio/server/SelectorThread.run</text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.select (1,740 samples, 22.97%)</title>
            <rect x="732.3" y="419.0" width="271.1" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="735.3" y="430.0">one/nio/net/JavaSelector.select</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (5 samples, 0.07%)</title>
            <rect x="733.4" y="403.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="736.4" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.iteratorFor (13 samples, 0.17%)</title>
            <rect x="734.2" y="403.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="737.2" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$2.iterator (6 samples, 0.08%)</title>
            <rect x="735.3" y="387.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="738.3" y="398.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.iterator (6 samples, 0.08%)</title>
            <rect x="735.3" y="371.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="738.3" y="382.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeySet.iterator (6 samples, 0.08%)</title>
            <rect x="735.3" y="355.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="738.3" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeyIterator.&lt;init&gt; (6 samples, 0.08%)</title>
            <rect x="735.3" y="339.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="738.3" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.&lt;init&gt; (6 samples, 0.08%)</title>
            <rect x="735.3" y="323.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="738.3" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.registerPendingSessions (13 samples, 0.17%)</title>
            <rect x="736.2" y="403.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="739.2" y="414.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelectableChannel.register (12 samples, 0.16%)</title>
            <rect x="736.4" y="387.0" width="1.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="739.4" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (2 samples, 0.03%)</title>
            <rect x="738.3" y="403.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="741.3" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.select (1,691 samples, 22.32%)</title>
            <rect x="738.6" y="403.0" width="263.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="741.6" y="414.0">sun/nio/ch/SelectorImpl.select</text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,691 samples, 22.32%)</title>
            <rect x="738.6" y="387.0" width="263.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="741.6" y="398.0">sun/nio/ch/SelectorImpl.lockAndDoSe..</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,677 samples, 22.14%)</title>
            <rect x="740.6" y="371.0" width="261.2" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="743.6" y="382.0">sun/nio/ch/KQueueSelectorImpl.doSel..</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueue.poll (1,546 samples, 20.41%)</title>
            <rect x="741.2" y="355.0" width="240.8" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="744.2" y="366.0">sun/nio/ch/KQueue.poll</text>
        </g>
        <g>
            <title>JNI_OnLoad (3 samples, 0.04%)</title>
            <rect x="752.9" y="339.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="755.9" y="350.0"></text>
        </g>
        <g>
            <title>Java_sun_nio_ch_KQueue_poll (27 samples, 0.36%)</title>
            <rect x="753.5" y="339.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="756.5" y="350.0"></text>
        </g>
        <g>
            <title>kevent (1,440 samples, 19.01%)</title>
            <rect x="757.7" y="339.0" width="224.3" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="760.7" y="350.0">kevent</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processEvents (70 samples, 0.92%)</title>
            <rect x="982.0" y="355.0" width="10.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="985.0" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (23 samples, 0.30%)</title>
            <rect x="982.0" y="339.0" width="3.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="985.0" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (23 samples, 0.30%)</title>
            <rect x="982.0" y="323.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="985.0" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processReadyEvents (47 samples, 0.62%)</title>
            <rect x="985.6" y="339.0" width="7.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="988.6" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.add (43 samples, 0.57%)</title>
            <rect x="986.2" y="323.0" width="6.7" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="989.2" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.put (43 samples, 0.57%)</title>
            <rect x="986.2" y="307.0" width="6.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="989.2" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.putVal (34 samples, 0.45%)</title>
            <rect x="987.6" y="291.0" width="5.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="990.6" y="302.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.afterNodeInsertion (5 samples, 0.07%)</title>
            <rect x="988.3" y="275.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="991.3" y="286.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.newNode (19 samples, 0.25%)</title>
            <rect x="989.0" y="275.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="992.0" y="286.0"></text>
        </g>
        <g>
            <title>vtable stub (6 samples, 0.08%)</title>
            <rect x="992.0" y="275.0" width="0.9" height="15" fill="#f77878" rx="2" ry="2"/>
            <text x="995.0" y="286.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (9 samples, 0.12%)</title>
            <rect x="992.9" y="355.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="995.9" y="366.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.begin (32 samples, 0.42%)</title>
            <rect x="994.3" y="355.0" width="5.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="997.3" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.begin (32 samples, 0.42%)</title>
            <rect x="994.3" y="339.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="997.3" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.isInterrupted (6 samples, 0.08%)</title>
            <rect x="994.5" y="323.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="997.5" y="334.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (23 samples, 0.30%)</title>
            <rect x="995.4" y="323.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="998.4" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (23 samples, 0.30%)</title>
            <rect x="995.4" y="307.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="998.4" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (23 samples, 0.30%)</title>
            <rect x="995.4" y="291.0" width="3.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="998.4" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title>
            <rect x="999.0" y="323.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1002.0" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.end (7 samples, 0.09%)</title>
            <rect x="999.3" y="355.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1002.3" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.end (7 samples, 0.09%)</title>
            <rect x="999.3" y="339.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1002.3" y="350.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.09%)</title>
            <rect x="999.3" y="323.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1002.3" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (5 samples, 0.07%)</title>
            <rect x="999.3" y="307.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1002.3" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (5 samples, 0.07%)</title>
            <rect x="999.3" y="291.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1002.3" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/SharedSecrets.getJavaLangAccess (2 samples, 0.03%)</title>
            <rect x="1000.1" y="307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1003.1" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (9 samples, 0.12%)</title>
            <rect x="1000.4" y="355.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1003.4" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.remove (6 samples, 0.08%)</title>
            <rect x="1000.9" y="339.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1003.9" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$2.clear (3 samples, 0.04%)</title>
            <rect x="1002.0" y="403.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="1005.0" y="414.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.clear (3 samples, 0.04%)</title>
            <rect x="1002.0" y="387.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1005.0" y="398.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.clear (3 samples, 0.04%)</title>
            <rect x="1002.0" y="371.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1005.0" y="382.0"></text>
        </g>
        <g>
            <title>svcudp_op (6 samples, 0.08%)</title>
            <rect x="1002.4" y="403.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="1005.4" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.process (1,170 samples, 15.45%)</title>
            <rect x="1003.4" y="419.0" width="182.2" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1006.4" y="430.0">one/nio/net/Session.proc..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processRead (1,153 samples, 15.22%)</title>
            <rect x="1006.0" y="403.0" width="179.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1009.0" y="414.0">one/nio/http/HttpSessio..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processHttpBuffer (792 samples, 10.46%)</title>
            <rect x="1006.0" y="387.0" width="123.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1009.0" y="398.0">one/nio/http/Ht..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.handleParsedRequest (694 samples, 9.16%)</title>
            <rect x="1009.9" y="371.0" width="108.1" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1012.9" y="382.0">one/nio/http/..</text>
        </g>
        <g>
            <title>one/nio/http/HttpServer.handleRequest (693 samples, 9.15%)</title>
            <rect x="1010.1" y="355.0" width="107.9" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1013.1" y="366.0">one/nio/http/..</text>
        </g>
        <g>
            <title>RequestHandler2_entity.handleRequest (650 samples, 8.58%)</title>
            <rect x="1010.1" y="339.0" width="101.2" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1013.1" y="350.0">RequestHandl..</text>
        </g>
        <g>
            <title>one/nio/http/Request.getParameter (47 samples, 0.62%)</title>
            <rect x="1010.2" y="323.0" width="7.4" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="1013.2" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (10 samples, 0.13%)</title>
            <rect x="1012.6" y="307.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1015.6" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (10 samples, 0.13%)</title>
            <rect x="1012.6" y="291.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1015.6" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (10 samples, 0.13%)</title>
            <rect x="1014.1" y="307.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1017.1" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (10 samples, 0.13%)</title>
            <rect x="1014.1" y="291.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1017.1" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/util/URLEncoder.decode (7 samples, 0.09%)</title>
            <rect x="1014.6" y="275.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1017.6" y="286.0"></text>
        </g>
        <g>
            <title>jbyte_arraycopy (4 samples, 0.05%)</title>
            <rect x="1015.7" y="307.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="1018.7" y="318.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="1016.3" y="307.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="1019.3" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/URLEncoder.decode (6 samples, 0.08%)</title>
            <rect x="1016.6" y="307.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="1019.6" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.03%)</title>
            <rect x="1017.2" y="291.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1020.2" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.03%)</title>
            <rect x="1017.2" y="275.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1020.2" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title>
            <rect x="1017.2" y="259.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1020.2" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.entity (602 samples, 7.95%)</title>
            <rect x="1017.6" y="323.0" width="93.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1020.6" y="334.0">ru/mail/pol..</text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$MH/1556153212.linkToTargetMethod (3 samples, 0.04%)</title>
            <rect x="1019.1" y="307.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1022.1" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$DMH/1958675352.invokeStatic (3 samples, 0.04%)</title>
            <rect x="1019.1" y="291.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1022.1" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$79/526491426.get$Lambda (3 samples, 0.04%)</title>
            <rect x="1019.1" y="275.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1022.1" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$MH/309552273.linkToTargetMethod (2 samples, 0.03%)</title>
            <rect x="1019.6" y="307.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1022.6" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$DMH/2060335578.invokeStatic (2 samples, 0.03%)</title>
            <rect x="1019.6" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="1022.6" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/2012764883.get$Lambda (2 samples, 0.03%)</title>
            <rect x="1019.6" y="275.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1022.6" y="286.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/2012764883.&lt;init&gt; (2 samples, 0.03%)</title>
            <rect x="1019.6" y="259.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1022.6" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (18 samples, 0.24%)</title>
            <rect x="1019.9" y="307.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1022.9" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (10 samples, 0.13%)</title>
            <rect x="1020.8" y="291.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1023.8" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (10 samples, 0.13%)</title>
            <rect x="1020.8" y="275.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1023.8" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (2 samples, 0.03%)</title>
            <rect x="1022.4" y="291.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1025.4" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title>
            <rect x="1022.4" y="275.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="1025.4" y="286.0"></text>
        </g>
        <g>
            <title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title>
            <rect x="1022.4" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1025.4" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.executeAsync (569 samples, 7.51%)</title>
            <rect x="1022.7" y="307.0" width="88.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1025.7" y="318.0">ru/mail/po..</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.execute (566 samples, 7.47%)</title>
            <rect x="1023.2" y="291.0" width="88.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1026.2" y="302.0">java/util/..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (562 samples, 7.42%)</title>
            <rect x="1023.6" y="275.0" width="87.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1026.6" y="286.0">java/util/..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (543 samples, 7.17%)</title>
            <rect x="1023.9" y="259.0" width="84.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1026.9" y="270.0">java/util/..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (27 samples, 0.36%)
            </title>
            <rect x="1023.9" y="243.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1026.9" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (27 samples, 0.36%)
            </title>
            <rect x="1023.9" y="227.0" width="4.2" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1026.9" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (27 samples, 0.36%)</title>
            <rect x="1023.9" y="211.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1026.9" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (516 samples, 6.81%)</title>
            <rect x="1028.1" y="243.0" width="80.4" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1031.1" y="254.0">java/util..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (516 samples, 6.81%)</title>
            <rect x="1028.1" y="227.0" width="80.4" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1031.1" y="238.0">java/util..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (516 samples, 6.81%)</title>
            <rect x="1028.1" y="211.0" width="80.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1031.1" y="222.0">java/util..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (515 samples, 6.80%)</title>
            <rect x="1028.3" y="195.0" width="80.2" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1031.3" y="206.0">java/util..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (515 samples, 6.80%)</title>
            <rect x="1028.3" y="179.0" width="80.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1031.3" y="190.0">jdk/inter..</text>
        </g>
        <g>
            <title>HandleMarkCleaner::~HandleMarkCleaner() (3 samples, 0.04%)</title>
            <rect x="1031.0" y="163.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1034.0" y="174.0"></text>
        </g>
        <g>
            <title>Parker::unpark() (5 samples, 0.07%)</title>
            <rect x="1031.6" y="163.0" width="0.8" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1034.6" y="174.0"></text>
        </g>
        <g>
            <title>Thread::current() (5 samples, 0.07%)</title>
            <rect x="1032.5" y="163.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1035.5" y="174.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (481 samples, 6.35%)</title>
            <rect x="1033.3" y="163.0" width="74.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="1036.3" y="174.0">Unsafe_U..</text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)2, 1097844ull&gt;::oop_access_barrier(void*) (2 samples, 0.03%)
            </title>
            <rect x="1033.6" y="147.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1036.6" y="158.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (2 samples, 0.03%)</title>
            <rect x="1033.9" y="147.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1036.9" y="158.0"></text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (7 samples, 0.09%)</title>
            <rect x="1034.2" y="147.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1037.2" y="158.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (4 samples, 0.05%)</title>
            <rect x="1034.7" y="131.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1037.7" y="142.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title>
            <rect x="1035.3" y="147.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="1038.3" y="158.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (6 samples, 0.08%)</title>
            <rect x="1035.6" y="147.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1038.6" y="158.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (5 samples, 0.07%)</title>
            <rect x="1035.8" y="131.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1038.8" y="142.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (5 samples, 0.07%)</title>
            <rect x="1035.8" y="115.0" width="0.8" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="1038.8" y="126.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (4 samples, 0.05%)
            </title>
            <rect x="1035.8" y="99.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1038.8" y="110.0"></text>
        </g>
        <g>
            <title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (4 samples,
                0.05%)
            </title>
            <rect x="1035.8" y="83.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1038.8" y="94.0"></text>
        </g>
        <g>
            <title>int Atomic::load&lt;int&gt;(int const volatile*) (3 samples, 0.04%)</title>
            <rect x="1035.9" y="67.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1038.9" y="78.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*)
                const (3 samples, 0.04%)
            </title>
            <rect x="1035.9" y="51.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1038.9" y="62.0"></text>
        </g>
        <g>
            <title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (3 samples,
                0.04%)
            </title>
            <rect x="1035.9" y="35.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1038.9" y="46.0"></text>
        </g>
        <g>
            <title>Thread::current() (10 samples, 0.13%)</title>
            <rect x="1036.6" y="147.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1039.6" y="158.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (2 samples, 0.03%)</title>
            <rect x="1036.6" y="131.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1039.6" y="142.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (8 samples, 0.11%)</title>
            <rect x="1036.9" y="131.0" width="1.2" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="1039.9" y="142.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (3 samples, 0.04%)</title>
            <rect x="1038.1" y="147.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1041.1" y="158.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (7
                samples, 0.09%)
            </title>
            <rect x="1038.7" y="147.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1041.7" y="158.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (5 samples, 0.07%)</title>
            <rect x="1039.1" y="131.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1042.1" y="142.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.05%)</title>
            <rect x="1039.2" y="115.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1042.2" y="126.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4
                samples, 0.05%)
            </title>
            <rect x="1039.2" y="99.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1042.2" y="110.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (4 samples, 0.05%)
            </title>
            <rect x="1039.2" y="83.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1042.2" y="94.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (2 samples, 0.03%)
            </title>
            <rect x="1039.5" y="67.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1042.5" y="78.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (14 samples, 0.18%)
            </title>
            <rect x="1039.8" y="147.0" width="2.2" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1042.8" y="158.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.04%)</title>
            <rect x="1040.0" y="131.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1043.0" y="142.0"></text>
        </g>
        <g>
            <title>os::is_MP() (3 samples, 0.04%)</title>
            <rect x="1040.0" y="115.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1043.0" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (9 samples, 0.12%)</title>
            <rect x="1040.6" y="131.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1043.6" y="142.0"></text>
        </g>
        <g>
            <title>JavaThread::is_Java_thread() const (3 samples, 0.04%)</title>
            <rect x="1040.8" y="115.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1043.8" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (5 samples, 0.07%)</title>
            <rect x="1041.2" y="115.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1044.2" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.07%)</title>
            <rect x="1041.2" y="99.0" width="0.8" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1044.2" y="110.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5
                samples, 0.07%)
            </title>
            <rect x="1041.2" y="83.0" width="0.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1044.2" y="94.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="1041.2" y="67.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1044.2" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void
                volatile*&gt;(void volatile* const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="1041.5" y="67.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1044.5" y="78.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::ThreadsListHandle(Thread*) (8 samples, 0.11%)</title>
            <rect x="1042.0" y="147.0" width="1.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1045.0" y="158.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::acquire_stable_list_fast_path() (6 samples, 0.08%)</title>
            <rect x="1042.3" y="131.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1045.3" y="142.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (21 samples,
                0.28%)
            </title>
            <rect x="1043.3" y="147.0" width="3.2" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1046.3" y="158.0"></text>
        </g>
        <g>
            <title>oopDesc* G1BarrierSet::AccessBarrier&lt;1097844ull, G1BarrierSet&gt;::oop_load_not_in_heap&lt;oopDesc*&gt;(oopDesc**)
                (3 samples, 0.04%)
            </title>
            <rect x="1045.3" y="131.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1048.3" y="142.0"></text>
        </g>
        <g>
            <title>oopDesc* RawAccessBarrier&lt;1097844ull&gt;::load&lt;oopDesc*&gt;(void*) (2 samples, 0.03%)</title>
            <rect x="1045.4" y="115.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1048.4" y="126.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (5 samples, 0.07%)</title>
            <rect x="1045.8" y="131.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1048.8" y="142.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (358 samples, 4.73%)</title>
            <rect x="1046.7" y="147.0" width="55.8" height="15" fill="#f77878" rx="2" ry="2"/>
            <text x="1049.7" y="158.0">__psy..</text>
        </g>
        <g>
            <title>java_lang_Thread::thread(oopDesc*) (5 samples, 0.07%)</title>
            <rect x="1102.5" y="147.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1105.5" y="158.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (3 samples, 0.04%)</title>
            <rect x="1103.2" y="147.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1106.2" y="158.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (14 samples, 0.18%)</title>
            <rect x="1103.7" y="147.0" width="2.2" height="15" fill="#f87979" rx="2" ry="2"/>
            <text x="1106.7" y="158.0"></text>
        </g>
        <g>
            <title>_pthread_cond_updateval (4 samples, 0.05%)</title>
            <rect x="1105.3" y="131.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="1108.3" y="142.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (13 samples, 0.17%)</title>
            <rect x="1105.9" y="147.0" width="2.0" height="15" fill="#f77878" rx="2" ry="2"/>
            <text x="1108.9" y="158.0"></text>
        </g>
        <g>
            <title>pthread_mutex_unlock (2 samples, 0.03%)</title>
            <rect x="1107.9" y="147.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
            <text x="1110.9" y="158.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.08%)</title>
            <rect x="1108.5" y="259.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1111.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.08%)</title>
            <rect x="1108.5" y="243.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1111.5" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title>
            <rect x="1108.5" y="227.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1111.5" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.05%)</title>
            <rect x="1108.8" y="227.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1111.8" y="238.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.03%)</title>
            <rect x="1109.2" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1112.2" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (11 samples, 0.15%)</title>
            <rect x="1109.5" y="259.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1112.5" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.15%)</title>
            <rect x="1109.5" y="243.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1112.5" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.15%)</title>
            <rect x="1109.5" y="227.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1112.5" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.04%)</title>
            <rect x="1110.7" y="211.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1113.7" y="222.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.04%)</title>
            <rect x="1110.7" y="195.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1113.7" y="206.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.04%)</title>
            <rect x="1110.7" y="179.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
            <text x="1113.7" y="190.0"></text>
        </g>
        <g>
            <title>Parker::unpark() (2 samples, 0.03%)</title>
            <rect x="1110.7" y="163.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1113.7" y="174.0"></text>
        </g>
        <g>
            <title>_pthread_mutex_firstfit_lock_slow (2 samples, 0.03%)</title>
            <rect x="1110.7" y="147.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
            <text x="1113.7" y="158.0"></text>
        </g>
        <g>
            <title>__psynch_mutexwait (2 samples, 0.03%)</title>
            <rect x="1110.7" y="131.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
            <text x="1113.7" y="142.0"></text>
        </g>
        <g>
            <title>one/nio/http/PathMapper.find (27 samples, 0.36%)</title>
            <rect x="1111.3" y="339.0" width="4.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="1114.3" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (27 samples, 0.36%)</title>
            <rect x="1111.3" y="323.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1114.3" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (10 samples, 0.13%)</title>
            <rect x="1111.3" y="307.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1114.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (17 samples, 0.22%)</title>
            <rect x="1112.9" y="307.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1115.9" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.hashCode (17 samples, 0.22%)</title>
            <rect x="1112.9" y="291.0" width="2.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1115.9" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.hashCode (17 samples, 0.22%)</title>
            <rect x="1112.9" y="275.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1115.9" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getPath (16 samples, 0.21%)</title>
            <rect x="1115.5" y="339.0" width="2.5" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1118.5" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (16 samples, 0.21%)</title>
            <rect x="1115.5" y="323.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1118.5" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (16 samples, 0.21%)</title>
            <rect x="1115.5" y="307.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="1118.5" y="318.0"></text>
        </g>
        <g>
            <title>RequestHandler2_entity.handleRequest (12 samples, 0.16%)</title>
            <rect x="1115.7" y="291.0" width="1.9" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1118.7" y="302.0"></text>
        </g>
        <g>
            <title>itable stub (3 samples, 0.04%)</title>
            <rect x="1117.6" y="291.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="1120.6" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.parseRequest (33 samples, 0.44%)</title>
            <rect x="1118.0" y="371.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1121.0" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.04%)</title>
            <rect x="1119.6" y="355.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1122.6" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (3 samples, 0.04%)</title>
            <rect x="1119.6" y="339.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1122.6" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (3 samples, 0.04%)</title>
            <rect x="1119.6" y="323.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1122.6" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (3 samples, 0.04%)</title>
            <rect x="1119.6" y="307.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1122.6" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (14 samples, 0.18%)</title>
            <rect x="1120.1" y="355.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1123.1" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (13 samples, 0.17%)</title>
            <rect x="1120.2" y="339.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1123.2" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.startsWith (6 samples, 0.08%)</title>
            <rect x="1122.2" y="355.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1125.2" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (24 samples, 0.32%)</title>
            <rect x="1123.3" y="371.0" width="3.8" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1126.3" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (7 samples, 0.09%)</title>
            <rect x="1125.8" y="355.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1128.8" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.09%)</title>
            <rect x="1125.8" y="339.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1128.8" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (15 samples, 0.20%)</title>
            <rect x="1127.1" y="371.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1130.1" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (10 samples, 0.13%)</title>
            <rect x="1127.8" y="355.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1130.8" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.read (361 samples, 4.77%)</title>
            <rect x="1129.4" y="387.0" width="56.2" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1132.4" y="398.0">one/ni..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (325 samples, 4.29%)</title>
            <rect x="1129.4" y="371.0" width="50.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1132.4" y="382.0">one/n..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (316 samples, 4.17%)</title>
            <rect x="1130.8" y="355.0" width="49.2" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1133.8" y="366.0">sun/n..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (9 samples, 0.12%)</title>
            <rect x="1131.0" y="339.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1134.0" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.09%)</title>
            <rect x="1131.3" y="323.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1134.3" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.07%)</title>
            <rect x="1132.4" y="339.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1135.4" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.07%)</title>
            <rect x="1132.4" y="323.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="1135.4" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.07%)</title>
            <rect x="1132.4" y="307.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1135.4" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (276 samples, 3.64%)</title>
            <rect x="1133.1" y="339.0" width="43.0" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="1136.1" y="350.0">sun/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (276 samples, 3.64%)</title>
            <rect x="1133.1" y="323.0" width="43.0" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1136.1" y="334.0">sun/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (276 samples, 3.64%)</title>
            <rect x="1133.1" y="307.0" width="43.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1136.1" y="318.0">sun/..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (276 samples, 3.64%)</title>
            <rect x="1133.1" y="291.0" width="43.0" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1136.1" y="302.0">sun/..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (255 samples, 3.37%)</title>
            <rect x="1136.4" y="275.0" width="39.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1139.4" y="286.0">sun..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (11 samples, 0.15%)</title>
            <rect x="1138.7" y="259.0" width="1.8" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="1141.7" y="270.0"></text>
        </g>
        <g>
            <title>fdval (4 samples, 0.05%)</title>
            <rect x="1139.8" y="243.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="1142.8" y="254.0"></text>
        </g>
        <g>
            <title>convertReturnVal (5 samples, 0.07%)</title>
            <rect x="1140.5" y="259.0" width="0.7" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="1143.5" y="270.0"></text>
        </g>
        <g>
            <title>read (223 samples, 2.94%)</title>
            <rect x="1141.4" y="259.0" width="34.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="1144.4" y="270.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endRead (24 samples, 0.32%)</title>
            <rect x="1176.3" y="339.0" width="3.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1179.3" y="350.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (24 samples, 0.32%)</title>
            <rect x="1176.3" y="323.0" width="3.7" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1179.3" y="334.0"></text>
        </g>
        <g>
            <title>unsafe_arraycopy (2 samples, 0.03%)</title>
            <rect x="1179.7" y="307.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1182.7" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.listen (36 samples, 0.48%)</title>
            <rect x="1180.0" y="371.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="1183.0" y="382.0"></text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (2 samples, 0.03%)</title>
            <rect x="1181.7" y="355.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="1184.7" y="366.0"></text>
        </g>
        <g>
            <title>gettimeofday (6 samples, 0.08%)</title>
            <rect x="1182.1" y="355.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1185.1" y="366.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (17 samples, 0.22%)</title>
            <rect x="1183.0" y="355.0" width="2.6" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1186.0" y="366.0"></text>
        </g>
        <g>
            <title>__chk_fail_overlap.cold.1 (2 samples, 0.03%)</title>
            <rect x="1183.1" y="339.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1186.1" y="350.0"></text>
        </g>
        <g>
            <title>gettimeofday (6 samples, 0.08%)</title>
            <rect x="1183.5" y="339.0" width="0.9" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="1186.5" y="350.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (3 samples, 0.04%)</title>
            <rect x="1183.8" y="323.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="1186.8" y="334.0"></text>
        </g>
        <g>
            <title>_res (2 samples, 0.03%)</title>
            <rect x="1183.8" y="307.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="1186.8" y="318.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (8 samples, 0.11%)</title>
            <rect x="1184.4" y="339.0" width="1.2" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="1187.4" y="350.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (2 samples, 0.03%)</title>
            <rect x="1185.6" y="435.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1188.6" y="446.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (4 samples, 0.05%)</title>
            <rect x="1185.9" y="435.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1188.9" y="446.0"></text>
        </g>
        <g>
            <title>thread_start (22 samples, 0.29%)</title>
            <rect x="1186.6" y="435.0" width="3.4" height="15" fill="#e86464" rx="2" ry="2"/>
            <text x="1189.6" y="446.0"></text>
        </g>
        <g>
            <title>_pthread_start (22 samples, 0.29%)</title>
            <rect x="1186.6" y="419.0" width="3.4" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="1189.6" y="430.0"></text>
        </g>
        <g>
            <title>thread_native_entry(Thread*) (22 samples, 0.29%)</title>
            <rect x="1186.6" y="403.0" width="3.4" height="15" fill="#f37373" rx="2" ry="2"/>
            <text x="1189.6" y="414.0"></text>
        </g>
        <g>
            <title>Thread::call_run() (22 samples, 0.29%)</title>
            <rect x="1186.6" y="387.0" width="3.4" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1189.6" y="398.0"></text>
        </g>
        <g>
            <title>ConcurrentGCThread::run() (5 samples, 0.07%)</title>
            <rect x="1186.6" y="371.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="1189.6" y="382.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::run_service() (5 samples, 0.07%)</title>
            <rect x="1186.6" y="355.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="1189.6" y="366.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (4 samples, 0.05%)</title>
            <rect x="1186.7" y="339.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1189.7" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (4 samples, 0.05%)</title>
            <rect x="1186.7" y="323.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1189.7" y="334.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (4 samples, 0.05%)</title>
            <rect x="1186.7" y="307.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1189.7" y="318.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title>
            <rect x="1186.7" y="291.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1189.7" y="302.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (3 samples, 0.04%)</title>
            <rect x="1186.9" y="275.0" width="0.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="1189.9" y="286.0"></text>
        </g>
        <g>
            <title>GangWorker::loop() (5 samples, 0.07%)</title>
            <rect x="1187.4" y="371.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1190.4" y="382.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (3 samples, 0.04%)</title>
            <rect x="1187.7" y="355.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1190.7" y="366.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (3 samples, 0.04%)</title>
            <rect x="1187.7" y="339.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
            <text x="1190.7" y="350.0"></text>
        </g>
        <g>
            <title>VMThread::run() (2 samples, 0.03%)</title>
            <rect x="1188.3" y="371.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="1191.3" y="382.0"></text>
        </g>
        <g>
            <title>VMThread::loop() (2 samples, 0.03%)</title>
            <rect x="1188.3" y="355.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1191.3" y="366.0"></text>
        </g>
        <g>
            <title>WatcherThread::run() (9 samples, 0.12%)</title>
            <rect x="1188.6" y="371.0" width="1.4" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1191.6" y="382.0"></text>
        </g>
        <g>
            <title>WatcherThread::sleep() const (8 samples, 0.11%)</title>
            <rect x="1188.8" y="355.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1191.8" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (8 samples, 0.11%)</title>
            <rect x="1188.8" y="339.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1191.8" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (8 samples, 0.11%)</title>
            <rect x="1188.8" y="323.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1191.8" y="334.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (8 samples, 0.11%)</title>
            <rect x="1188.8" y="307.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1191.8" y="318.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (8 samples, 0.11%)</title>
            <rect x="1188.8" y="291.0" width="1.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
            <text x="1191.8" y="302.0"></text>
        </g>
    </g>
</svg>
