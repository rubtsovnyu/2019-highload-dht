<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502"
     xmlns="http://www.w3.org/2000/svg">
    <style type="text/css">
        text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
        #search { opacity:0.1; cursor:pointer; }
        #search:hover, #search.show { opacity:1; }
        #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
        #title { text-anchor:middle; font-size:17px}
        #unzoom { cursor:pointer; }
        #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
        .hide { display:none; }
        .parent { opacity:0.5; }
    </style>
    <script type="text/ecmascript">
        <![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
    </script>
    <rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
    <text id="title" x="600" y="24">Flame Graph</text>
    <text id="details" x="10" y="485"></text>
    <text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
    <text id="search" x="1090" y="24">Search</text>
    <text id="matched" x="1090" y="485"></text>
    <g id="frames">
        <g>
            <title>all (7,899 samples, 100.00%)</title>
            <rect x="10.0" y="451.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
            <text x="13.0" y="462.0">all</text>
        </g>
        <g>
            <title>InstanceKlass::klass_holder() const (2 samples, 0.03%)</title>
            <rect x="10.0" y="435.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="13.0" y="446.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (21 samples, 0.27%)</title>
            <rect x="10.3" y="435.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="13.3" y="446.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.03%)</title>
            <rect x="10.4" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="13.4" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title>
            <rect x="10.4" y="403.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="13.4" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (2 samples, 0.03%)</title>
            <rect x="10.4" y="387.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="13.4" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title>
            <rect x="10.4" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="13.4" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)
            </title>
            <rect x="10.4" y="355.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="13.4" y="366.0"></text>
        </g>
        <g>
            <title>ThreadInVMfromJava::~ThreadInVMfromJava() (2 samples, 0.03%)</title>
            <rect x="10.7" y="419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="13.7" y="430.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title>
            <rect x="10.7" y="403.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="13.7" y="414.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (16 samples, 0.20%)</title>
            <rect x="11.0" y="419.0" width="2.4" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="14.0" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 0.18%)</title>
            <rect x="11.3" y="403.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="14.3" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (13 samples, 0.16%)</title>
            <rect x="11.3" y="387.0" width="2.0" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="14.3" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation() (4 samples, 0.05%)</title>
            <rect x="11.5" y="371.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="14.5" y="382.0"></text>
        </g>
        <g>
            <title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2
                samples, 0.03%)
            </title>
            <rect x="11.5" y="355.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="14.5" y="366.0"></text>
        </g>
        <g>
            <title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)
            </title>
            <rect x="11.8" y="355.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="14.8" y="366.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title>
            <rect x="12.2" y="371.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="15.2" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)
            </title>
            <rect x="12.2" y="355.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="15.2" y="366.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (3 samples, 0.04%)
            </title>
            <rect x="12.2" y="339.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="15.2" y="350.0"></text>
        </g>
        <g>
            <title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (2 samples, 0.03%)</title>
            <rect x="12.8" y="339.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="15.8" y="350.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.11%)</title>
            <rect x="13.4" y="435.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="16.4" y="446.0"></text>
        </g>
        <g>
            <title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.10%)</title>
            <rect x="13.6" y="419.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="16.6" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.09%)</title>
            <rect x="13.7" y="403.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="16.7" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (6 samples, 0.08%)</title>
            <rect x="13.7" y="387.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="16.7" y="398.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (6 samples, 0.08%)</title>
            <rect x="13.7" y="371.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="16.7" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.05%)
            </title>
            <rect x="14.0" y="355.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="17.0" y="366.0"></text>
        </g>
        <g>
            <title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (3 samples, 0.04%)</title>
            <rect x="14.2" y="339.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="17.2" y="350.0"></text>
        </g>
        <g>
            <title>CollectedHeap::fill_with_object(HeapWord*, unsigned long, bool) (3 samples, 0.04%)</title>
            <rect x="14.2" y="323.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="17.2" y="334.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (27 samples, 0.34%)</title>
            <rect x="14.8" y="435.0" width="4.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="17.8" y="446.0"></text>
        </g>
        <g>
            <title>InstanceKlass::allocate_instance(Thread*) (25 samples, 0.32%)</title>
            <rect x="14.9" y="419.0" width="3.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="17.9" y="430.0"></text>
        </g>
        <g>
            <title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (25 samples, 0.32%)</title>
            <rect x="14.9" y="403.0" width="3.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="17.9" y="414.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate() const (22 samples, 0.28%)</title>
            <rect x="15.1" y="387.0" width="3.3" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="18.1" y="398.0"></text>
        </g>
        <g>
            <title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2
                samples, 0.03%)
            </title>
            <rect x="15.1" y="371.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="18.1" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::Allocation::notify_allocation() (2 samples, 0.03%)</title>
            <rect x="15.4" y="371.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="18.4" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (17 samples, 0.22%)</title>
            <rect x="15.7" y="371.0" width="2.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="18.7" y="382.0"></text>
        </g>
        <g>
            <title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (15 samples, 0.19%)
            </title>
            <rect x="16.0" y="355.0" width="2.2" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="19.0" y="366.0"></text>
        </g>
        <g>
            <title>G1Allocator::unsafe_max_tlab_alloc() (2 samples, 0.03%)</title>
            <rect x="16.6" y="339.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="19.6" y="350.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (6 samples, 0.08%)
            </title>
            <rect x="16.9" y="339.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="19.9" y="350.0"></text>
        </g>
        <g>
            <title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.03%)</title>
            <rect x="16.9" y="323.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="19.9" y="334.0"></text>
        </g>
        <g>
            <title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title>
            <rect x="16.9" y="307.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="19.9" y="318.0"></text>
        </g>
        <g>
            <title>_platform_memset$VARIANT$Haswell (2 samples, 0.03%)</title>
            <rect x="17.5" y="323.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="20.5" y="334.0"></text>
        </g>
        <g>
            <title>ThreadLocalAllocBuffer::make_parsable(bool, bool) (2 samples, 0.03%)</title>
            <rect x="17.9" y="339.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="20.9" y="350.0"></text>
        </g>
        <g>
            <title>ObjAllocator::initialize(HeapWord*) const (2 samples, 0.03%)</title>
            <rect x="18.4" y="387.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="21.4" y="398.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (175 samples, 2.22%)
            </title>
            <rect x="18.8" y="435.0" width="26.2" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="21.8" y="446.0">S..</text>
        </g>
        <g>
            <title>ObjectMonitor::enter(Thread*) (168 samples, 2.13%)</title>
            <rect x="19.1" y="419.0" width="25.1" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="22.1" y="430.0">O..</text>
        </g>
        <g>
            <title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*,
                ObjectMonitor*) (2 samples, 0.03%)
            </title>
            <rect x="19.3" y="403.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="22.3" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::DeferredInitialize() (2 samples, 0.03%)</title>
            <rect x="19.6" y="403.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="22.6" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::EnterI(Thread*) (29 samples, 0.37%)</title>
            <rect x="19.9" y="403.0" width="4.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="22.9" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (6 samples, 0.08%)</title>
            <rect x="20.3" y="387.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="23.3" y="398.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (3 samples, 0.04%)</title>
            <rect x="20.8" y="371.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="23.8" y="382.0"></text>
        </g>
        <g>
            <title>SpinPause (3 samples, 0.04%)</title>
            <rect x="21.2" y="387.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="24.2" y="398.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (16 samples, 0.20%)</title>
            <rect x="21.7" y="387.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="24.7" y="398.0"></text>
        </g>
        <g>
            <title>__gettimeofday (2 samples, 0.03%)</title>
            <rect x="21.7" y="371.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="24.7" y="382.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (14 samples, 0.18%)</title>
            <rect x="22.0" y="371.0" width="2.0" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="25.0" y="382.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (6 samples, 0.08%)</title>
            <rect x="24.3" y="403.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="27.3" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::TrySpin(Thread*) (121 samples, 1.53%)</title>
            <rect x="25.2" y="403.0" width="18.1" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="28.2" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::NotRunnable(Thread*, Thread*) (46 samples, 0.58%)</title>
            <rect x="36.4" y="387.0" width="6.9" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="39.4" y="398.0"></text>
        </g>
        <g>
            <title>SpinPause (4 samples, 0.05%)</title>
            <rect x="43.5" y="403.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="46.5" y="414.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::slow_enter(Handle, BasicLock*, Thread*) (3 samples, 0.04%)</title>
            <rect x="44.2" y="419.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="47.2" y="430.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (3 samples, 0.04%)
            </title>
            <rect x="44.2" y="403.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="47.2" y="414.0"></text>
        </g>
        <g>
            <title>ThreadInVMfromJava::~ThreadInVMfromJava() (6 samples, 0.08%)</title>
            <rect x="45.1" y="435.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="48.1" y="446.0"></text>
        </g>
        <g>
            <title>[not_walkable] (16 samples, 0.20%)</title>
            <rect x="46.0" y="435.0" width="2.4" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="49.0" y="446.0"></text>
        </g>
        <g>
            <title>[not_walkable_Java] (41 samples, 0.52%)</title>
            <rect x="48.4" y="435.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="51.4" y="446.0"></text>
        </g>
        <g>
            <title>Method::get_c2i_entry() (2 samples, 0.03%)</title>
            <rect x="49.4" y="419.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="52.4" y="430.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (4 samples, 0.05%)</title>
            <rect x="49.7" y="419.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="52.7" y="430.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (11 samples, 0.14%)</title>
            <rect x="50.5" y="419.0" width="1.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="53.5" y="430.0"></text>
        </g>
        <g>
            <title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (10 samples, 0.13%)</title>
            <rect x="50.6" y="403.0" width="1.5" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="53.6" y="414.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (5 samples, 0.06%)</title>
            <rect x="50.6" y="387.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="53.6" y="398.0"></text>
        </g>
        <g>
            <title>CodeBlob::is_zombie() const (2 samples, 0.03%)</title>
            <rect x="50.6" y="371.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="53.6" y="382.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title>
            <rect x="50.9" y="371.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="53.9" y="382.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (5 samples, 0.06%)</title>
            <rect x="51.4" y="387.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="54.4" y="398.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (4 samples, 0.05%)</title>
            <rect x="51.5" y="371.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="54.5" y="382.0"></text>
        </g>
        <g>
            <title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.03%)</title>
            <rect x="51.5" y="355.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="54.5" y="366.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.05%)</title>
            <rect x="52.1" y="419.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="55.1" y="430.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (6 samples, 0.08%)
            </title>
            <rect x="52.7" y="419.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="55.7" y="430.0"></text>
        </g>
        <g>
            <title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (4 samples, 0.05%)</title>
            <rect x="53.6" y="419.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="56.6" y="430.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title>
            <rect x="53.6" y="403.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="56.6" y="414.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob_unsafe(void*) (2 samples, 0.03%)</title>
            <rect x="53.6" y="387.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="56.6" y="398.0"></text>
        </g>
        <g>
            <title>nmethod::is_zombie() const (2 samples, 0.03%)</title>
            <rect x="53.9" y="403.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="56.9" y="414.0"></text>
        </g>
        <g>
            <title>nmethod::verified_entry_point() const (2 samples, 0.03%)</title>
            <rect x="54.2" y="419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="57.2" y="430.0"></text>
        </g>
        <g>
            <title>[unknown_Java] (42 samples, 0.53%)</title>
            <rect x="54.5" y="435.0" width="6.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="57.5" y="446.0"></text>
        </g>
        <g>
            <title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title>
            <rect x="58.6" y="419.0" width="0.2" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="61.6" y="430.0"></text>
        </g>
        <g>
            <title>SharedRuntime::fixup_callers_callsite(Method*, unsigned char*) (7 samples, 0.09%)</title>
            <rect x="59.0" y="419.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="62.0" y="430.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (5 samples, 0.06%)</title>
            <rect x="59.0" y="403.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="62.0" y="414.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.04%)</title>
            <rect x="59.0" y="387.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="62.0" y="398.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (3 samples, 0.04%)</title>
            <rect x="59.0" y="371.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="62.0" y="382.0"></text>
        </g>
        <g>
            <title>nmethod::is_zombie() const (2 samples, 0.03%)</title>
            <rect x="59.4" y="387.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="62.4" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (5 samples, 0.06%)</title>
            <rect x="60.0" y="419.0" width="0.8" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="63.0" y="430.0"></text>
        </g>
        <g>
            <title>h_errno (5 samples, 0.06%)</title>
            <rect x="60.0" y="403.0" width="0.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
            <text x="63.0" y="414.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.run (4,515 samples, 57.16%)</title>
            <rect x="60.8" y="435.0" width="674.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="63.8" y="446.0">java/lang/Thread.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,515 samples, 57.16%)</title>
            <rect x="60.8" y="419.0" width="674.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="63.8" y="430.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,515 samples, 57.16%)</title>
            <rect x="60.8" y="403.0" width="674.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="63.8" y="414.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (11 samples, 0.14%)</title>
            <rect x="61.5" y="387.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="64.5" y="398.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (11 samples, 0.14%)</title>
            <rect x="61.5" y="371.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="64.5" y="382.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (11 samples, 0.14%)</title>
            <rect x="61.5" y="355.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="64.5" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (11 samples, 0.14%)</title>
            <rect x="61.5" y="339.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="64.5" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.take (2 samples, 0.03%)</title>
            <rect x="62.9" y="323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="65.9" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.getTask (1,406 samples, 17.80%)</title>
            <rect x="63.2" y="387.0" width="210.0" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="66.2" y="398.0">java/util/concurrent/ThreadP..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.take (1,402 samples, 17.75%)</title>
            <rect x="63.8" y="371.0" width="209.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="66.8" y="382.0">java/util/concurrent/Linked..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,203 samples, 15.23%)
            </title>
            <rect x="65.4" y="355.0" width="179.7" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="68.4" y="366.0">java/util/concurrent/lo..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (22 samples, 0.28%)</title>
            <rect x="66.8" y="339.0" width="3.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="69.8" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (22 samples, 0.28%)</title>
            <rect x="66.8" y="323.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="69.8" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (12 samples, 0.15%)</title>
            <rect x="68.0" y="307.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="71.0" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (12 samples, 0.15%)</title>
            <rect x="68.0" y="291.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="71.0" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (8 samples, 0.10%)</title>
            <rect x="68.6" y="275.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="71.6" y="286.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.04%)</title>
            <rect x="69.3" y="259.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="72.3" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (3 samples, 0.04%)</title>
            <rect x="69.3" y="243.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
            <text x="72.3" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title>
            <rect x="69.8" y="307.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="72.8" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (5 samples, 0.06%)</title>
            <rect x="70.1" y="339.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="73.1" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (5 samples, 0.06%)</title>
            <rect x="70.1" y="323.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="73.1" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.06%)</title>
            <rect x="70.1" y="307.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="73.1" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (1,163 samples, 14.72%)</title>
            <rect x="70.8" y="339.0" width="173.7" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="73.8" y="350.0">java/util/concurrent/l..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (1,150 samples, 14.56%)</title>
            <rect x="72.7" y="323.0" width="171.8" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="75.7" y="334.0">jdk/internal/misc/Unsa..</text>
        </g>
        <g>
            <title>JavaThread::parker() (3 samples, 0.04%)</title>
            <rect x="87.7" y="307.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="90.7" y="318.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title>
            <rect x="88.1" y="307.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="91.1" y="318.0"></text>
        </g>
        <g>
            <title>JavaThreadParkedState::~JavaThreadParkedState() (8 samples, 0.10%)</title>
            <rect x="88.6" y="307.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="91.6" y="318.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title>
            <rect x="89.8" y="307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="92.8" y="318.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::should_commit() (3 samples, 0.04%)</title>
            <rect x="90.1" y="307.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="93.1" y="318.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (1,029 samples, 13.03%)</title>
            <rect x="90.7" y="307.0" width="153.7" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="93.7" y="318.0">Unsafe_Park(JNIEnv_..</text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (11 samples, 0.14%)</title>
            <rect x="91.1" y="291.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="94.1" y="302.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (7 samples, 0.09%)</title>
            <rect x="91.7" y="275.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="94.7" y="286.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (5 samples, 0.06%)</title>
            <rect x="92.8" y="291.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="95.8" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (6 samples, 0.08%)</title>
            <rect x="93.8" y="291.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="96.8" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (5 samples, 0.06%)</title>
            <rect x="94.0" y="275.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="97.0" y="286.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (4 samples, 0.05%)</title>
            <rect x="94.1" y="259.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="97.1" y="270.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (3 samples, 0.04%)
            </title>
            <rect x="94.1" y="243.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="97.1" y="254.0"></text>
        </g>
        <g>
            <title>ScopedFence&lt;(ScopedFenceType)0&gt;::postfix() (3 samples, 0.04%)</title>
            <rect x="94.1" y="227.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="97.1" y="238.0"></text>
        </g>
        <g>
            <title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (10 samples, 0.13%)</title>
            <rect x="94.7" y="291.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="97.7" y="302.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::JavaThreadStatusChanger(JavaThread*, java_lang_Thread::ThreadStatus) (3
                samples, 0.04%)
            </title>
            <rect x="94.9" y="275.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="97.9" y="286.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title>
            <rect x="95.0" y="259.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="98.0" y="270.0"></text>
        </g>
        <g>
            <title>ThreadService::is_thread_monitoring_contention() (3 samples, 0.04%)</title>
            <rect x="95.3" y="275.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="98.3" y="286.0"></text>
        </g>
        <g>
            <title>ThreadStatistics::monitor_wait() (3 samples, 0.04%)</title>
            <rect x="95.7" y="275.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="98.7" y="286.0"></text>
        </g>
        <g>
            <title>ThreadStatistics::check_and_reset_count() (3 samples, 0.04%)</title>
            <rect x="95.7" y="259.0" width="0.5" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="98.7" y="270.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(JavaThread*, java_lang_Thread::ThreadStatus) (4 samples,
                0.05%)
            </title>
            <rect x="96.2" y="291.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="99.2" y="302.0"></text>
        </g>
        <g>
            <title>JavaThread::threadObj() const (3 samples, 0.04%)</title>
            <rect x="96.3" y="275.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="99.3" y="286.0"></text>
        </g>
        <g>
            <title>JavaThreadStatusChanger::set_thread_status(java_lang_Thread::ThreadStatus) (2 samples, 0.03%)</title>
            <rect x="96.8" y="291.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="99.8" y="302.0"></text>
        </g>
        <g>
            <title>JfrEvent&lt;EventThreadPark&gt;::JfrEvent(EventStartTime) (4 samples, 0.05%)</title>
            <rect x="97.1" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="100.1" y="302.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::is_enabled(JfrEventId) (2 samples, 0.03%)</title>
            <rect x="97.2" y="275.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="100.2" y="286.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::setting(JfrEventId) (2 samples, 0.03%)</title>
            <rect x="97.2" y="259.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="100.2" y="270.0"></text>
        </g>
        <g>
            <title>JfrEventSetting::is_enabled(JfrEventId) (4 samples, 0.05%)</title>
            <rect x="97.8" y="291.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="100.8" y="302.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (933 samples, 11.81%)</title>
            <rect x="98.4" y="291.0" width="139.4" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="101.4" y="302.0">Parker::park(bool..</text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (2 samples, 0.03%)</title>
            <rect x="99.9" y="275.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="102.9" y="286.0"></text>
        </g>
        <g>
            <title>os::is_MP() (2 samples, 0.03%)</title>
            <rect x="99.9" y="259.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="102.9" y="270.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (32 samples, 0.41%)</title>
            <rect x="100.4" y="275.0" width="4.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="103.4" y="286.0"></text>
        </g>
        <g>
            <title>Monitor::lock_without_safepoint_check() (15 samples, 0.19%)</title>
            <rect x="102.2" y="259.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="105.2" y="270.0"></text>
        </g>
        <g>
            <title>Monitor::ILock(Thread*) (3 samples, 0.04%)</title>
            <rect x="103.8" y="243.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="106.8" y="254.0"></text>
        </g>
        <g>
            <title>Monitor::TryFast() (3 samples, 0.04%)</title>
            <rect x="103.8" y="227.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="106.8" y="238.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (5 samples, 0.06%)</title>
            <rect x="104.4" y="259.0" width="0.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="107.4" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (835 samples, 10.57%)</title>
            <rect x="105.3" y="275.0" width="124.7" height="15" fill="#e86363" rx="2" ry="2"/>
            <text x="108.3" y="286.0">__psynch_cvwait</text>
        </g>
        <g>
            <title>_pthread_cond_wait (28 samples, 0.35%)</title>
            <rect x="230.0" y="275.0" width="4.2" height="15" fill="#fd8080" rx="2" ry="2"/>
            <text x="233.0" y="286.0"></text>
        </g>
        <g>
            <title>_pthread_mutex_droplock (8 samples, 0.10%)</title>
            <rect x="233.0" y="259.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
            <text x="236.0" y="270.0"></text>
        </g>
        <g>
            <title>_pthread_testcancel (13 samples, 0.16%)</title>
            <rect x="234.2" y="275.0" width="2.0" height="15" fill="#e66161" rx="2" ry="2"/>
            <text x="237.2" y="286.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (9 samples, 0.11%)</title>
            <rect x="236.5" y="275.0" width="1.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="239.5" y="286.0"></text>
        </g>
        <g>
            <title>ThreadBlockInVM::ThreadBlockInVM(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="237.8" y="291.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="240.8" y="302.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5
                samples, 0.06%)
            </title>
            <rect x="238.3" y="291.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="241.3" y="302.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (4 samples, 0.05%)</title>
            <rect x="238.4" y="275.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="241.4" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (4 samples, 0.05%)</title>
            <rect x="238.4" y="259.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="241.4" y="270.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.04%)
            </title>
            <rect x="238.6" y="243.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="241.6" y="254.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="238.6" y="227.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="241.6" y="238.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (7 samples, 0.09%)
            </title>
            <rect x="239.0" y="291.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="242.0" y="302.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (5 samples, 0.06%)</title>
            <rect x="239.3" y="275.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="242.3" y="286.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (5 samples, 0.06%)</title>
            <rect x="239.3" y="259.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="242.3" y="270.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (5 samples, 0.06%)</title>
            <rect x="239.3" y="243.0" width="0.8" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="242.3" y="254.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (4
                samples, 0.05%)
            </title>
            <rect x="239.5" y="227.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="242.5" y="238.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)
            </title>
            <rect x="239.5" y="211.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="242.5" y="222.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (3 samples, 0.04%)
            </title>
            <rect x="239.5" y="195.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="242.5" y="206.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples,
                0.03%)
            </title>
            <rect x="239.6" y="179.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="242.6" y="190.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.06%)
            </title>
            <rect x="240.5" y="291.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="243.5" y="302.0"></text>
        </g>
        <g>
            <title>os::is_interrupted(Thread*, bool) (2 samples, 0.03%)</title>
            <rect x="241.2" y="291.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="244.2" y="302.0"></text>
        </g>
        <g>
            <title>pthread_cond_wait (4 samples, 0.05%)</title>
            <rect x="241.5" y="291.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="244.5" y="302.0"></text>
        </g>
        <g>
            <title>pthread_mutex_trylock (9 samples, 0.11%)</title>
            <rect x="242.1" y="291.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
            <text x="245.1" y="302.0"></text>
        </g>
        <g>
            <title>pthread_mutex_unlock (6 samples, 0.08%)</title>
            <rect x="243.5" y="291.0" width="0.9" height="15" fill="#ec6868" rx="2" ry="2"/>
            <text x="246.5" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (4 samples, 0.05%)</title>
            <rect x="244.5" y="339.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="247.5" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (8 samples, 0.10%)</title>
            <rect x="245.1" y="355.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="248.1" y="366.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (8 samples, 0.10%)</title>
            <rect x="245.1" y="339.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="248.1" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (8 samples, 0.10%)
            </title>
            <rect x="245.1" y="323.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="248.1" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (8 samples, 0.10%)
            </title>
            <rect x="245.1" y="307.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="248.1" y="318.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (8 samples, 0.10%)</title>
            <rect x="245.1" y="291.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="248.1" y="302.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (7 samples, 0.09%)</title>
            <rect x="245.3" y="275.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="248.3" y="286.0"></text>
        </g>
        <g>
            <title>Unsafe_Park(JNIEnv_*, _jobject*, unsigned char, long) (7 samples, 0.09%)</title>
            <rect x="245.3" y="259.0" width="1.0" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="248.3" y="270.0"></text>
        </g>
        <g>
            <title>Parker::park(bool, long) (6 samples, 0.08%)</title>
            <rect x="245.4" y="243.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="248.4" y="254.0"></text>
        </g>
        <g>
            <title>JavaThread::handle_special_suspend_equivalent_condition() (2 samples, 0.03%)</title>
            <rect x="245.4" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="248.4" y="238.0"></text>
        </g>
        <g>
            <title>Monitor::lock_without_safepoint_check() (2 samples, 0.03%)</title>
            <rect x="245.4" y="211.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="248.4" y="222.0"></text>
        </g>
        <g>
            <title>Monitor::ILock(Thread*) (2 samples, 0.03%)</title>
            <rect x="245.4" y="195.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="248.4" y="206.0"></text>
        </g>
        <g>
            <title>Monitor::TryFast() (2 samples, 0.03%)</title>
            <rect x="245.4" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="248.4" y="190.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (4 samples, 0.05%)</title>
            <rect x="245.7" y="227.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
            <text x="248.7" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (180 samples, 2.28%)</title>
            <rect x="246.3" y="355.0" width="26.9" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="249.3" y="366.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (180 samples, 2.28%)</title>
            <rect x="246.3" y="339.0" width="26.9" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="249.3" y="350.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (180 samples, 2.28%)</title>
            <rect x="246.3" y="323.0" width="26.9" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="249.3" y="334.0">j..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (174 samples, 2.20%)</title>
            <rect x="247.2" y="307.0" width="26.0" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="250.2" y="318.0">j..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (174 samples, 2.20%)</title>
            <rect x="247.2" y="291.0" width="26.0" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="250.2" y="302.0">j..</text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (163 samples, 2.06%)</title>
            <rect x="248.4" y="275.0" width="24.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
            <text x="251.4" y="286.0">U..</text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (2 samples, 0.03%)</title>
            <rect x="248.7" y="259.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="251.7" y="270.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (2 samples, 0.03%)</title>
            <rect x="248.7" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="251.7" y="254.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title>
            <rect x="248.7" y="227.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="251.7" y="238.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="248.7" y="211.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="251.7" y="222.0"></text>
        </g>
        <g>
            <title>Thread::current() (2 samples, 0.03%)</title>
            <rect x="249.0" y="259.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="252.0" y="270.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (2 samples, 0.03%)</title>
            <rect x="249.0" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
            <text x="252.0" y="254.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (3
                samples, 0.04%)
            </title>
            <rect x="249.5" y="259.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="252.5" y="270.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::block_if_requested_local_poll(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="249.5" y="243.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="252.5" y="254.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (3 samples, 0.04%)</title>
            <rect x="249.5" y="227.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="252.5" y="238.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (3
                samples, 0.04%)
            </title>
            <rect x="249.5" y="211.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="252.5" y="222.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)
            </title>
            <rect x="249.5" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="252.5" y="206.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.04%)</title>
            <rect x="250.1" y="259.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="253.1" y="270.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::acquire_stable_list_fast_path() (3 samples, 0.04%)</title>
            <rect x="250.1" y="243.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="253.1" y="254.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples,
                0.06%)
            </title>
            <rect x="250.5" y="259.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="253.5" y="270.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (136 samples, 1.72%)</title>
            <rect x="251.3" y="259.0" width="20.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="254.3" y="270.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (6 samples, 0.08%)</title>
            <rect x="271.7" y="259.0" width="0.9" height="15" fill="#f87979" rx="2" ry="2"/>
            <text x="274.7" y="270.0"></text>
        </g>
        <g>
            <title>_pthread_cond_updateval (5 samples, 0.06%)</title>
            <rect x="271.9" y="243.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
            <text x="274.9" y="254.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (2 samples, 0.03%)</title>
            <rect x="272.9" y="275.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
            <text x="275.9" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.sendResponse (3 samples, 0.04%)</title>
            <rect x="273.2" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="276.2" y="398.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$73/753104640.run (3,090 samples, 39.12%)</title>
            <rect x="273.7" y="387.0" width="461.6" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="276.7" y="398.0">ru/mail/polis/service/rubtsov/MyService$$Lambda$73/753104640.run</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$3 (3,090 samples, 39.12%)</title>
            <rect x="273.7" y="371.0" width="461.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="276.7" y="382.0">ru/mail/polis/service/rubtsov/MyService.lambda$executeAsync$3</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.sendResponse (942 samples, 11.93%)</title>
            <rect x="273.8" y="355.0" width="140.7" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="276.8" y="366.0">one/nio/http/HttpS..</text>
        </g>
        <g>
            <title>java/lang/String.equalsIgnoreCase (3 samples, 0.04%)</title>
            <rect x="275.8" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="278.8" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (3 samples, 0.04%)</title>
            <rect x="275.8" y="323.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="278.8" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title>
            <rect x="275.8" y="307.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="278.8" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.writeResponse (901 samples, 11.41%)</title>
            <rect x="276.2" y="339.0" width="134.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="279.2" y="350.0">one/nio/http/Http..</text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (60 samples, 0.76%)</title>
            <rect x="277.0" y="323.0" width="8.9" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="280.0" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (36 samples, 0.46%)</title>
            <rect x="280.5" y="307.0" width="5.4" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="283.5" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (36 samples, 0.46%)</title>
            <rect x="280.5" y="291.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="283.5" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (36 samples, 0.46%)</title>
            <rect x="280.5" y="275.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="283.5" y="286.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (10 samples, 0.13%)</title>
            <rect x="284.4" y="259.0" width="1.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
            <text x="287.4" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (836 samples, 10.58%)</title>
            <rect x="285.9" y="323.0" width="124.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="288.9" y="334.0">one/nio/net/Ses..</text>
        </g>
        <g>
            <title>one/nio/http/Response.toBytes (2 samples, 0.03%)</title>
            <rect x="286.7" y="307.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="289.7" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.write (829 samples, 10.49%)</title>
            <rect x="287.0" y="307.0" width="123.8" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="290.0" y="318.0">one/nio/net/Ses..</text>
        </g>
        <g>
            <title>one/nio/net/Session$ArrayQueueItem.write (817 samples, 10.34%)</title>
            <rect x="287.9" y="291.0" width="122.0" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="290.9" y="302.0">one/nio/net/Ses..</text>
        </g>
        <g>
            <title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.03%)</title>
            <rect x="288.5" y="275.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="291.5" y="286.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::exit(bool, Thread*) (3 samples, 0.04%)</title>
            <rect x="288.8" y="275.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="291.8" y="286.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.03%)</title>
            <rect x="289.2" y="275.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="292.2" y="286.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.03%)</title>
            <rect x="289.5" y="275.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="292.5" y="286.0"></text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (14 samples, 0.18%)
            </title>
            <rect x="289.8" y="275.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="292.8" y="286.0"></text>
        </g>
        <g>
            <title>ExceptionMark::ExceptionMark(Thread*&amp;) (2 samples, 0.03%)</title>
            <rect x="289.8" y="259.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="292.8" y="270.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::fast_exit(oopDesc*, BasicLock*, Thread*) (6 samples, 0.08%)</title>
            <rect x="290.2" y="259.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="293.2" y="270.0"></text>
        </g>
        <g>
            <title>ObjectSynchronizer::inflate(Thread*, oopDesc*, ObjectSynchronizer::InflateCause) (6 samples, 0.08%)
            </title>
            <rect x="290.2" y="243.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="293.2" y="254.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (5 samples, 0.06%)</title>
            <rect x="291.1" y="259.0" width="0.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="294.1" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.write (789 samples, 9.99%)</title>
            <rect x="292.0" y="275.0" width="117.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="295.0" y="286.0">one/nio/net/Ja..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.wrap (3 samples, 0.04%)</title>
            <rect x="292.6" y="259.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="295.6" y="270.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (13 samples, 0.16%)</title>
            <rect x="293.1" y="259.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="296.1" y="270.0"></text>
        </g>
        <g>
            <title>gettimeofday (10 samples, 0.13%)</title>
            <rect x="293.2" y="243.0" width="1.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="296.2" y="254.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (7 samples, 0.09%)</title>
            <rect x="293.4" y="227.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="296.4" y="238.0"></text>
        </g>
        <g>
            <title>_res (2 samples, 0.03%)</title>
            <rect x="294.0" y="211.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="297.0" y="222.0"></text>
        </g>
        <g>
            <title>svcudp_op (2 samples, 0.03%)</title>
            <rect x="294.4" y="227.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="297.4" y="238.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title>
            <rect x="294.7" y="243.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
            <text x="297.7" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (769 samples, 9.74%)</title>
            <rect x="295.0" y="259.0" width="114.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="298.0" y="270.0">sun/nio/ch/Soc..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.04%)</title>
            <rect x="295.0" y="243.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="298.0" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.04%)</title>
            <rect x="295.0" y="227.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="298.0" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.04%)</title>
            <rect x="295.0" y="211.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="298.0" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (758 samples, 9.60%)</title>
            <rect x="295.5" y="243.0" width="113.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="298.5" y="254.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (758 samples, 9.60%)</title>
            <rect x="295.5" y="227.0" width="113.2" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="298.5" y="238.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (750 samples, 9.49%)</title>
            <rect x="295.5" y="211.0" width="112.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="298.5" y="222.0">sun/nio/ch/IOU..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (750 samples, 9.49%)</title>
            <rect x="295.5" y="195.0" width="112.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="298.5" y="206.0">sun/nio/ch/Soc..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (713 samples, 9.03%)</title>
            <rect x="300.9" y="179.0" width="106.5" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="303.9" y="190.0">sun/nio/ch/Fi..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_write0 (14 samples, 0.18%)</title>
            <rect x="305.0" y="163.0" width="2.1" height="15" fill="#f67676" rx="2" ry="2"/>
            <text x="308.0" y="174.0"></text>
        </g>
        <g>
            <title>fdval (2 samples, 0.03%)</title>
            <rect x="306.8" y="147.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
            <text x="309.8" y="158.0"></text>
        </g>
        <g>
            <title>write (671 samples, 8.49%)</title>
            <rect x="307.1" y="163.0" width="100.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
            <text x="310.1" y="174.0">write</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.10%)</title>
            <rect x="407.5" y="211.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="410.5" y="222.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (8 samples, 0.10%)</title>
            <rect x="407.5" y="195.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="410.5" y="206.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.10%)</title>
            <rect x="407.5" y="179.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="410.5" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (2 samples, 0.03%)</title>
            <rect x="408.4" y="163.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="411.4" y="174.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (7 samples, 0.09%)</title>
            <rect x="408.7" y="243.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="411.7" y="254.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (6 samples, 0.08%)</title>
            <rect x="409.9" y="291.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="412.9" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (25 samples, 0.32%)</title>
            <rect x="410.8" y="339.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="413.8" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (14 samples, 0.18%)</title>
            <rect x="412.1" y="323.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="415.1" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (14 samples, 0.18%)</title>
            <rect x="412.1" y="307.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="415.1" y="318.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (5 samples, 0.06%)</title>
            <rect x="413.5" y="291.0" width="0.7" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="416.5" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (2 samples, 0.03%)</title>
            <rect x="414.2" y="323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="417.2" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (2 samples, 0.03%)</title>
            <rect x="414.2" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="417.2" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/2012764883.act (2,141 samples, 27.10%)</title>
            <rect x="414.5" y="355.0" width="319.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="417.5" y="366.0">ru/mail/polis/service/rubtsov/MyService$$La..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.lambda$entity$1 (2,141 samples, 27.10%)</title>
            <rect x="414.5" y="339.0" width="319.9" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="417.5" y="350.0">ru/mail/polis/service/rubtsov/MyService.lam..</text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.upsert (2,140 samples, 27.09%)</title>
            <rect x="414.7" y="323.0" width="319.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="417.7" y="334.0">ru/mail/polis/service/rubtsov/MyService.ups..</text>
        </g>
        <g>
            <title>java/util/HashMap.get (9 samples, 0.11%)</title>
            <rect x="415.3" y="307.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="418.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (8 samples, 0.10%)</title>
            <rect x="415.4" y="291.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="418.4" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.hashCode (8 samples, 0.10%)</title>
            <rect x="415.4" y="275.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="418.4" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.hashCode (8 samples, 0.10%)</title>
            <rect x="415.4" y="259.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="418.4" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.put (1,617 samples, 20.47%)</title>
            <rect x="416.6" y="307.0" width="241.6" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="419.6" y="318.0">one/nio/http/HttpClient.put</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.createRequest (7 samples, 0.09%)</title>
            <rect x="417.5" y="291.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="420.5" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (1,604 samples, 20.31%)</title>
            <rect x="418.6" y="291.0" width="239.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="421.6" y="302.0">one/nio/http/HttpClient.invoke</text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.invoke (1,604 samples, 20.31%)</title>
            <rect x="418.6" y="275.0" width="239.6" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="421.6" y="286.0">one/nio/http/HttpClient.invoke</text>
        </g>
        <g>
            <title>java/lang/String.equalsIgnoreCase (2 samples, 0.03%)</title>
            <rect x="420.5" y="259.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="423.5" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (2 samples, 0.03%)</title>
            <rect x="420.5" y="243.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="423.5" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title>
            <rect x="420.5" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="423.5" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (741 samples, 9.38%)</title>
            <rect x="420.8" y="259.0" width="110.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="423.8" y="270.0">one/nio/http/..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (738 samples, 9.34%)</title>
            <rect x="421.1" y="243.0" width="110.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="424.1" y="254.0">one/nio/net/J..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (725 samples, 9.18%)</title>
            <rect x="423.1" y="227.0" width="108.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="426.1" y="238.0">sun/nio/ch/So..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.04%)</title>
            <rect x="423.1" y="211.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="426.1" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title>
            <rect x="423.2" y="195.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="426.2" y="206.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (690 samples, 8.74%)</title>
            <rect x="423.6" y="211.0" width="103.1" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="426.6" y="222.0">sun/nio/ch/I..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (690 samples, 8.74%)</title>
            <rect x="423.6" y="195.0" width="103.1" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="426.6" y="206.0">sun/nio/ch/I..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (690 samples, 8.74%)</title>
            <rect x="423.6" y="179.0" width="103.1" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="426.6" y="190.0">sun/nio/ch/I..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (690 samples, 8.74%)</title>
            <rect x="423.6" y="163.0" width="103.1" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="426.6" y="174.0">sun/nio/ch/S..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (677 samples, 8.57%)</title>
            <rect x="425.4" y="147.0" width="101.2" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="428.4" y="158.0">sun/nio/ch/F..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (6 samples, 0.08%)</title>
            <rect x="430.8" y="131.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="433.8" y="142.0"></text>
        </g>
        <g>
            <title>read (634 samples, 8.03%)</title>
            <rect x="431.9" y="131.0" width="94.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
            <text x="434.9" y="142.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginRead (14 samples, 0.18%)</title>
            <rect x="526.7" y="211.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="529.7" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 0.04%)</title>
            <rect x="527.6" y="195.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="530.6" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (2 samples, 0.03%)</title>
            <rect x="527.8" y="179.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="530.8" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (2 samples, 0.03%)</title>
            <rect x="527.8" y="163.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="530.8" y="174.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (2 samples, 0.03%)</title>
            <rect x="527.8" y="147.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="530.8" y="158.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (5 samples, 0.06%)</title>
            <rect x="528.1" y="195.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="531.1" y="206.0"></text>
        </g>
        <g>
            <title>pthread_self (4 samples, 0.05%)</title>
            <rect x="528.2" y="179.0" width="0.6" height="15" fill="#f27070" rx="2" ry="2"/>
            <text x="531.2" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endRead (17 samples, 0.22%)</title>
            <rect x="528.8" y="211.0" width="2.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="531.8" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (14 samples, 0.18%)</title>
            <rect x="529.3" y="195.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="532.3" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (4 samples, 0.05%)</title>
            <rect x="530.8" y="179.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="533.8" y="190.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (3 samples, 0.04%)</title>
            <rect x="530.9" y="163.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="533.9" y="174.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (3 samples, 0.04%)</title>
            <rect x="530.9" y="147.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="533.9" y="158.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readResponse (37 samples, 0.47%)</title>
            <rect x="531.5" y="259.0" width="5.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="534.5" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient$ResponseReader.readLine (29 samples, 0.37%)</title>
            <rect x="532.0" y="243.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="535.0" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (19 samples, 0.24%)</title>
            <rect x="533.4" y="227.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="536.4" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (17 samples, 0.22%)</title>
            <rect x="533.7" y="211.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="536.7" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (5 samples, 0.06%)</title>
            <rect x="536.3" y="243.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="539.3" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (3 samples, 0.04%)</title>
            <rect x="536.6" y="227.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="539.6" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.04%)</title>
            <rect x="536.6" y="211.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="539.6" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpClient.createRequest (2 samples, 0.03%)</title>
            <rect x="537.0" y="259.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="540.0" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.toBytes (46 samples, 0.58%)</title>
            <rect x="537.3" y="259.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="540.3" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/util/ByteArrayBuilder.append (17 samples, 0.22%)</title>
            <rect x="541.7" y="243.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="544.7" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.length (17 samples, 0.22%)</title>
            <rect x="541.7" y="227.0" width="2.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="544.7" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (17 samples, 0.22%)</title>
            <rect x="541.7" y="211.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="544.7" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/http/Response.getHeader (8 samples, 0.10%)</title>
            <rect x="544.2" y="259.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="547.2" y="270.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (7 samples, 0.09%)</title>
            <rect x="544.4" y="243.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="547.4" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.09%)</title>
            <rect x="544.4" y="227.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="547.4" y="238.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="545.1" y="211.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="548.1" y="222.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.setTimeout (4 samples, 0.05%)</title>
            <rect x="545.4" y="259.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="548.4" y="270.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.socket (4 samples, 0.05%)</title>
            <rect x="545.4" y="243.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="548.4" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.writeFully (729 samples, 9.23%)</title>
            <rect x="546.0" y="259.0" width="108.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="549.0" y="270.0">one/nio/net/J..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels$1.write (522 samples, 6.61%)</title>
            <rect x="546.1" y="243.0" width="78.0" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="549.1" y="254.0">java/nio/..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFully (521 samples, 6.60%)</title>
            <rect x="546.3" y="227.0" width="77.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="549.3" y="238.0">java/nio/..</text>
        </g>
        <g>
            <title>java/nio/channels/Channels.writeFullyImpl (517 samples, 6.55%)</title>
            <rect x="546.9" y="211.0" width="77.2" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="549.9" y="222.0">java/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.write (516 samples, 6.53%)</title>
            <rect x="547.0" y="195.0" width="77.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="550.0" y="206.0">sun/nio/c..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (488 samples, 6.18%)</title>
            <rect x="547.0" y="179.0" width="72.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="550.0" y="190.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.write (486 samples, 6.15%)</title>
            <rect x="547.3" y="163.0" width="72.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="550.3" y="174.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.writeFromNativeBuffer (478 samples, 6.05%)</title>
            <rect x="547.3" y="147.0" width="71.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="550.3" y="158.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.write (478 samples, 6.05%)</title>
            <rect x="547.3" y="131.0" width="71.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="550.3" y="142.0">sun/nio/..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.write0 (455 samples, 5.76%)</title>
            <rect x="550.8" y="115.0" width="67.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="553.8" y="126.0">sun/nio..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_write0 (9 samples, 0.11%)</title>
            <rect x="553.5" y="99.0" width="1.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
            <text x="556.5" y="110.0"></text>
        </g>
        <g>
            <title>write (428 samples, 5.42%)</title>
            <rect x="554.8" y="99.0" width="63.9" height="15" fill="#f87979" rx="2" ry="2"/>
            <text x="557.8" y="110.0">write</text>
        </g>
        <g>
            <title>sun/nio/ch/Util.getTemporaryDirectBuffer (8 samples, 0.10%)</title>
            <rect x="618.7" y="147.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="621.7" y="158.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (8 samples, 0.10%)</title>
            <rect x="618.7" y="131.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="621.7" y="142.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (8 samples, 0.10%)</title>
            <rect x="618.7" y="115.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="621.7" y="126.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.beginWrite (18 samples, 0.23%)</title>
            <rect x="619.9" y="179.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="622.9" y="190.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/NativeThread.current (12 samples, 0.15%)</title>
            <rect x="620.8" y="163.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="623.8" y="174.0"></text>
        </g>
        <g>
            <title>pthread_self (11 samples, 0.14%)</title>
            <rect x="621.0" y="147.0" width="1.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="624.0" y="158.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endWrite (10 samples, 0.13%)</title>
            <rect x="622.6" y="179.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="625.6" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (7 samples, 0.09%)</title>
            <rect x="623.1" y="163.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="626.1" y="174.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketAdaptor.getOutputStream (205 samples, 2.60%)</title>
            <rect x="624.3" y="243.0" width="30.6" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="627.3" y="254.0">su..</text>
        </g>
        <g>
            <title>java/security/AccessController.doPrivileged (192 samples, 2.43%)</title>
            <rect x="625.9" y="227.0" width="28.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="628.9" y="238.0">ja..</text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::remove_at(int) (4 samples, 0.05%)</title>
            <rect x="626.5" y="211.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="629.5" y="222.0"></text>
        </g>
        <g>
            <title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode,
                Klass::PrivateLookupMode) const (3 samples, 0.04%)
            </title>
            <rect x="627.1" y="211.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="630.1" y="222.0"></text>
        </g>
        <g>
            <title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.04%)</title>
            <rect x="627.6" y="211.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="630.6" y="222.0"></text>
        </g>
        <g>
            <title>JVM_DoPrivileged (148 samples, 1.87%)</title>
            <rect x="628.0" y="211.0" width="22.1" height="15" fill="#f57474" rx="2" ry="2"/>
            <text x="631.0" y="222.0">J..</text>
        </g>
        <g>
            <title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ull, G1BarrierSet&gt;,
                (AccessInternal::BarrierType)0, 5292148ull&gt;::oop_access_barrier(void*, oopDesc*) (2 samples, 0.03%)
            </title>
            <rect x="631.9" y="195.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="634.9" y="206.0"></text>
        </g>
        <g>
            <title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (3 samples, 0.04%)</title>
            <rect x="632.5" y="195.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="635.5" y="206.0"></text>
        </g>
        <g>
            <title>GrowableArray&lt;Metadata*&gt;::append(Metadata* const&amp;) (3 samples, 0.04%)</title>
            <rect x="633.2" y="195.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="636.2" y="206.0"></text>
        </g>
        <g>
            <title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode,
                Klass::PrivateLookupMode) const (6 samples, 0.08%)
            </title>
            <rect x="633.8" y="195.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="636.8" y="206.0"></text>
        </g>
        <g>
            <title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*,
                Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (6 samples, 0.08%)
            </title>
            <rect x="633.8" y="179.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="636.8" y="190.0"></text>
        </g>
        <g>
            <title>binary_search(Array&lt;Method*&gt; const*, Symbol const*) (4 samples, 0.05%)</title>
            <rect x="634.1" y="163.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="637.1" y="174.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_handle(oopDesc*) (3 samples, 0.04%)</title>
            <rect x="634.7" y="195.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="637.7" y="206.0"></text>
        </g>
        <g>
            <title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (30 samples,
                0.38%)
            </title>
            <rect x="635.5" y="195.0" width="4.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="638.5" y="206.0"></text>
        </g>
        <g>
            <title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.03%)</title>
            <rect x="636.4" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="639.4" y="190.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_block(Thread*) (6 samples, 0.08%)</title>
            <rect x="636.8" y="179.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="639.8" y="190.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::release_block(JNIHandleBlock*, Thread*) (4 samples, 0.05%)</title>
            <rect x="637.7" y="179.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="640.7" y="190.0"></text>
        </g>
        <g>
            <title>JavaCallArguments::parameters() (2 samples, 0.03%)</title>
            <rect x="638.3" y="179.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="641.3" y="190.0"></text>
        </g>
        <g>
            <title>JavaCallWrapper::JavaCallWrapper(methodHandle const&amp;, Handle, JavaValue*, Thread*) (3 samples,
                0.04%)
            </title>
            <rect x="638.6" y="179.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="641.6" y="190.0"></text>
        </g>
        <g>
            <title>JNIHandleBlock::allocate_block(Thread*) (2 samples, 0.03%)</title>
            <rect x="638.6" y="163.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="641.6" y="174.0"></text>
        </g>
        <g>
            <title>os::stack_shadow_pages_available(Thread*, methodHandle const&amp;, unsigned char*) (4 samples,
                0.05%)
            </title>
            <rect x="639.4" y="179.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="642.4" y="190.0"></text>
        </g>
        <g>
            <title>AbstractInterpreter::size_top_interpreter_activation(Method*) (2 samples, 0.03%)</title>
            <rect x="639.7" y="163.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="642.7" y="174.0"></text>
        </g>
        <g>
            <title>JavaThread::pd_last_frame() (13 samples, 0.16%)</title>
            <rect x="640.0" y="195.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="643.0" y="206.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (10 samples, 0.13%)</title>
            <rect x="640.0" y="179.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="643.0" y="190.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob_unsafe(void*) (5 samples, 0.06%)</title>
            <rect x="640.0" y="163.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="643.0" y="174.0"></text>
        </g>
        <g>
            <title>CodeCache::get_code_heap_containing(void*) (3 samples, 0.04%)</title>
            <rect x="640.3" y="147.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="643.3" y="158.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_blob_unsafe(void*) const (4 samples, 0.05%)</title>
            <rect x="640.7" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="643.7" y="174.0"></text>
        </g>
        <g>
            <title>CodeHeap::find_start(void*) const (3 samples, 0.04%)</title>
            <rect x="640.9" y="147.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="643.9" y="158.0"></text>
        </g>
        <g>
            <title>nmethod::is_zombie() const (2 samples, 0.03%)</title>
            <rect x="641.6" y="179.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="644.6" y="190.0"></text>
        </g>
        <g>
            <title>Method::is_ignored_by_security_stack_walk() const (4 samples, 0.05%)</title>
            <rect x="641.9" y="195.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="644.9" y="206.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (8 samples, 0.10%)
            </title>
            <rect x="642.6" y="195.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="645.6" y="206.0"></text>
        </g>
        <g>
            <title>JavaThread::set_thread_state(JavaThreadState) (2 samples, 0.03%)</title>
            <rect x="642.6" y="179.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="645.6" y="190.0"></text>
        </g>
        <g>
            <title>OrderAccess::fence() (2 samples, 0.03%)</title>
            <rect x="642.9" y="179.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="645.9" y="190.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (4 samples, 0.05%)</title>
            <rect x="643.2" y="179.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
            <text x="646.2" y="190.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (3 samples, 0.04%)</title>
            <rect x="644.4" y="195.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="647.4" y="206.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (35 samples, 0.44%)</title>
            <rect x="644.9" y="195.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="647.9" y="206.0"></text>
        </g>
        <g>
            <title>Method::is_ignored_by_security_stack_walk() const (16 samples, 0.20%)</title>
            <rect x="644.9" y="179.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="647.9" y="190.0"></text>
        </g>
        <g>
            <title>Klass::is_subclass_of(Klass const*) const (9 samples, 0.11%)</title>
            <rect x="645.9" y="163.0" width="1.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="648.9" y="174.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_next() (18 samples, 0.23%)</title>
            <rect x="647.4" y="179.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="650.4" y="190.0"></text>
        </g>
        <g>
            <title>frame::sender(RegisterMap*) const (4 samples, 0.05%)</title>
            <rect x="647.6" y="163.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="650.6" y="174.0"></text>
        </g>
        <g>
            <title>frame::sender_for_compiled_frame(RegisterMap*) const (3 samples, 0.04%)</title>
            <rect x="647.7" y="147.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="650.7" y="158.0"></text>
        </g>
        <g>
            <title>CodeCache::find_blob(void*) (2 samples, 0.03%)</title>
            <rect x="647.9" y="131.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="650.9" y="142.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (12 samples, 0.15%)</title>
            <rect x="648.3" y="163.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="651.3" y="174.0"></text>
        </g>
        <g>
            <title>CompressedReadStream::read_int() (2 samples, 0.03%)</title>
            <rect x="648.8" y="147.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="651.8" y="158.0"></text>
        </g>
        <g>
            <title>PcDescContainer::find_pc_desc_internal(unsigned char*, bool, PcDescSearch const&amp;) (2 samples,
                0.03%)
            </title>
            <rect x="649.2" y="147.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="652.2" y="158.0"></text>
        </g>
        <g>
            <title>PcDescCache::find_pc_desc(int, bool) (2 samples, 0.03%)</title>
            <rect x="649.2" y="131.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="652.2" y="142.0"></text>
        </g>
        <g>
            <title>nmethod::metadata_at(int) const (4 samples, 0.05%)</title>
            <rect x="649.5" y="147.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="652.5" y="158.0"></text>
        </g>
        <g>
            <title>Java_java_security_AccessController_doPrivileged__Ljava_security_PrivilegedExceptionAction_2 (6
                samples, 0.08%)
            </title>
            <rect x="650.4" y="211.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
            <text x="653.4" y="222.0"></text>
        </g>
        <g>
            <title>PrivilegedElement::initialize(vframeStream*, oopDesc*, PrivilegedElement*, Thread*) (2 samples,
                0.03%)
            </title>
            <rect x="651.3" y="211.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="654.3" y="222.0"></text>
        </g>
        <g>
            <title>call_stub (5 samples, 0.06%)</title>
            <rect x="651.6" y="211.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
            <text x="654.6" y="222.0"></text>
        </g>
        <g>
            <title>methodHandle::~methodHandle() (2 samples, 0.03%)</title>
            <rect x="652.5" y="211.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="655.5" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketAdaptor$2.run (6 samples, 0.08%)</title>
            <rect x="653.0" y="211.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="656.0" y="222.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::fill_from_frame() (3 samples, 0.04%)</title>
            <rect x="653.9" y="211.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="656.9" y="222.0"></text>
        </g>
        <g>
            <title>vframeStreamCommon::security_get_caller_frame(int) (2 samples, 0.03%)</title>
            <rect x="654.3" y="211.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="657.3" y="222.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.isOutputOpen (2 samples, 0.03%)</title>
            <rect x="654.6" y="227.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="657.6" y="238.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.borrowObject (12 samples, 0.15%)</title>
            <rect x="654.9" y="259.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="657.9" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/pool/SocketPool.createObject (3 samples, 0.04%)</title>
            <rect x="656.2" y="243.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="659.2" y="254.0"></text>
        </g>
        <g>
            <title>one/nio/pool/Pool.returnObject (10 samples, 0.13%)</title>
            <rect x="656.7" y="259.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="659.7" y="270.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.addFirst (5 samples, 0.06%)</title>
            <rect x="657.4" y="243.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="660.4" y="254.0"></text>
        </g>
        <g>
            <title>java/util/LinkedList.linkFirst (5 samples, 0.06%)</title>
            <rect x="657.4" y="227.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="660.4" y="238.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MyDAO.upsert (495 samples, 6.27%)</title>
            <rect x="658.6" y="307.0" width="74.0" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="661.6" y="318.0">ru/mail/..</text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTablePool.upsert (495 samples, 6.27%)</title>
            <rect x="658.6" y="291.0" width="74.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="661.6" y="302.0">ru/mail/..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (5 samples, 0.06%)</title>
            <rect x="658.6" y="275.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="661.6" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (5 samples, 0.06%)</title>
            <rect x="658.6" y="259.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="661.6" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (5 samples, 0.06%)</title>
            <rect x="658.6" y="243.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="661.6" y="254.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal.get (3 samples, 0.04%)</title>
            <rect x="658.8" y="227.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="661.8" y="238.0"></text>
        </g>
        <g>
            <title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (3 samples, 0.04%)</title>
            <rect x="658.8" y="211.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="661.8" y="222.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/MemTable.upsert (489 samples, 6.19%)</title>
            <rect x="659.5" y="275.0" width="73.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="662.5" y="286.0">ru/mail/..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.put (422 samples, 5.34%)</title>
            <rect x="659.5" y="259.0" width="63.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="662.5" y="270.0">java/ut..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.doPut (402 samples, 5.09%)</title>
            <rect x="661.9" y="243.0" width="60.1" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="664.9" y="254.0">java/u..</text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.cpr (382 samples, 4.84%)</title>
            <rect x="664.9" y="227.0" width="57.1" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="667.9" y="238.0">java/u..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (382 samples, 4.84%)</title>
            <rect x="664.9" y="211.0" width="57.1" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="667.9" y="222.0">java/n..</text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.compareTo (116 samples, 1.47%)</title>
            <rect x="704.6" y="195.0" width="17.4" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="707.6" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/BufferMismatch.mismatch (108 samples, 1.37%)</title>
            <rect x="705.8" y="179.0" width="16.2" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="708.8" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.get (45 samples, 0.57%)</title>
            <rect x="715.3" y="163.0" width="6.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="718.3" y="174.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.checkIndex (45 samples, 0.57%)</title>
            <rect x="715.3" y="147.0" width="6.7" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="718.3" y="158.0"></text>
        </g>
        <g>
            <title>vectorizedMismatch (11 samples, 0.14%)</title>
            <rect x="720.3" y="131.0" width="1.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
            <text x="723.3" y="142.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (4 samples, 0.05%)</title>
            <rect x="722.0" y="243.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="725.0" y="254.0"></text>
        </g>
        <g>
            <title>gettimeofday (3 samples, 0.04%)</title>
            <rect x="722.0" y="227.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="725.0" y="238.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title>
            <rect x="722.0" y="211.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="725.0" y="222.0"></text>
        </g>
        <g>
            <title>_res (2 samples, 0.03%)</title>
            <rect x="722.0" y="195.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
            <text x="725.0" y="206.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/dao/rubtsov/Item.of (67 samples, 0.85%)</title>
            <rect x="722.6" y="259.0" width="10.0" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="725.6" y="270.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.duplicate (66 samples, 0.84%)</title>
            <rect x="722.7" y="243.0" width="9.9" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="725.7" y="254.0"></text>
        </g>
        <g>
            <title>java/nio/HeapByteBuffer.&lt;init&gt; (66 samples, 0.84%)</title>
            <rect x="722.7" y="227.0" width="9.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="725.7" y="238.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.&lt;init&gt; (66 samples, 0.84%)</title>
            <rect x="722.7" y="211.0" width="9.9" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="725.7" y="222.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.&lt;init&gt; (66 samples, 0.84%)</title>
            <rect x="722.7" y="195.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="725.7" y="206.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (62 samples, 0.78%)</title>
            <rect x="722.7" y="179.0" width="9.3" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="725.7" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.limit (62 samples, 0.78%)</title>
            <rect x="722.7" y="163.0" width="9.3" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="725.7" y="174.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.position (2 samples, 0.03%)</title>
            <rect x="730.0" y="147.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="733.0" y="158.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/ConcurrentSkipListMap.doPut (4 samples, 0.05%)</title>
            <rect x="730.3" y="147.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="733.3" y="158.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (7 samples, 0.09%)</title>
            <rect x="730.9" y="147.0" width="1.1" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="733.9" y="158.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title>
            <rect x="732.0" y="179.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="735.0" y="190.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.position (4 samples, 0.05%)</title>
            <rect x="732.0" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="735.0" y="174.0"></text>
        </g>
        <g>
            <title>java/nio/Buffer.limit (3 samples, 0.04%)</title>
            <rect x="732.1" y="147.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="735.1" y="158.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.replicas (12 samples, 0.15%)</title>
            <rect x="732.6" y="307.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="735.6" y="318.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/BasicTopology.replicas (12 samples, 0.15%)</title>
            <rect x="732.6" y="291.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="735.6" y="302.0"></text>
        </g>
        <g>
            <title>java/nio/ByteBuffer.hashCode (12 samples, 0.15%)</title>
            <rect x="732.6" y="275.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="735.6" y="286.0"></text>
        </g>
        <g>
            <title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="734.1" y="259.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
            <text x="737.1" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.upsert (6 samples, 0.08%)</title>
            <rect x="734.4" y="355.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="737.4" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/server/SelectorThread.run (2,987 samples, 37.81%)</title>
            <rect x="735.4" y="435.0" width="446.2" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="738.4" y="446.0">one/nio/server/SelectorThread.run</text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.select (1,552 samples, 19.65%)</title>
            <rect x="737.8" y="419.0" width="231.9" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="740.8" y="430.0">one/nio/net/JavaSelector.select</text>
        </g>
        <g>
            <title>__cxx_global_var_init4 (3 samples, 0.04%)</title>
            <rect x="739.5" y="403.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="742.5" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.iteratorFor (19 samples, 0.24%)</title>
            <rect x="740.0" y="403.0" width="2.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="743.0" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$2.iterator (8 samples, 0.10%)</title>
            <rect x="741.7" y="387.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="744.7" y="398.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.iterator (8 samples, 0.10%)</title>
            <rect x="741.7" y="371.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="744.7" y="382.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeySet.iterator (8 samples, 0.10%)</title>
            <rect x="741.7" y="355.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="744.7" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$KeyIterator.&lt;init&gt; (8 samples, 0.10%)</title>
            <rect x="741.7" y="339.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="744.7" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.&lt;init&gt; (8 samples, 0.10%)</title>
            <rect x="741.7" y="323.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="744.7" y="334.0"></text>
        </g>
        <g>
            <title>one/nio/net/JavaSelector.registerPendingSessions (14 samples, 0.18%)</title>
            <rect x="742.9" y="403.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="745.9" y="414.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelectableChannel.register (12 samples, 0.15%)</title>
            <rect x="743.2" y="387.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="746.2" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeNanos() (7 samples, 0.09%)</title>
            <rect x="745.0" y="403.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
            <text x="748.0" y="414.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.select (1,486 samples, 18.81%)</title>
            <rect x="746.0" y="403.0" width="222.0" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="749.0" y="414.0">sun/nio/ch/SelectorImpl.select</text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1,469 samples, 18.60%)</title>
            <rect x="748.6" y="387.0" width="219.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="751.6" y="398.0">sun/nio/ch/SelectorImpl.lockA..</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.doSelect (1,462 samples, 18.51%)</title>
            <rect x="749.5" y="371.0" width="218.4" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="752.5" y="382.0">sun/nio/ch/KQueueSelectorImpl..</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueue.poll (1,320 samples, 16.71%)</title>
            <rect x="749.9" y="355.0" width="197.2" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="752.9" y="366.0">sun/nio/ch/KQueue.poll</text>
        </g>
        <g>
            <title>JNI_OnLoad (2 samples, 0.03%)</title>
            <rect x="763.7" y="339.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="766.7" y="350.0"></text>
        </g>
        <g>
            <title>Java_sun_nio_ch_KQueue_poll (18 samples, 0.23%)</title>
            <rect x="764.1" y="339.0" width="2.7" height="15" fill="#ec6868" rx="2" ry="2"/>
            <text x="767.1" y="350.0"></text>
        </g>
        <g>
            <title>kevent (1,207 samples, 15.28%)</title>
            <rect x="766.8" y="339.0" width="180.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="769.8" y="350.0">kevent</text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processEvents (67 samples, 0.85%)</title>
            <rect x="947.1" y="355.0" width="10.0" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="950.1" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (22 samples, 0.28%)</title>
            <rect x="947.1" y="339.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="950.1" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (22 samples, 0.28%)</title>
            <rect x="947.1" y="323.0" width="3.3" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="950.1" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.putVal (2 samples, 0.03%)</title>
            <rect x="950.1" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="953.1" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processReadyEvents (45 samples, 0.57%)</title>
            <rect x="950.4" y="339.0" width="6.7" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="953.4" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.add (32 samples, 0.41%)</title>
            <rect x="952.3" y="323.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="955.3" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.put (32 samples, 0.41%)</title>
            <rect x="952.3" y="307.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="955.3" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.putVal (29 samples, 0.37%)</title>
            <rect x="952.8" y="291.0" width="4.3" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="955.8" y="302.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.newNode (18 samples, 0.23%)</title>
            <rect x="953.4" y="275.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="956.4" y="286.0"></text>
        </g>
        <g>
            <title>vtable stub (7 samples, 0.09%)</title>
            <rect x="956.1" y="275.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="959.1" y="286.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/KQueueSelectorImpl.processUpdateQueue (19 samples, 0.24%)</title>
            <rect x="957.1" y="355.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="960.1" y="366.0"></text>
        </g>
        <g>
            <title>java/util/ArrayDeque.pollFirst (7 samples, 0.09%)</title>
            <rect x="958.9" y="339.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="961.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/ArrayDeque.elementAt (5 samples, 0.06%)</title>
            <rect x="959.2" y="323.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="962.2" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.begin (34 samples, 0.43%)</title>
            <rect x="959.9" y="355.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="962.9" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.begin (34 samples, 0.43%)</title>
            <rect x="959.9" y="339.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="962.9" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.isInterrupted (8 samples, 0.10%)</title>
            <rect x="959.9" y="323.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="962.9" y="334.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (24 samples, 0.30%)</title>
            <rect x="961.1" y="323.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="964.1" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (24 samples, 0.30%)</title>
            <rect x="961.1" y="307.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="964.1" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (24 samples, 0.30%)</title>
            <rect x="961.1" y="291.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="964.1" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (2 samples, 0.03%)</title>
            <rect x="964.7" y="323.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="967.7" y="334.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.end (7 samples, 0.09%)</title>
            <rect x="965.0" y="355.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="968.0" y="366.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractSelector.end (7 samples, 0.09%)</title>
            <rect x="965.0" y="339.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="968.0" y="350.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.blockedOn (7 samples, 0.09%)</title>
            <rect x="965.0" y="323.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="968.0" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/System$2.blockedOn (6 samples, 0.08%)</title>
            <rect x="965.0" y="307.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="968.0" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/Thread.blockedOn (6 samples, 0.08%)</title>
            <rect x="965.0" y="291.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="968.0" y="302.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SelectorImpl.processDeregisterQueue (12 samples, 0.15%)</title>
            <rect x="966.1" y="355.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="969.1" y="366.0"></text>
        </g>
        <g>
            <title>java/util/HashMap$HashIterator.remove (9 samples, 0.11%)</title>
            <rect x="966.4" y="339.0" width="1.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="969.4" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/Util$2.clear (3 samples, 0.04%)</title>
            <rect x="968.0" y="403.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
            <text x="971.0" y="414.0"></text>
        </g>
        <g>
            <title>java/util/HashSet.clear (3 samples, 0.04%)</title>
            <rect x="968.0" y="387.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="971.0" y="398.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.clear (3 samples, 0.04%)</title>
            <rect x="968.0" y="371.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="971.0" y="382.0"></text>
        </g>
        <g>
            <title>svcudp_op (8 samples, 0.10%)</title>
            <rect x="968.5" y="403.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="971.5" y="414.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.process (1,419 samples, 17.96%)</title>
            <rect x="969.7" y="419.0" width="211.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="972.7" y="430.0">one/nio/net/Session.process</text>
        </g>
        <g>
            <title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.04%)
            </title>
            <rect x="971.3" y="403.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="974.3" y="414.0"></text>
        </g>
        <g>
            <title>ObjectMonitor::ExitEpilog(Thread*, ObjectWaiter*) (3 samples, 0.04%)</title>
            <rect x="971.3" y="387.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="974.3" y="398.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processRead (1,405 samples, 17.79%)</title>
            <rect x="971.7" y="403.0" width="209.9" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="974.7" y="414.0">one/nio/http/HttpSession.pr..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processHttpBuffer (947 samples, 11.99%)</title>
            <rect x="972.0" y="387.0" width="141.5" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="975.0" y="398.0">one/nio/http/HttpS..</text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.handleParsedRequest (814 samples, 10.31%)</title>
            <rect x="972.6" y="371.0" width="121.6" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="975.6" y="382.0">one/nio/http/Ht..</text>
        </g>
        <g>
            <title>java/util/LinkedList.addLast (4 samples, 0.05%)</title>
            <rect x="974.4" y="355.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="977.4" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpServer.handleRequest (798 samples, 10.10%)</title>
            <rect x="975.0" y="355.0" width="119.2" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="978.0" y="366.0">one/nio/http/Ht..</text>
        </g>
        <g>
            <title>RequestHandler2_entity.handleRequest (741 samples, 9.38%)</title>
            <rect x="975.2" y="339.0" width="110.7" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="978.2" y="350.0">RequestHandle..</text>
        </g>
        <g>
            <title>one/nio/http/Request.getParameter (31 samples, 0.39%)</title>
            <rect x="975.2" y="323.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="978.2" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (9 samples, 0.11%)</title>
            <rect x="976.8" y="307.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="979.8" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (9 samples, 0.11%)</title>
            <rect x="976.8" y="291.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="979.8" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (4 samples, 0.05%)</title>
            <rect x="978.2" y="307.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="981.2" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (4 samples, 0.05%)</title>
            <rect x="978.2" y="291.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="981.2" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title>
            <rect x="978.5" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="981.5" y="286.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="978.8" y="307.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="981.8" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/util/URLEncoder.decode (5 samples, 0.06%)</title>
            <rect x="979.1" y="307.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="982.1" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.03%)</title>
            <rect x="979.5" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="982.5" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/String.indexOf (2 samples, 0.03%)</title>
            <rect x="979.5" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="982.5" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.indexOf (2 samples, 0.03%)</title>
            <rect x="979.5" y="259.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="982.5" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.entity (710 samples, 8.99%)</title>
            <rect x="979.8" y="323.0" width="106.1" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="982.8" y="334.0">ru/mail/polis..</text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$MH/309552273.linkToTargetMethod (5 samples, 0.06%)</title>
            <rect x="980.4" y="307.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="983.4" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/invoke/LambdaForm$DMH/2060335578.invokeStatic (5 samples, 0.06%)</title>
            <rect x="980.4" y="291.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="983.4" y="302.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService$$Lambda$71/2012764883.get$Lambda (5 samples, 0.06%)</title>
            <rect x="980.4" y="275.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="983.4" y="286.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.05%)</title>
            <rect x="980.6" y="259.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="983.6" y="270.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (36 samples, 0.46%)</title>
            <rect x="981.2" y="307.0" width="5.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="984.2" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (13 samples, 0.16%)</title>
            <rect x="983.7" y="291.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="986.7" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (13 samples, 0.16%)</title>
            <rect x="983.7" y="275.0" width="1.9" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="986.7" y="286.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (6 samples, 0.08%)</title>
            <rect x="985.6" y="291.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="988.6" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (6 samples, 0.08%)</title>
            <rect x="985.6" y="275.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="988.6" y="286.0"></text>
        </g>
        <g>
            <title>java/util/Arrays.copyOfRange (3 samples, 0.04%)</title>
            <rect x="986.1" y="259.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="989.1" y="270.0"></text>
        </g>
        <g>
            <title>ru/mail/polis/service/rubtsov/MyService.executeAsync (665 samples, 8.42%)</title>
            <rect x="986.5" y="307.0" width="99.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="989.5" y="318.0">ru/mail/poli..</text>
        </g>
        <g>
            <title>java/util/concurrent/ThreadPoolExecutor.execute (665 samples, 8.42%)</title>
            <rect x="986.5" y="291.0" width="99.4" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="989.5" y="302.0">java/util/co..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.offer (650 samples, 8.23%)</title>
            <rect x="988.2" y="275.0" width="97.1" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="991.2" y="286.0">java/util/c..</text>
        </g>
        <g>
            <title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (632 samples, 8.00%)</title>
            <rect x="988.2" y="259.0" width="94.4" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="991.2" y="270.0">java/util/c..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (19 samples, 0.24%)
            </title>
            <rect x="988.2" y="243.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="991.2" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (19 samples, 0.24%)
            </title>
            <rect x="988.2" y="227.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="991.2" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (19 samples, 0.24%)</title>
            <rect x="988.2" y="211.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="991.2" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (613 samples, 7.76%)</title>
            <rect x="991.0" y="243.0" width="91.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="994.0" y="254.0">java/util/c..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (613 samples, 7.76%)</title>
            <rect x="991.0" y="227.0" width="91.6" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="994.0" y="238.0">java/util/c..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (613 samples, 7.76%)</title>
            <rect x="991.0" y="211.0" width="91.6" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="994.0" y="222.0">java/util/c..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (612 samples, 7.75%)</title>
            <rect x="991.2" y="195.0" width="91.4" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="994.2" y="206.0">java/util/c..</text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (612 samples, 7.75%)</title>
            <rect x="991.2" y="179.0" width="91.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="994.2" y="190.0">jdk/interna..</text>
        </g>
        <g>
            <title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.05%)</title>
            <rect x="995.1" y="163.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="998.1" y="174.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (4 samples, 0.05%)</title>
            <rect x="995.6" y="163.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="998.6" y="174.0"></text>
        </g>
        <g>
            <title>Parker::unpark() (2 samples, 0.03%)</title>
            <rect x="996.2" y="163.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="999.2" y="174.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::release_stable_list() (2 samples, 0.03%)</title>
            <rect x="996.5" y="163.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="999.5" y="174.0"></text>
        </g>
        <g>
            <title>Thread::current() (6 samples, 0.08%)</title>
            <rect x="996.8" y="163.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="999.8" y="174.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (562 samples, 7.11%)</title>
            <rect x="998.2" y="163.0" width="83.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
            <text x="1001.2" y="174.0">Unsafe_Un..</text>
        </g>
        <g>
            <title>HandleMark::pop_and_restore() (12 samples, 0.15%)</title>
            <rect x="998.9" y="147.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="1001.9" y="158.0"></text>
        </g>
        <g>
            <title>Chunk::next() const (10 samples, 0.13%)</title>
            <rect x="999.2" y="131.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1002.2" y="142.0"></text>
        </g>
        <g>
            <title>HandleMarkCleaner::~HandleMarkCleaner() (4 samples, 0.05%)</title>
            <rect x="1000.9" y="147.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1003.9" y="158.0"></text>
        </g>
        <g>
            <title>Thread::last_handle_mark() const (4 samples, 0.05%)</title>
            <rect x="1000.9" y="131.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1003.9" y="142.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_from_jni_environment(JNIEnv_*) (6 samples, 0.08%)</title>
            <rect x="1001.5" y="147.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1004.5" y="158.0"></text>
        </g>
        <g>
            <title>JavaThread::is_terminated() const (4 samples, 0.05%)</title>
            <rect x="1001.8" y="131.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1004.8" y="142.0"></text>
        </g>
        <g>
            <title>int OrderAccess::load_acquire&lt;int&gt;(int const volatile*) (3 samples, 0.04%)</title>
            <rect x="1001.9" y="115.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1004.9" y="126.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, OrderAccess::PlatformOrderedLoad&lt;4ul, (ScopedFenceType)0&gt;, void&gt;::operator()(int
                const volatile*) const (3 samples, 0.04%)
            </title>
            <rect x="1001.9" y="99.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1004.9" y="110.0"></text>
        </g>
        <g>
            <title>int OrderAccess::ordered_load&lt;int, (ScopedFenceType)0&gt;(int const volatile*) (2 samples,
                0.03%)
            </title>
            <rect x="1002.1" y="83.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1005.1" y="94.0"></text>
        </g>
        <g>
            <title>int Atomic::load&lt;int&gt;(int const volatile*) (2 samples, 0.03%)</title>
            <rect x="1002.1" y="67.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1005.1" y="78.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;int, Atomic::PlatformLoad&lt;4ul&gt;, void&gt;::operator()(int const volatile*)
                const (2 samples, 0.03%)
            </title>
            <rect x="1002.1" y="51.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
            <text x="1005.1" y="62.0"></text>
        </g>
        <g>
            <title>int Atomic::PlatformLoad&lt;4ul&gt;::operator()&lt;int&gt;(int const volatile*) const (2 samples,
                0.03%)
            </title>
            <rect x="1002.1" y="35.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1005.1" y="46.0"></text>
        </g>
        <g>
            <title>Thread::current() (17 samples, 0.22%)</title>
            <rect x="1002.5" y="147.0" width="2.6" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1005.5" y="158.0"></text>
        </g>
        <g>
            <title>Thread::current_or_null() (8 samples, 0.10%)</title>
            <rect x="1002.5" y="131.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1005.5" y="142.0"></text>
        </g>
        <g>
            <title>_dispatch_queue_attr_concurrent (9 samples, 0.11%)</title>
            <rect x="1003.7" y="131.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
            <text x="1006.7" y="142.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_and_fence(JavaThread*, JavaThreadState, JavaThreadState) (5
                samples, 0.06%)
            </title>
            <rect x="1005.4" y="147.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1008.4" y="158.0"></text>
        </g>
        <g>
            <title>InterfaceSupport::serialize_thread_state_internal(JavaThread*, bool) (3 samples, 0.04%)</title>
            <rect x="1005.4" y="131.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1008.4" y="142.0"></text>
        </g>
        <g>
            <title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) (13 samples, 0.16%)
            </title>
            <rect x="1006.1" y="147.0" width="1.9" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1009.1" y="158.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::poll(Thread*) (13 samples, 0.16%)</title>
            <rect x="1006.1" y="131.0" width="1.9" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="1009.1" y="142.0"></text>
        </g>
        <g>
            <title>JavaThread::is_Java_thread() const (4 samples, 0.05%)</title>
            <rect x="1006.1" y="115.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1009.1" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll(Thread*) (8 samples, 0.10%)</title>
            <rect x="1006.7" y="115.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="1009.7" y="126.0"></text>
        </g>
        <g>
            <title>SafepointMechanism::local_poll_armed(JavaThread*) (6 samples, 0.08%)</title>
            <rect x="1007.0" y="99.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1010.0" y="110.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::load_acquire&lt;void volatile*&gt;(void volatile* const volatile*) (5
                samples, 0.06%)
            </title>
            <rect x="1007.2" y="83.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
            <text x="1010.2" y="94.0"></text>
        </g>
        <g>
            <title>Atomic::LoadImpl&lt;void volatile*, OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;,
                void&gt;::operator()(void volatile* const volatile*) const (3 samples, 0.04%)
            </title>
            <rect x="1007.2" y="67.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1010.2" y="78.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::ordered_load&lt;void volatile*, (ScopedFenceType)0&gt;(void volatile*
                const volatile*) (2 samples, 0.03%)
            </title>
            <rect x="1007.3" y="51.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1010.3" y="62.0"></text>
        </g>
        <g>
            <title>void volatile* Atomic::load&lt;void volatile*&gt;(void volatile* const volatile*) (2 samples,
                0.03%)
            </title>
            <rect x="1007.3" y="35.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1010.3" y="46.0"></text>
        </g>
        <g>
            <title>void volatile* OrderAccess::PlatformOrderedLoad&lt;8ul, (ScopedFenceType)0&gt;::operator()&lt;void
                volatile*&gt;(void volatile* const volatile*) const (2 samples, 0.03%)
            </title>
            <rect x="1007.6" y="67.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1010.6" y="78.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::ThreadsListHandle(Thread*) (7 samples, 0.09%)</title>
            <rect x="1008.0" y="147.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1011.0" y="158.0"></text>
        </g>
        <g>
            <title>SafeThreadsListPtr::acquire_stable_list_fast_path() (6 samples, 0.08%)</title>
            <rect x="1008.2" y="131.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1011.2" y="142.0"></text>
        </g>
        <g>
            <title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (20 samples,
                0.25%)
            </title>
            <rect x="1009.1" y="147.0" width="3.0" height="15" fill="#dada42" rx="2" ry="2"/>
            <text x="1012.1" y="158.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::thread(oopDesc*) (2 samples, 0.03%)</title>
            <rect x="1010.9" y="131.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
            <text x="1013.9" y="142.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (5 samples, 0.06%)</title>
            <rect x="1011.3" y="131.0" width="0.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1014.3" y="142.0"></text>
        </g>
        <g>
            <title>__psynch_cvsignal (425 samples, 5.38%)</title>
            <rect x="1012.1" y="147.0" width="63.5" height="15" fill="#f37373" rx="2" ry="2"/>
            <text x="1015.1" y="158.0">__psync..</text>
        </g>
        <g>
            <title>_pthread_cond_updateval (3 samples, 0.04%)</title>
            <rect x="1075.6" y="147.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
            <text x="1078.6" y="158.0"></text>
        </g>
        <g>
            <title>java_lang_Thread::thread(oopDesc*) (4 samples, 0.05%)</title>
            <rect x="1076.0" y="147.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1079.0" y="158.0"></text>
        </g>
        <g>
            <title>oopDesc::address_field(int) const (3 samples, 0.04%)</title>
            <rect x="1076.6" y="147.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1079.6" y="158.0"></text>
        </g>
        <g>
            <title>pthread_cond_signal (9 samples, 0.11%)</title>
            <rect x="1077.1" y="147.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
            <text x="1080.1" y="158.0"></text>
        </g>
        <g>
            <title>_pthread_cond_updateval (4 samples, 0.05%)</title>
            <rect x="1077.8" y="131.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
            <text x="1080.8" y="142.0"></text>
        </g>
        <g>
            <title>pthread_mutex_lock (23 samples, 0.29%)</title>
            <rect x="1078.6" y="147.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
            <text x="1081.6" y="158.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.06%)</title>
            <rect x="1082.6" y="259.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1085.6" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.06%)</title>
            <rect x="1082.6" y="243.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1085.6" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title>
            <rect x="1082.6" y="227.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
            <text x="1085.6" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)
            </title>
            <rect x="1082.6" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1085.6" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title>
            <rect x="1082.6" y="195.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1085.6" y="206.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title>
            <rect x="1082.6" y="179.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
            <text x="1085.6" y="190.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.04%)</title>
            <rect x="1082.9" y="227.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1085.9" y="238.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.04%)</title>
            <rect x="1082.9" y="211.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
            <text x="1085.9" y="222.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (13 samples, 0.16%)</title>
            <rect x="1083.3" y="259.0" width="2.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
            <text x="1086.3" y="270.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (13 samples, 0.16%)</title>
            <rect x="1083.3" y="243.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1086.3" y="254.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (13 samples, 0.16%)</title>
            <rect x="1083.3" y="227.0" width="2.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1086.3" y="238.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/LockSupport.unpark (4 samples, 0.05%)</title>
            <rect x="1084.7" y="211.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1087.7" y="222.0"></text>
        </g>
        <g>
            <title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.05%)</title>
            <rect x="1084.7" y="195.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1087.7" y="206.0"></text>
        </g>
        <g>
            <title>Unsafe_Unpark(JNIEnv_*, _jobject*, _jobject*) (3 samples, 0.04%)</title>
            <rect x="1084.8" y="179.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
            <text x="1087.8" y="190.0"></text>
        </g>
        <g>
            <title>Thread::current() (2 samples, 0.03%)</title>
            <rect x="1084.8" y="163.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1087.8" y="174.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (4 samples, 0.05%)</title>
            <rect x="1085.3" y="275.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1088.3" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/PathMapper.find (26 samples, 0.33%)</title>
            <rect x="1085.9" y="339.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1088.9" y="350.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.get (26 samples, 0.33%)</title>
            <rect x="1085.9" y="323.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1088.9" y="334.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.getNode (8 samples, 0.10%)</title>
            <rect x="1085.9" y="307.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
            <text x="1088.9" y="318.0"></text>
        </g>
        <g>
            <title>java/util/HashMap.hash (18 samples, 0.23%)</title>
            <rect x="1087.1" y="307.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1090.1" y="318.0"></text>
        </g>
        <g>
            <title>java/lang/String.hashCode (18 samples, 0.23%)</title>
            <rect x="1087.1" y="291.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1090.1" y="302.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.hashCode (18 samples, 0.23%)</title>
            <rect x="1087.1" y="275.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1090.1" y="286.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getPath (30 samples, 0.38%)</title>
            <rect x="1089.8" y="339.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1092.8" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (30 samples, 0.38%)</title>
            <rect x="1089.8" y="323.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
            <text x="1092.8" y="334.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (30 samples, 0.38%)</title>
            <rect x="1089.8" y="307.0" width="4.4" height="15" fill="#67f867" rx="2" ry="2"/>
            <text x="1092.8" y="318.0"></text>
        </g>
        <g>
            <title>RequestHandler2_entity.handleRequest (17 samples, 0.22%)</title>
            <rect x="1090.1" y="291.0" width="2.5" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1093.1" y="302.0"></text>
        </g>
        <g>
            <title>itable stub (11 samples, 0.14%)</title>
            <rect x="1092.6" y="291.0" width="1.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
            <text x="1095.6" y="302.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.parseRequest (39 samples, 0.49%)</title>
            <rect x="1094.2" y="371.0" width="5.9" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1097.2" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.&lt;init&gt; (7 samples, 0.09%)</title>
            <rect x="1095.6" y="355.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
            <text x="1098.6" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (16 samples, 0.20%)</title>
            <rect x="1096.6" y="355.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1099.6" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (16 samples, 0.20%)</title>
            <rect x="1096.6" y="339.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1099.6" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.startsWith (7 samples, 0.09%)</title>
            <rect x="1099.0" y="355.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1102.0" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.startParsingRequestBody (12 samples, 0.15%)</title>
            <rect x="1100.1" y="371.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
            <text x="1103.1" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (12 samples, 0.15%)</title>
            <rect x="1100.1" y="355.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1103.1" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/Integer.parseInt (4 samples, 0.05%)</title>
            <rect x="1100.7" y="339.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
            <text x="1103.7" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.charAt (4 samples, 0.05%)</title>
            <rect x="1100.7" y="323.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
            <text x="1103.7" y="334.0"></text>
        </g>
        <g>
            <title>jlong_disjoint_arraycopy (4 samples, 0.05%)</title>
            <rect x="1101.3" y="339.0" width="0.6" height="15" fill="#ea6767" rx="2" ry="2"/>
            <text x="1104.3" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/http/Request.getHeader (28 samples, 0.35%)</title>
            <rect x="1101.9" y="371.0" width="4.1" height="15" fill="#54e554" rx="2" ry="2"/>
            <text x="1104.9" y="382.0"></text>
        </g>
        <g>
            <title>java/lang/String.regionMatches (16 samples, 0.20%)</title>
            <rect x="1103.1" y="355.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
            <text x="1106.1" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.regionMatchesCI (16 samples, 0.20%)</title>
            <rect x="1103.1" y="339.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
            <text x="1106.1" y="350.0"></text>
        </g>
        <g>
            <title>java/lang/String.substring (3 samples, 0.04%)</title>
            <rect x="1105.4" y="355.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1108.4" y="366.0"></text>
        </g>
        <g>
            <title>java/lang/StringLatin1.newString (3 samples, 0.04%)</title>
            <rect x="1105.4" y="339.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1108.4" y="350.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (50 samples, 0.63%)</title>
            <rect x="1106.0" y="371.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1109.0" y="382.0"></text>
        </g>
        <g>
            <title>one/nio/util/Utf8.read (31 samples, 0.39%)</title>
            <rect x="1108.9" y="355.0" width="4.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
            <text x="1111.9" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.read (454 samples, 5.75%)</title>
            <rect x="1113.5" y="387.0" width="67.8" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1116.5" y="398.0">one/nio..</text>
        </g>
        <g>
            <title>one/nio/net/JavaSocket.read (431 samples, 5.46%)</title>
            <rect x="1113.5" y="371.0" width="64.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
            <text x="1116.5" y="382.0">one/nio..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (424 samples, 5.37%)</title>
            <rect x="1114.6" y="355.0" width="63.3" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1117.6" y="366.0">sun/nio..</text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.lock (10 samples, 0.13%)</title>
            <rect x="1114.7" y="339.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
            <text x="1117.7" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.09%)</title>
            <rect x="1115.2" y="323.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
            <text x="1118.2" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.06%)</title>
            <rect x="1116.2" y="339.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1119.2" y="350.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.06%)</title>
            <rect x="1116.2" y="323.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
            <text x="1119.2" y="334.0"></text>
        </g>
        <g>
            <title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.06%)</title>
            <rect x="1116.2" y="307.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
            <text x="1119.2" y="318.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (388 samples, 4.91%)</title>
            <rect x="1117.0" y="339.0" width="57.9" height="15" fill="#55e655" rx="2" ry="2"/>
            <text x="1120.0" y="350.0">sun/ni..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.read (388 samples, 4.91%)</title>
            <rect x="1117.0" y="323.0" width="57.9" height="15" fill="#62f362" rx="2" ry="2"/>
            <text x="1120.0" y="334.0">sun/ni..</text>
        </g>
        <g>
            <title>sun/nio/ch/IOUtil.readIntoNativeBuffer (388 samples, 4.91%)</title>
            <rect x="1117.0" y="307.0" width="57.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
            <text x="1120.0" y="318.0">sun/ni..</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketDispatcher.read (388 samples, 4.91%)</title>
            <rect x="1117.0" y="291.0" width="57.9" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1120.0" y="302.0">sun/ni..</text>
        </g>
        <g>
            <title>sun/nio/ch/FileDispatcherImpl.read0 (339 samples, 4.29%)</title>
            <rect x="1124.3" y="275.0" width="50.6" height="15" fill="#65f665" rx="2" ry="2"/>
            <text x="1127.3" y="286.0">sun/n..</text>
        </g>
        <g>
            <title>Java_sun_nio_ch_FileDispatcherImpl_read0 (10 samples, 0.13%)</title>
            <rect x="1128.6" y="259.0" width="1.5" height="15" fill="#ec6868" rx="2" ry="2"/>
            <text x="1131.6" y="270.0"></text>
        </g>
        <g>
            <title>fdval (4 samples, 0.05%)</title>
            <rect x="1129.5" y="243.0" width="0.6" height="15" fill="#eb6868" rx="2" ry="2"/>
            <text x="1132.5" y="254.0"></text>
        </g>
        <g>
            <title>read (298 samples, 3.77%)</title>
            <rect x="1130.4" y="259.0" width="44.5" height="15" fill="#ec6969" rx="2" ry="2"/>
            <text x="1133.4" y="270.0">read</text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.endRead (20 samples, 0.25%)</title>
            <rect x="1174.9" y="339.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
            <text x="1177.9" y="350.0"></text>
        </g>
        <g>
            <title>java/nio/channels/spi/AbstractInterruptibleChannel.end (20 samples, 0.25%)</title>
            <rect x="1174.9" y="323.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
            <text x="1177.9" y="334.0"></text>
        </g>
        <g>
            <title>jbyte_disjoint_arraycopy (3 samples, 0.04%)</title>
            <rect x="1176.9" y="307.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
            <text x="1179.9" y="318.0"></text>
        </g>
        <g>
            <title>jshort_disjoint_arraycopy (2 samples, 0.03%)</title>
            <rect x="1177.5" y="307.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
            <text x="1180.5" y="318.0"></text>
        </g>
        <g>
            <title>one/nio/net/Session.listen (23 samples, 0.29%)</title>
            <rect x="1177.9" y="371.0" width="3.4" height="15" fill="#59ea59" rx="2" ry="2"/>
            <text x="1180.9" y="382.0"></text>
        </g>
        <g>
            <title>gettimeofday (7 samples, 0.09%)</title>
            <rect x="1178.2" y="355.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="1181.2" y="366.0"></text>
        </g>
        <g>
            <title>one/nio/http/HttpSession.processHttpBuffer (3 samples, 0.04%)</title>
            <rect x="1179.2" y="355.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
            <text x="1182.2" y="366.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (11 samples, 0.14%)</title>
            <rect x="1179.7" y="355.0" width="1.6" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1182.7" y="366.0"></text>
        </g>
        <g>
            <title>__chk_fail_overlap.cold.1 (4 samples, 0.05%)</title>
            <rect x="1179.7" y="339.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
            <text x="1182.7" y="350.0"></text>
        </g>
        <g>
            <title>gettimeofday (5 samples, 0.06%)</title>
            <rect x="1180.3" y="339.0" width="0.7" height="15" fill="#fe8080" rx="2" ry="2"/>
            <text x="1183.3" y="350.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (4 samples, 0.05%)</title>
            <rect x="1180.4" y="323.0" width="0.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
            <text x="1183.4" y="334.0"></text>
        </g>
        <g>
            <title>rcmd_af.canonnamebuf (2 samples, 0.03%)</title>
            <rect x="1181.0" y="339.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
            <text x="1184.0" y="350.0"></text>
        </g>
        <g>
            <title>sun/nio/ch/SocketChannelImpl.read (2 samples, 0.03%)</title>
            <rect x="1181.3" y="387.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
            <text x="1184.3" y="398.0"></text>
        </g>
        <g>
            <title>os::javaTimeMillis() (4 samples, 0.05%)</title>
            <rect x="1181.6" y="435.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1184.6" y="446.0"></text>
        </g>
        <g>
            <title>thread_start (51 samples, 0.65%)</title>
            <rect x="1182.4" y="435.0" width="7.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
            <text x="1185.4" y="446.0"></text>
        </g>
        <g>
            <title>_pthread_start (51 samples, 0.65%)</title>
            <rect x="1182.4" y="419.0" width="7.6" height="15" fill="#f57575" rx="2" ry="2"/>
            <text x="1185.4" y="430.0"></text>
        </g>
        <g>
            <title>thread_native_entry(Thread*) (51 samples, 0.65%)</title>
            <rect x="1182.4" y="403.0" width="7.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
            <text x="1185.4" y="414.0"></text>
        </g>
        <g>
            <title>Thread::call_run() (51 samples, 0.65%)</title>
            <rect x="1182.4" y="387.0" width="7.6" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1185.4" y="398.0"></text>
        </g>
        <g>
            <title>ConcurrentGCThread::run() (7 samples, 0.09%)</title>
            <rect x="1182.4" y="371.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1185.4" y="382.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::run_service() (7 samples, 0.09%)</title>
            <rect x="1182.4" y="355.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1185.4" y="366.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (2 samples, 0.03%)</title>
            <rect x="1182.4" y="339.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1185.4" y="350.0"></text>
        </g>
        <g>
            <title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples,
                0.03%)
            </title>
            <rect x="1182.4" y="323.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1185.4" y="334.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (2 samples, 0.03%)</title>
            <rect x="1182.4" y="307.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1185.4" y="318.0"></text>
        </g>
        <g>
            <title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (2 samples, 0.03%)
            </title>
            <rect x="1182.4" y="291.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1185.4" y="302.0"></text>
        </g>
        <g>
            <title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (2 samples, 0.03%)</title>
            <rect x="1182.4" y="275.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
            <text x="1185.4" y="286.0"></text>
        </g>
        <g>
            <title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (5 samples, 0.06%)</title>
            <rect x="1182.7" y="339.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
            <text x="1185.7" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (5 samples, 0.06%)</title>
            <rect x="1182.7" y="323.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1185.7" y="334.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (5 samples, 0.06%)</title>
            <rect x="1182.7" y="307.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1185.7" y="318.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title>
            <rect x="1182.7" y="291.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
            <text x="1185.7" y="302.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (4 samples, 0.05%)</title>
            <rect x="1182.7" y="275.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="1185.7" y="286.0"></text>
        </g>
        <g>
            <title>GangWorker::loop() (25 samples, 0.32%)</title>
            <rect x="1183.4" y="371.0" width="3.8" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1186.4" y="382.0"></text>
        </g>
        <g>
            <title>G1FreeCollectionSetTask::work(unsigned int) (4 samples, 0.05%)</title>
            <rect x="1183.4" y="355.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1186.4" y="366.0"></text>
        </g>
        <g>
            <title>G1FreeCollectionSetTask::do_parallel_work_for_region(unsigned int, bool, bool) (2 samples, 0.03%)
            </title>
            <rect x="1183.4" y="339.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1186.4" y="350.0"></text>
        </g>
        <g>
            <title>G1ParTask::work(unsigned int) (14 samples, 0.18%)</title>
            <rect x="1184.0" y="355.0" width="2.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1187.0" y="366.0"></text>
        </g>
        <g>
            <title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (12 samples, 0.15%)
            </title>
            <rect x="1184.2" y="339.0" width="1.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1187.2" y="350.0"></text>
        </g>
        <g>
            <title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (12 samples, 0.15%)</title>
            <rect x="1184.2" y="323.0" width="1.8" height="15" fill="#e5e545" rx="2" ry="2"/>
            <text x="1187.2" y="334.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (12 samples,
                0.15%)
            </title>
            <rect x="1184.2" y="307.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
            <text x="1187.2" y="318.0"></text>
        </g>
        <g>
            <title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned
                long, bool) (12 samples, 0.15%)
            </title>
            <rect x="1184.2" y="291.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1187.2" y="302.0"></text>
        </g>
        <g>
            <title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (12 samples, 0.15%)</title>
            <rect x="1184.2" y="275.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
            <text x="1187.2" y="286.0"></text>
        </g>
        <g>
            <title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (9 samples, 0.11%)</title>
            <rect x="1184.2" y="259.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1187.2" y="270.0"></text>
        </g>
        <g>
            <title>void G1ParScanThreadState::do_oop_evac&lt;unsigned int&gt;(unsigned int*) (6 samples, 0.08%)</title>
            <rect x="1184.5" y="243.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
            <text x="1187.5" y="254.0"></text>
        </g>
        <g>
            <title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples,
                0.06%)
            </title>
            <rect x="1184.6" y="227.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
            <text x="1187.6" y="238.0"></text>
        </g>
        <g>
            <title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.04%)
            </title>
            <rect x="1185.5" y="259.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
            <text x="1188.5" y="270.0"></text>
        </g>
        <g>
            <title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion,
                G1ScanObjsDuringUpdateRSClosure*) (3 samples, 0.04%)
            </title>
            <rect x="1185.5" y="243.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1188.5" y="254.0"></text>
        </g>
        <g>
            <title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass,
                unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (3 samples, 0.04%)
            </title>
            <rect x="1185.5" y="227.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
            <text x="1188.5" y="238.0"></text>
        </g>
        <g>
            <title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (2 samples,
                0.03%)
            </title>
            <rect x="1185.7" y="211.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
            <text x="1188.7" y="222.0"></text>
        </g>
        <g>
            <title>G1RedirtyLoggedCardsTask::work(unsigned int) (2 samples, 0.03%)</title>
            <rect x="1186.1" y="355.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1189.1" y="366.0"></text>
        </g>
        <g>
            <title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (2 samples,
                0.03%)
            </title>
            <rect x="1186.1" y="339.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
            <text x="1189.1" y="350.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (4 samples, 0.05%)</title>
            <rect x="1186.4" y="355.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
            <text x="1189.4" y="366.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (4 samples, 0.05%)</title>
            <rect x="1186.4" y="339.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
            <text x="1189.4" y="350.0"></text>
        </g>
        <g>
            <title>JavaThread::thread_main_inner() (5 samples, 0.06%)</title>
            <rect x="1187.2" y="371.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1190.2" y="382.0"></text>
        </g>
        <g>
            <title>CompileBroker::compiler_thread_loop() (4 samples, 0.05%)</title>
            <rect x="1187.2" y="355.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
            <text x="1190.2" y="366.0"></text>
        </g>
        <g>
            <title>CompileBroker::invoke_compiler_on_method(CompileTask*) (4 samples, 0.05%)</title>
            <rect x="1187.2" y="339.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1190.2" y="350.0"></text>
        </g>
        <g>
            <title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (3 samples, 0.04%)</title>
            <rect x="1187.2" y="323.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="1190.2" y="334.0"></text>
        </g>
        <g>
            <title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples,
                0.04%)
            </title>
            <rect x="1187.2" y="307.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1190.2" y="318.0"></text>
        </g>
        <g>
            <title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (3 samples,
                0.04%)
            </title>
            <rect x="1187.2" y="291.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1190.2" y="302.0"></text>
        </g>
        <g>
            <title>VMThread::run() (8 samples, 0.10%)</title>
            <rect x="1187.9" y="371.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
            <text x="1190.9" y="382.0"></text>
        </g>
        <g>
            <title>VMThread::loop() (8 samples, 0.10%)</title>
            <rect x="1187.9" y="355.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1190.9" y="366.0"></text>
        </g>
        <g>
            <title>VMThread::evaluate_operation(VM_Operation*) (7 samples, 0.09%)</title>
            <rect x="1188.1" y="339.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
            <text x="1191.1" y="350.0"></text>
        </g>
        <g>
            <title>VM_Operation::evaluate() (7 samples, 0.09%)</title>
            <rect x="1188.1" y="323.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1191.1" y="334.0"></text>
        </g>
        <g>
            <title>VM_G1CollectForAllocation::doit() (7 samples, 0.09%)</title>
            <rect x="1188.1" y="307.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1191.1" y="318.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (7 samples, 0.09%)</title>
            <rect x="1188.1" y="291.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
            <text x="1191.1" y="302.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (3
                samples, 0.04%)
            </title>
            <rect x="1188.4" y="275.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1191.4" y="286.0"></text>
        </g>
        <g>
            <title>G1CollectedHeap::redirty_logged_cards() (2 samples, 0.03%)</title>
            <rect x="1188.4" y="259.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
            <text x="1191.4" y="270.0"></text>
        </g>
        <g>
            <title>WorkGang::run_task(AbstractGangTask*, unsigned int) (2 samples, 0.03%)</title>
            <rect x="1188.4" y="243.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
            <text x="1191.4" y="254.0"></text>
        </g>
        <g>
            <title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2
                samples, 0.03%)
            </title>
            <rect x="1188.4" y="227.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="1191.4" y="238.0"></text>
        </g>
        <g>
            <title>si_module_static_search.search_vtable (2 samples, 0.03%)</title>
            <rect x="1188.4" y="211.0" width="0.3" height="15" fill="#ef6c6c" rx="2" ry="2"/>
            <text x="1191.4" y="222.0"></text>
        </g>
        <g>
            <title>WatcherThread::run() (6 samples, 0.08%)</title>
            <rect x="1189.1" y="371.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
            <text x="1192.1" y="382.0"></text>
        </g>
        <g>
            <title>WatcherThread::sleep() const (6 samples, 0.08%)</title>
            <rect x="1189.1" y="355.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
            <text x="1192.1" y="366.0"></text>
        </g>
        <g>
            <title>Monitor::wait(bool, long, bool) (6 samples, 0.08%)</title>
            <rect x="1189.1" y="339.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
            <text x="1192.1" y="350.0"></text>
        </g>
        <g>
            <title>Monitor::IWait(Thread*, long) (6 samples, 0.08%)</title>
            <rect x="1189.1" y="323.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
            <text x="1192.1" y="334.0"></text>
        </g>
        <g>
            <title>os::PlatformEvent::park(long) (4 samples, 0.05%)</title>
            <rect x="1189.1" y="307.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
            <text x="1192.1" y="318.0"></text>
        </g>
        <g>
            <title>__psynch_cvwait (4 samples, 0.05%)</title>
            <rect x="1189.1" y="291.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
            <text x="1192.1" y="302.0"></text>
        </g>
    </g>
</svg>
